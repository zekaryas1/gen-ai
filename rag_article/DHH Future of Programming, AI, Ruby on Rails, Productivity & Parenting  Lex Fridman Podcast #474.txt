00:00 No one anywhere who's serious believes that Cookie banners does anything good for anyone. Yet, we've been unable to
00:07 get rid of it. This is the thing that really gets me about cookie banners, too. It's not just the EU. It's the
00:12 entire world. You can't hide from cookie banners anywhere on this planet. If you go to goddamn Mars on one of Elon's
00:19 rockets and you try to access a web page, you'll still see a cookie banner. No one in the universe is safe from this
00:26 nonsense. It sometimes feels like we're barely better off. Like web pages aren't that different from what they were in
00:33 the late 90s, early 2000s. They're still just forms. They still just write to databases. A lot of people, I think, are
00:39 very uncomfortable with the fact that they are essentially CRUD monkeys. They
00:44 just make systems that create, read, update, or delete rows in a database.
00:50 And they have to compensate for that existential dread by over complicating
00:56 things. That's a huge part of the satisfaction of driving a race car is driving it at the edge of adhesion, as
01:02 we call it, where you're essentially just a tiny movement away from spinning out. Doesn't take much. Then the car
01:08 starts rotating. Once it starts rotating, you lose grip and you're going for the wall. That balance of danger and
01:17 skill is what's so intoxicating. The following is a conversation with
01:23 David Heinmire Hansen, also known as DHH. He is a legend in the programming
01:30 and tech world. Brilliant and insightful, sometimes controversial and always fun to talk to. He's the creator
01:38 of Ruby on Rails, which is an influential web development framework behind many websites used by millions of
01:44 people, including Shopify, GitHub, and Airbnb. He is the co-owner and CTO of 37 signals
01:53 that created base camp and once. He is a
01:58 New York Times best-selling author together with his co-author Jason Frerieded of four books rework remote
02:06 getting real and it doesn't have to be crazy at work. And on top of that, he's
02:12 also a race car driver, including being a class winner at the legendary 24-hour
02:17 lemon race. This is the Lex Rubin podcast. To support it, please check out our sponsors in the description and
02:25 consider subscribing to this channel. And now, dear friends, here's DH.
02:33 For someone who became a legendary programmer, you officially got into programming late in life. And I guess
02:39 that's because uh you tried to learn how to program a few times and you failed. So can you
02:45 tell me the uh the full story, the saga of your failures to learn programming?
02:51 Was Commodore 64 involved? Commodore 64 was the inspiration. I really wanted a
02:56 Commodore 64. That was the first computer I ever sat down in front. And the way I sat down in front of it was I
03:02 was 5 years old and there was this one kid on my street who had a Commodore 64. No one else had a computer, so we were
03:09 all the kids just getting over there and we were all playing Y Kung Fu. I don't know if you've ever seen that game. It
03:14 was one of the original fighting games. It's really a great game. And I was playing that for the first time at 5
03:20 years old. And we were like seven kids sitting up in this one kid's bedroom all
03:25 taking our turn to play the game. And I just found that unbelievably interesting. And I begged and I begged
03:32 and I begged my dad, could I get a computer? And he finally comes home.
03:37 He's like, "I got your computer." I was like, "Yes, my own Commodore 64." And he
03:42 pulls out this black, green, and blue keyboard. That's an Armstrong 464. I was
03:50 like, "Dad, what's this? The disappointment.
03:55 This is not a Commodore 64." But it was a computer. So, I got my first computer
04:02 at essentially 6 years old, that Armstrad 464. And of course, the first thing I wanted to do, I wanted to play
04:07 video games. And I think the computer, which he, by the way, had traded for a
04:13 TV and a stereo recorder or something like that, came with like two games. One was this Frogger game where you had to
04:19 escape from underground. It was actually kind of dark, like this frog. You're trying to get it out from underground.
04:24 And I was just I was pretty bad at it. And I only had those two games. And then I wanted more games. And one way to get
04:32 more games when you're a kid who don't have a lot of money and can't just buy a bunch of games is to type them in yourself. Back in ' 84 85 magazines
04:41 would literally print source code at the back of their magazines and you could just sit and type it in. So I tried to
04:48 do that and it would take like two hours to print this game into the Armistrad
04:54 and of course I'd make some spelling mistake along the way and something wouldn't work and the whole thing I
04:59 wasn't that good of English. I was born in Denmark. So I was really trying to get into it because I wanted all these
05:05 games and didn't have the money to buy them and I tried quite hard for quite a while to get into it but it just never
05:11 clicked. And then I discovered the magic of piracy. And after that I kind basically just took some time off from
05:18 learning to program because well now suddenly I had access to all sorts of games. So that was the first attempt
05:24 like around six seven years old. And what's funny is I remember these
05:30 fragments. I remember not understanding the purpose of a variable. If if there's
05:35 a thing and you assign something, why would you assign another thing to it? So, for some reason, I understood constants. Like, constants made sense to
05:41 me, but variables didn't. Then, maybe I'm 11 or 12. I've gotten into the
05:47 AmIGGA at this point. The Amigga, by the way, still perhaps my favorite computer
05:52 of all time. I mean, this is one of those things where you like people get older and they're like, "Oh, the music from the 80s was amazing." To me, even
05:58 as someone who loves computers, who loved new computers, the AmIGGA was this
06:04 magical machine that was made by the same company that produced the Commodore
06:10 64. And I got the AmIGGA 500, I think in
06:15 87. Look at this sexy thing. That is a sexy machine right there. This is from an age, by the way, where
06:22 computing wasn't global in the same sense. The different territories had different computers that were popular.
06:27 The Amigga was really popular in Europe, but it wasn't very popular at all in the US, as far as I understand. It wasn't
06:33 popular in Japan. The there were just different machines. The Apple 2 was a big thing in the US. I'd never even
06:39 heard of Apple in the8s in Copenhagen. But the Amigga 500 was the machine that
06:45 brought me to want to try it again. And you know what's funny? The reason I wanted to try it again was I remembered
06:51 the first time to learn. And then there was this programming language that was literally called easy Amos.
06:57 Mhm. Like the easy version of Amos. I'm like, if it's if it's easy Amos, how hard can it be? I got to be able to figure this
07:04 out. And this time I tried harder. I got into conditionals. I got into loops. I
07:10 got into all these things and I still I couldn't do it. And on the second attempt, I really got
07:16 to the point like maybe this is just maybe I'm not smart enough. Maybe programming is just not maybe it's too
07:22 much math. Like I like math in this sort of superficial way. I don't like it in
07:27 the deep way that some of my perhaps slightly nerdier friends did who I had tremendous respect for. Like I'm not
07:33 that person. I'm not the ma math geek who's going to figure it all out. So
07:38 after that attempt with easy Amos and failing to even get I don't even think I
07:44 completed one even very basic game. I thought the program is just not for me. I'm going to have to do something else.
07:51 I still love computers. I still love video games. I actually at that time had already begun making friends with people
07:56 who knew how to program who weren't even programming easy Amos. They were programming freaking Assembler. And I
08:02 would sit down and just go I'm how do you the moves and the memories and the
08:08 copies? How do you even do this? I don't even understand how you go from this to
08:13 AmIGGA demos, for example. That was the big thing with the Amigga. had this wonderful demo scene in Europe. It's
08:20 this really interesting period of time in the Amigga's history where you had
08:25 all these programmers spread out mostly all over Europe who would compete on
08:31 graphic competitions where you could probably bring one of these on YouTube on on this thing. They
08:37 would make these little um almost like music videos combining some MIDI music,
08:43 combining some cool graphics and they would do all of it in like 4K. 4 kilobytes that is not 4K is a
08:50 revolution, 4 kilobytes of of memory. And I just thought that was such a cool scene. This was obviously pre- internet.
08:57 It was even prebs bulletin board systems to some extent. me was you swap your demo software with
09:06 someone else by sending them a disc in the mail like the 3.5s and I just I was enamored
09:13 with that whole scene. I was enamored with what they were able to create and I just wanted to be a part of it even though I kind of didn't have any skills
09:19 to contribute and that's how I got into running BBS's. I didn't learn programming then and I wouldn't learn
09:26 programming until much later until I was almost 20 years old. The bulletin board systems existed in this funny space
09:32 where they were partly a service to the demo scenes allowing all these demo groups to distribute their amazing
09:39 demos. And then it was also a place to trade piracy software, pirated software.
09:45 And I ended up starting one of those when I was 14 years old in my tiny little bedroom in Copenhagen. I had my
09:52 at that point Amigga 4000. I had three telephone lines coming into my tiny
09:59 room. Nice. Which was funny because again, I'm 14 years old. By the time I was installing
10:04 my third line, you had to get someone from the telephone company to come do it. I get this guy and he's just looking
10:10 around like, "What is this? Why the hell is a 14-year-old having three phone
10:15 lines into their tiny little bedroom? What are what's going on here? Why are all these modems blinking red and um
10:22 black and making funny sounds?" Did your parents know? They did and they didn't. They knew I
10:28 had the phone lines. They knew I had the computer. I don't think they really understood that I was trading pirated
10:33 software that was both illegal and whatever else was going on. Oh, we should probably say that in
10:40 Europe, maybe you can comment on this in especially in Eastern Europe, but Europe in general, piracy, I think, was more
10:45 acceptable than it was in the United States. I don't know there maybe maybe it's just my upbringing. That
10:52 conversation wasn't present. I never spoke to anyone growing up in Denmark who had any moral qualms whatsoever
10:59 about piracy. It was just completely accepted that you're a kid. You want a lot of games.
11:05 You don't have a lot of money. What do you do? You trade. Yeah. Some people would occasionally buy a game. I mean, I once bought a uh Sega
11:13 Master System and the I bought one game cuz that was what I could afford. I got
11:18 Afterburner 2. I don't know if you've ever played that game. It's pretty bad implementation on the uh Sega Master
11:24 System, but it was like 600 crowners and I was making money at that time uh doing
11:31 newspaper delivery. I had to do that for a month to afford one game. I like video
11:37 games way too much to wait a month just to get one game. So piracy was just the way you did it. And that was how I got
11:44 into running this bulletin board system, being part of the demo scene, being part of the piracy scene to some extent. And
11:51 then also at some point realizing, oh, you can actually also make money on this and this can fund buying more phone
11:58 lines and buying more modems and buying more amiggas. Oh yeah, that was one of the demo parties. These were amazing
12:04 things. What am I looking at? Look at all those CRT monitors. All these CRT monitors. Again, when I
12:10 was 14, I I don't understand fully why my parents allowed this, but I traveled
12:17 from Copenhagen, the capital of Denmark, to O, this tiny little town in Judan on
12:23 the train with a bunch of dudes who were like late teens in their 20s. I'm 14
12:28 years old. I'm lugging my 14in CRT monitor with my computer in the back to
12:34 go to the party. That was what it was called. That was the biggest demo scene party at that time. And it was exactly
12:39 as you see in that picture. Thousands of people just lining up with their computers, programming demos all day
12:45 long and trading these things back and forth. That's kind of awesome. Not going to lie, it's a little ridiculous.
12:52 It's totally awesome. And I I I miss it in ways where the internet has connected people in some ways. But the connection
12:59 you get from sitting right next to someone else Yeah. who has their own CRT monitor, who's lugged it halfway around the country to
13:05 get there is truly special because it was also just this burst of creativity. You're constantly running around. You're
13:12 constantly surrounded by people who are really good at what they could do. They're really good at programming computers. It's infectious. It was part
13:18 of that pang I felt then going like, "Oh man, why can't I figure this out? I
13:23 mean, why can't I even figure out easy Amos?" I it's kind of frustrating but on your third attempt you a little
13:30 more successful. So third attempt is when I start getting it. This is when I start helping out
13:36 let's say building things for the internet. So around 95 I think it is or
13:42 96 I discovered the internet actually in ninth grade that was my first
13:47 experience. I went to some university in in Denmark and in ninth grade we had
13:54 this excursion and they sat us down in front of a computer and the computer had Netscape Navigator the first version or
14:00 maybe it was even the the precursor to that and they had a text editor and us
14:05 kids just got like hey built something on the internet and it was just HTML and the first thing you do is like oh I can
14:10 make the text text blink by just putting in this tag and saving it. That was that
14:17 moment. That was actually when I reawakened the urge to want to learn to program because I got a positive
14:23 experience. All the other experiences I had with programming was I'd spend hours typing something in, I'd click run and
14:30 it wouldn't work. And I'd get an error message that made no sense to me as a kid, either at six or seven or at 12.
14:37 And here I am sitting in front of a computer connected to the internet and I'm making text blink. I'm making it
14:43 larger. I'm turning it into an H1 or an H2. And these guys out here, we just did it
14:48 for like an hour and a half. And suddenly I go, "Oh, I can make things for the internet that someone in Germany
14:56 can be able to access and see and I don't have to ask anyone for permission. This is super cool. I got to do more of
15:01 this." So I got into the internet. I got into working with HTML and I still had all these friends from these demo
15:07 parties and I started working with them on creating gaming websites. I'd write
15:12 about the video games. I'd review him. This was another good way of getting new video games was to walk down to some
15:17 store and say like, hey, I'm a I'm a journalist. I'm like this 15year-old kid and they're they're looking at me,
15:22 you're you're a journalist. Yeah. Can I borrow some some games? Cuz this was when games moved on to the PlayStation
15:27 and these other things. You couldn't just as easily pirate, at least not at first. So, I went down there, did all
15:33 that. And that started the journey of the internet for me. It started working
15:38 on these gaming websites, working with programmers, figuring out that I could do something. I could work on the HTML part. It's not
15:45 really programming, but it kind of smells like it. You're talking to a computer, you're making it put text on
15:50 the screen, and you're communicating with someone halfway around the world. So, that became my pathway back into
15:56 programming. And then slowly I picked up more and more of it. First website I did
16:02 with someone, one of these programmers from the demo scene that was dynamic was ASP.NET. net and it wasn't even actually
16:08 called.net that was what we started on and then we moved on to PHP and PHP was when I finally got it when it finally
16:15 clicked when conditionals and loops and variables and all of that stuff started
16:21 to make sense enough to me that I thought I can do this. So would it be fair to say that we
16:28 wouldn't have DHH without PHP and therefore you owe all your success to PHP? 100% that's true and it's even
16:36 better than that because it's PHP to me didn't just give me a start in terms of
16:41 making my own web applications it actually gave me a bar in many ways I think the pinnacle of developer web
16:49 developer ergonomics is late '90s PHP you write this script you FTP it to a
16:56 server and instantly it's deployed instantly it's available you change anything in that file and you reload
17:02 boom it's right there. There's no web servers, there's no setup, there's just an Apache
17:08 that runs mod PHP. And it was essentially the easiest way to get a
17:14 dynamic web page up and going. And this is one of the things I've been chasing that high for basically the rest of my
17:20 career that it was so easy to make things for the internet in the mid to
17:25 late 90s. How did we lose the sensibilities that allowed us to not
17:31 just work this way, but get new people into the industry to give them their success experiences that I had, adding a
17:39 freaking Blink tag to an HTML page, ftping a PHP page to an Apache web
17:44 server without knowing really anything about anything, without knowing anything about frameworks, without knowing
17:50 anything about setup, all of that stuff have really taken us to a place where It sometimes feels like
17:57 we're barely better off. Like web pages aren't that different from what they were in the late 90s, early 2000s.
18:04 They're still just forms. They still just write to databases. A lot of people, I think, are very uncomfortable
18:09 with the fact that they are essentially CRUD monkeys. They just make systems
18:15 that create, read, update, or delete rows in a database. And they have to compensate for that existential dread by
18:24 over complicating things. Now, that's a bit of a character. There's more to it, and there's things you can learn for more sophisticated ways of thinking
18:30 about this, but there's still an ideal here, which was why I was so happy you had Peter Levels on because he still
18:36 basically works like this. And I look at that and go like, man, that's amazing. Yeah, you're chasing that high. He's
18:41 been high all along using PHP, jQuery,
18:46 and uh SQLite. I think it's amazing because he's proving that this isn't just a nostalgic
18:53 dream. He's actually doing it. He's running all these businesses. Now, some of that is, as he would admit up first
18:60 up front, is that he's just one guy. And you can do different things when you're just one guy. When you're working in a
19:06 team, when I started working on the team, when I started working with Jason Freed on Base Camp, we at first didn't
19:14 use version control together. I used version control for myself and then I thought, you know what, designers
19:21 ah, they're probably not smart enough to figure out CVS. Yeah. And therefore I just like, "No, no, no.
19:26 You just FTP it up. You just FTP it." I knew they knew how to do FTP. And then after the third time, I had overridden
19:33 their changes. I was like, "God damn it. I guess I got to teach Jason CBS to not do that again." But I think there's
19:41 still way more truth to the fact that we can work the way we did in the '90s, work the way Peter works today, even in
19:49 the team context and that we've been far too willing to hand over far too much of
19:54 our developer ergonomics to the merchants of complexity. And you've been chasing that with Rails
19:60 8. So h how do you bring all the cool features of a modern framework and make
20:06 it no build make it as as easy to create something and to ship it as it was in
20:12 the '9s with just PHP. It's very difficult for me to beat the Peter Level's approach
20:18 uh of just just it's so easy to just ship some PHP and it should be why
20:24 should it be harder than that? Our computers today are almost infinitely faster than what they were in the 90s.
20:31 So, shouldn't we be able to work in even easier ways? We should be looking back on the '90s and go like, "Oh, that was
20:37 way too complicated. Now we have more sophisticated technology that's way faster and it allows us to work in these
20:43 easier to use ways." But that's not true. But now you can see the line I draw in my work with Ruby and Rails and
20:50 especially with Rails 8. No build to me is reaching back to that '90s feeling
20:57 and going now we can do some of those things without giving up on all the
21:02 progress because I do think you can get too nostalgic. I do think you can start just fantasizing that everything was
21:08 better in the '90s. It wasn't. I mean I was there. There was a lot of things that sucked. And if we can somehow find
21:15 a way to combine the advantages and advances we've had
21:20 over the past 20 years with that ease of developer ergonomics, we can win. No build is a rejection of the part of web
21:28 development I've hated the most in the past 10-15 years which is the JavaScript
21:34 scene. Yeah. And I don't say that as someone who hates JavaScript. I mean I often joke that JavaScript is my second favorite
21:41 programming language. It's a very distant second. Ruby is by far in a way number one. But I actually like
21:46 JavaScript. I don't think it's a bad language. It gets a lot of flak. People add a string of two plus a
21:54 one and it gives something nonsense and I just go like, "Yeah, but why are you why would you do that? Just don't do that." The language is actually quite
22:00 lovely, especially the modern version ES6 that really introduced a proper
22:06 class syntax to it. So I could work with JavaScript in many of the same ways that I love working with Ruby made things so
22:12 much better. But in the early 20110s until quite recently, all of that
22:20 advancement happened in pre-processing happened in built pipelines. The
22:25 browsers couldn't speak a dialect of JavaScript that was pleasant to work with. So everyone started to
22:31 pre-ompiling their JavaScript to be able to use more modern ways of programming
22:36 with a browser that was seen as stuck with an ancient version of JavaScript that no one actually wanted to work
22:42 with. And that made sense to me, but it was also deeply unpleasant. And I remember thinking during that time, the
22:49 dark ages as I refer to them with JavaScript, that this cannot be the final destination.
22:56 There's no way that we have managed to turn the internet into such an
23:01 unpleasant place to work where I would start working on a project in JavaScript
23:07 using Webpack and all of these dependencies and I would put it down for literally 5 minutes and the thing
23:13 wouldn't compile anymore. The amount of churn that the JavaScript community, especially with its frameworks and its
23:19 tooling, went through in the decade from 2010 to 2020 was absurd.
23:25 And you had to be trapped inside of that asylum to not
23:31 realize what an utterly perverse situation we had landed
23:38 ourselves in. Why does everything break all the time? I mean, the joke wouldn't be just that the software would break.
23:44 That would annoy me personally. But then I'd go on hacker news and I'd see some thread on the latest JavaScript release
23:50 of some framework and the thread would be like um someone would ask well aren't
23:56 we using the thing we just used three months ago and people would be like that thing is so outdated that's so three
24:01 months ago you got to get with the new program we're completely rewriting everything for the teen time and
24:08 anything you've learned in the framework you've been spending the last amount of time on it's all useless. You got to
24:15 throw everything out and you got to start over. Why aren't you doing it, stupid idiot? Is that a kind of mass hysteria that
24:20 took over the developer community? You think? Like where you have to keep creating new frameworks and new frameworks and we are we past that dark
24:29 age? I think we're getting out of it. And we're getting out of it because browsers
24:34 have gotten so much better. There was a stagnation in browser technology. Some of it was an overhang all the way back
24:41 from IE5. So I5 essentially put the whole internet
24:46 development experience into a deep freeze because Microsoft won the browser wars in the mid 2000s and then they
24:54 basically disbanded their browser development team because they're like all right job done we don't need any more innovation on the internet. Can we
25:00 just go back to writing Windows forms or something now that we control everything? And it really wasn't until obviously
25:08 Firefox kind of kindled a little bit of something, then Chrome got into the scene and Google got serious about
25:15 moving the web forward that you had an kindling of maybe the browser could be
25:20 better, maybe the browser wasn't frozen in time in 2005, maybe the browser could actually evolve like at the development
25:28 platform that it is. But then what happened was you had a lot of smart people who poured in to the web because
25:36 the web turned out to be the greatest application development platform of all time. This was where all the money was
25:42 being made. This were this was where all the billionaires were being minted. This was where the Facebooks and whatever of
25:48 the world came to be. So you had all of this brain power applied to the problem
25:54 of how to work with the web. And there were some very smart people with some
26:00 I'm sure very good ideas who did not have uh programmer happiness as their
26:07 motivation. Number one, they had other priorities and those priorities allowed
26:15 them to discount and even rationalize the complexity they were injecting
26:20 everywhere. Some of that complexity came from organizational structure. When you have a company like Facebook for example
26:26 that does depend on the web and want to push it forward but have sliced the development role job into these tiny
26:34 little niches. I'm a front-end glob pipeline configurator. Oh yeah well
26:42 I'm a front-end whatever engineer. And suddenly the web developer was no longer
26:48 one person. It was 15 different roles. That in itself injected a ton of complexity. But I also want to give it
26:55 the bold case here, which was that some of that complexity was necessary to get
27:00 to where we are today. That the complexity was a bridge. It wasn't the destination, but we had to cross that
27:07 bridge to get to where we are today. Where browsers are frankly incredible. The JavaScript you can write in a text
27:13 file and then serve on a web server for a browser to ingest is amazing. It's actually a really good experience. You
27:20 don't need any pre-processing. You can just write text files, send them to a browser, and you have an incredible
27:25 development. And we should also say that it can kind of be broken. At least the HTML, but even the JavaScript could be a little
27:31 bit broken, and it kind of still works. Like maybe it halfass works, but like
27:36 the just the amount of mess of smelly code that a browser has to deal with is
27:43 insane. This is one of the hardest problems in computing today is to parse
27:49 the entire internet because thankfully for us as web developers but perhaps not
27:55 so much for the browser developers every web page that has ever been created minus the brief period with flash still
28:02 runs today. The web page I did in ninth grade would render on a modern browser today 30
28:09 years later. That is completely crazy when you think about the amount of
28:15 evolution we've had with the web, how much better we've made it, how many more standards browsers have adopted. It's
28:22 essentially an Apollo project today to create a new browser, which is why it doesn't happen very often, which is why
28:27 even companies like Microsoft had to throw in the towel and say we can't do it. Now, I actually don't think that's
28:33 good for the web. There is the danger of the monoculture if we just get a single browser engine that runs everything. And
28:38 we are in danger of that. I love the fact that the Ladybird project, for example, is trying to make a new browser
28:45 engine from scratch. I've supported that project. I would encourage people to look into that. It's really a wonderful
28:52 nice thing. It's staffed by a bunch of people who worked on other browser projects in
28:57 the past. Truly independent web browser. We really need that. But I can hold that
29:03 thought in my head. At the same time, I hold the thought in my head that Google's Chrome was pivotal to the web
29:12 surviving as the premier web development platform. If it had not been for Google
29:17 and their entire business depending on a thriving open web,
29:23 Apple, Microsoft, I think would have been just as fine to see the web go away
29:28 to disappear into being something that just served native web applica or native
29:34 mobile applications and native desktop applications that they could completely control. So I have all sorts of problems
29:41 with Google, but it's not Chrome. Chrome is a complete gift to web developers
29:47 everywhere to the web as a development platform and they deserve an enormous
29:53 amount of credit I think for that even if it's entangled with their business model and half of Chrome is code that
30:01 spies on you or informs targeted ads and a bunch of things I'm not a big fan of.
30:06 I can divorce that from the fact we need champions in the corner of the web who have trillions of dollars of market cap
30:14 value riding on the open web. We're going to take tangents upon a tangent upon a tangent. So, let's go to
30:20 Chrome. I think Chrome positive impact on humanities is immeasurable for
30:26 reasons that you just described. On the technology front, the features they present, the competition they created,
30:32 it's spurred on this wonderful flourishing of web technologies. But anyway, I have to ask you about the the
30:39 recent stuff with the DOJ trying to split up Chrome and Google. Do you think this is a good idea? Do you think this
30:46 does harm? Is a disaster? And I say that as someone who's been
30:52 very sympathetic to the antitrust fight because I do think we have antitrust problems in technology. But the one
30:59 place where we don't have them by and large is with browsers, is with the
31:06 tools we use to access the open web. First of all, we have Firefox. Now,
31:11 Firefox is not doing all that great and Firefox has been propped up by Google for many years to deter from exactly
31:19 what's going on with the DOJ that they were the only game in town. Apple has Safari. I have a bunch of problems with
31:25 Apple, too, but I love Safari. I love the fact that we have a premier browser running on a premier operating system
31:33 that people can't turn the web into just a Chrome experience, but I also think
31:39 that the open web needs this trillion dollar champion or at least benefits
31:44 from it. Maybe doesn't need it, but it certainly benefits from it. And of all the things that are wrong with monopoly
31:50 formation in technology, Chrome is the last thing. And this is why I get so frustrated sometimes about the anti- or
31:58 the monopoly fight that there are real problems and we should be focusing on the premier problems first like the toll
32:05 booths on our mobile phones. There are far bigger problem. It's not the open
32:10 web. It's not the tools that we use to access the open web. If I don't want to use Chrome, if my customers of my
32:18 businesses that run on the internet don't want to use Chrome, they don't have to. We're never forced to go through it. the open internet is still
32:25 open. So, I think it's a real shame that the DOJ has chosen to pursue Google in
32:31 this way. I do think there are other things you can nail Google for and their ad monopoly maybe or the uh shenanigans
32:39 they've done in controlling both sides of the ad ledger that they both control the supply and the demand. There are
32:45 problems. Chrome isn't it. And you end up making the web much worse. And this
32:51 is the thing we always got to remember when we think about legislation, when we think about um monopoly fights is you
32:58 may not like how things look today and you may want to do something about it, but you may also make it worse. The good
33:06 intentions behind the GDPR in Europe currently has amounted to what? cookie
33:12 banners that everyone on the internet hates that helps no one do anything
33:17 better, anything more efficient, that saves no privacy in any way, shape or form, has been a complete boondoggle
33:24 that has only enriched lawyers and accountants and
33:29 bureaucrats. Yeah. You said that the cookie banner is a monument for why Europe is losing is
33:35 is doing the worst uh of all the regions in tech. It's it's a monument to good
33:43 intentions leading straight to hell. And the Europe is actually world class
33:51 in good intentions leading straight to hell. So hell is the cookie accept button.
33:56 They have to accept all cookies. That's what hell looks like over and over. You don't actually ever get to the web page.
34:03 Just on a human scale. Try to imagine how many hours every day are wasted
34:09 clicking that away and how much harm we've done to the web as a platform that
34:15 people enjoy because of them. The internet is ugly in part because of
34:20 cookie banners. Cookie banners were supposed to save us from advertisement
34:25 and advertisement can make the web ugly. There's plenty of examples of that. But cookie banners made the entire internet
34:31 ugly in one fell swoop. And that's a complete tragedy. But what's even worse,
34:36 and this is why I call it out as a monument to everything the EU gets wrong, is that we have known this for a
34:42 decade. No one anywhere who's serious believes that cookie banners does anything good for anyone. Yet, we've
34:48 been unable to get rid of it. There's this one piece of legislation that's now, I think, 10 or 12 years old. It's
34:55 complete failure on every conceivable metric. Everyone hates it universally, yet we can't seem to do anything about
35:01 it. That's a bankruptcy declaration for any body of bureaucrats who pretend or
35:09 pretend to make things better for not just citizens but people around the world. This is the thing that really
35:16 gets me about cookie banners, too. It's not just the EU. It's the entire world. You can't hide from cookie banners
35:22 anywhere on this planet. If you go to goddamn Mars on one of Elon's rockets and you try to access a web page, you'll
35:30 still see a cookie banner. No one in the universe is safe from this nonsense. Probably the interface on on the rocket
35:37 slower. You have basically 150 second ping time. So it'll take you
35:43 45 seconds just to get through the cookie banners from Mars. Um all right, let's walk back up the
35:49 stack of this recursive tangents we've been taking. So Chrome, we should say at
35:54 least in my opinion, is not winning unfairly. It's winning in the fair way
36:01 by just being better. It is. If I was going to steal man the other side just for a half second,
36:08 people would say, well, maybe yes, most people do sort of begrudgingly agree
36:14 that Chrome is a pretty good browser. But then they'll say the reason it got dominance was distribution. And the
36:20 reason they got distribution was because Google also controls Android and therefore can make Chrome the default
36:26 browser on all these phones. Now, I don't buy that. And the reason I don't buy that is because on Android, you're
36:34 actually allowed to ship a different browser that has a browser engine that's not the same as Chrome. Unlike on iOS
36:41 where if you want to ship a browser, Chrome, for example, ships for iOS, but it's not Chrome. It's Safari wrapped in
36:47 a dress. And every single alternative browser on iOS have to use the Safari
36:53 web engine. That's not competition. That's not what happened on Android. Again, I think there are some nuances to
36:60 it. But if you zoom out and you look at all the problems we have with big tech, Chrome is not it. Chrome won on merits.
37:08 I begrudgingly have switched to Chrome on that realization alone. As a web
37:13 developer, I just prefer it. I like Firefox in many ways. I like the ethos of it, but Chrome is a better browser
37:20 than Firefox. Full stop. And by the way, we've never mentioned Edge. Edge is also a good browser
37:26 because it's also Chrome in address, but it never gets the love. I I don't think I've ever used Bing and I'm sure
37:33 Bing is really nice. Maybe you have because you know what is Bing in address? What? Duck.Go, which is actually the search
37:40 engine that I use. Duck.Go gets its search results from Bing. Or at least it used to. If they changed that, that
37:46 would be news to me. Well, maybe everything is just a wrap or
37:52 a dress. Everything is wearing a dress. Underneath there's some other turtles. It turtles all the dresses all the way
37:57 down. Okay. What were we talking about? We got there from JavaScript and from you learning how to program. So
38:04 eventually the big success story is when you built a bunch of stuff with PHP
38:12 and you were like actually shipping things. Yes. And that's when the the Ruby story came.
38:18 So when your big love affair with programming began there. So can you take
38:24 me there? What what is Ruby? Tell the story of Ruby. Explain Ruby to me. PHP
38:30 was what converted me from just being able to fondle HTML and turn out some
38:35 web pages to actually being able to produce web applications myself.
38:40 So I owe a tremendous gratitude to PHP in that regard. But I never thought of PHP as a calling. I never thought I'm a
38:49 professional programmer who writes PHP. That's who I am and that's what I do. I thought of PHP as a tool I needed to
38:57 smack the computer with until it produced web applications I wanted. It was very much a means to an end. I
39:04 didn't fall in love with PHP. I'm very grateful that it taught me the
39:10 basics of programming and I'm very grateful that it set the bar for the economics. But it really wasn't until
39:16 Ruby that I started thinking of myself as a programmer. And the way that came about was that the first time I ever got
39:24 hired as a professional programmer to write code was actually by Jason Freed,
39:30 my business partner. Still, all the way back in 2001, I had been working on these gaming
39:36 websites in PHP for essentially 18 months at that point. No one had been paying me to do code in that regard. And
39:43 I connect with Jason Freed over an email sent from Copenhagen, Denmark to
39:50 Chicago, Illinois to a person who didn't know who I was. I was just offering solicited advice. Jason had asked a
39:57 question on the internet and I had sent him the answer and he was asking in PHP and I'd sent him the answer to that
40:02 question and we started talking and then we started working which by the way is a miracle of what the internet can allow.
40:07 How can a kid in Copenhagen who's never met this guy in Chicago connect just
40:13 over email and start working together and by the way we're still working together now 24 years later that's
40:21 incredible but we started working together and we started working together on some client projects Jason would do
40:26 the design 37 signals would do the design I would bring the programming PHP and after we worked on I think two or
40:33 three client projects together in PHP we kept hitting the same problem that whenever
40:40 you work with a client, you start that project off an email. Oh yeah, let's work together. Here's what we're
40:46 building and you start trading more and more emails and before a few weeks have
40:51 passed, you got to add someone to the project. They don't have the emails. They don't have the context. You send
40:57 where's the latest file? Oh, I've uploaded on the FTP. It's like final final V6 2.0, right? That's the one to
41:04 get. It's just a mess. A beautiful mess. in some ways a mess that still runs the vast majority of projects to this day.
41:10 Email is the lowest common denominator. That's wonderful. But we had dropped the
41:15 ball a couple times in serious ways with customers and we thought we can do better. We know how to make web
41:22 applications. Can't we just make a system that's better than email for managing projects? It can't be that
41:28 hard. We've been doing blogs. We've been doing to-do list. Let's put some of these things together and just make a
41:34 system where everything that anyone involved in the project needs is on one page. And it has to be simple enough
41:41 that I'm not going to run a seminar teaching you how to use the system. I'm just going to give you the login code.
41:46 You're going to jump into it. So that's base camp. And when we started working
41:51 on base camp, I for the first time in the experience I
41:57 had with Jason had the freedom of technology choice. There was no client telling me, "Yeah, PHP, that sounds
42:04 good. We know PHP. Can you build it in PHP?" I had free reigns. And at that time, I'd been reading uh IE
42:12 magazine and a couple of other magazines back from the early 2000s where Dave Thomas
42:19 and Martin Fowler had been writing about programming patterns and how to write
42:27 better code. And these two guys in particular were both using Ruby to
42:33 explain their concepts because Ruby looked like pseudo code. Whether you were programming in C or
42:39 Java or PHP, all three constituencies could understand Ruby because it basically just reads lang English. So
42:45 these guys were using Ruby to describe the concepts. And first of all, I would read these articles for just the
42:51 concepts they were explaining. And I'd be like, what is this programming language? I mean, I I like the concept
42:57 you're explaining, but I also want to see the programming language. Why haven't I heard of this? So, I
43:03 started looking into Ruby. And I realized at that time, Ruby might not be
43:08 known by anyone, but it's actually been around for a long time. Matts, the Japanese creator of Ruby, had started
43:15 working on Ruby back in 93 before the internet was even a thing. And here I am
43:21 in 2003, 10 years later, picking up what seems
43:26 like this hidden gem that's just laying in obscurity in plain sight. But Dave
43:33 Thomas and Martin Fowler, I think, successfully put me and a handful of
43:39 other people on the trail of a programming language that hadn't been
43:44 used much in the West, but could be. So I picked up Ruby and I thought this is
43:51 this is very different. First of all, where are all the semicolons? I'd been programming in PHP in ASP. I'd
43:59 even done some Pascal. I'd looked at some C. There are semicolons everywhere.
44:05 And that was the first thing that struck me is where are the damn semicolons? And I started thinking actually why do we
44:11 have semicolons in programming? there to tell the interpreter that there's a new
44:17 line of instructions, but I don't need him as a human. How? Oh, someone is
44:23 looking out for the human here, not for the machine. So, that really got me interested. And then I thought to
44:30 myself, do you know what? I know PHP quite well. I'm not an amazing programmer. I haven't been working in
44:37 programming for all that long, but maybe I can figure it out. I'm going to give myself two weeks. I'm going to
44:43 write a proof of concept where I talk to a database. I pull some records. I
44:49 format them a bit and I display them on an HTML page. Can I figure that out in a couple weeks? It took about one weekend
44:56 and I was completely mesmerized. I was completely mind blown because Ruby
45:06 was made for my brain like a perfect tailored glove. by someone I'd never
45:12 met. Like, how is this even possible? We should say maybe like paint a picture
45:17 of the certain qualities that Ruby has. Maybe even compared to PHP. We should also say that there's a ridiculous thing
45:24 that I'm used to that I forget about that there's dollar signs everywhere. PHP
45:30 there's line noise. That's what I like to call line noise. Line noise. That's such a beautiful phrase. Yeah. So, there's all
45:36 these things that look like programs. And with Ruby, I mean, there's some similarities in Python there. Uh, it
45:44 just looks kind of like natural language. You can read it normally. Here's a while loop that does a five
45:50 iterations. You can literally type the number five dot. Now, I'm calling a
45:56 method on the number five. By the way, that's one of the beautiful aspects of Ruby that primitives like integers are
46:03 also objects. And you can call five dot times
46:09 start brackets. Now you're iterating over the code in that bracket five times. That's it.
46:15 Okay, that's nice. That's not just nice, that's exceptional. There is literally no other programming language that I know of that
46:22 has managed to boil away the line noise that almost every other programming
46:27 language would inject into a five time iteration over a block of code to that
46:32 extent. That's a really nice Well, thank you for giving that example. That's a beautiful example. Wow, I don't think I know a
46:39 programming language that does that. That's really nice. Ruby is full of that. And there's So, let me dive into a couple examples
46:45 because I really think it helps paint the picture. And let me preface this by saying I actually I like the ethos of
46:51 Python. I think the Ruby and the Python community share a lot of similarities.
46:57 They're both dynamic interpreted languages. They're both focused on
47:02 immediiacy and productivity and ease of use in a bunch of ways, but then they're also very different in many other ways.
47:08 And one of the one ways they're very different is aesthetically. Python to me, I hope I don't offend
47:15 people too much. I've said this before, it's just it's ugly. And it's ugly at it in its base because it's full of
47:22 superfluous instructions that are necessary for legacy reasons
47:28 of when Guido made Python back in ' 87 that are still here in 2025 and my brain
47:36 can't cope with that. Let me give you a basic example. When you make a class in Python, the initializer method, the
47:43 starting method is defaf. Okay, fair enough. That's actually the same as Ruby def definition of a method. Then it is
47:50 underscore not one underscore two in it underscore
47:58 underscore. Yeah. Parentheses start self,
48:03 and then the first argument. Yeah, the whole self thing. Yeah. Mhm. I look at that and go, I'm sorry. I'm
48:08 out. I can't do it. It's just it's everything about it offends my sensibilities to the core.
48:15 Here you have the most important method that all new objects or classes have to
48:21 implement and it is one of the most aesthetically offensive ways of typing initialize that I've ever seen anywhere.
48:28 And you guys are okay with this? Yeah, you're making me you you know where you're like talking about my marriage or something like this and and
48:34 I'm now realizing I've been in a toxic relationship all along. Yeah. I just get used to it. That to me, by the way, was
48:41 the magic of Ruby. It opened my eyes to how beautiful programs could be. I
48:47 didn't know I'd been working in ASP. I'd been working in PHP. I didn't even have the concept that aesthetics, beautiful
48:54 code, was something we could optimize for, that something we could pursue. And even more than that, that we could
49:00 pursue it above other objectives. That Ruby is, as beautiful as it is, is not
49:07 an accident and it's not easy. Ruby itself is implemented in C. It's very
49:12 difficult to parse Ruby code because Ruby is written for humans and humans
49:17 are messy creatures. They like things in just the right way. I can't fully
49:23 explain why the underscore_initers make me repulse, but it does. And when I
49:31 look at the Ruby alternative, it's really instructive. So it's defaf. same part df space
49:39 initialize parenthesis not even parenthesis if you don't need to call it within the arguments there's not even a parenthesis
49:44 that in itself is actually also a major part if the human doesn't need the additional characters we're not just
49:50 going to put them in because it'd be nicer to parse for the computer we're going to get rid of the semicolons we're
49:56 going to get rid of the parenthesis we're going to get rid of the underscores we're going to get rid of
50:01 all that ugliness all the line noise and boil it down to its pure essentials
50:07 and at the same time we're not going to abbreviate. This is a key difference in the aesthetics between Ruby and Python
50:14 as well. In it is shorter type. It's only five characters. Initialize is a
50:19 lot longer, but it looks a lot better. And you don't type it very often. So, you should look at something pretty. If
50:25 you don't have to do it all the time, it's okay that it's long. Those kinds of aesthetic evaluations are rife all over
50:34 the Ruby language. But let me give you an even better example. The if conditional, that's the bedrock of all
50:41 programming languages. They have the if conditional. If you take most programming languages, they all have if.
50:47 That's basically the same in almost every language. Space start parenthesis. We all do that. And then you have um
50:55 perhaps let's say you're calling a object called uh user
51:01 dot is admin close parenthesis close parenthesis start brackets
51:09 and here's what we're going to do if the user is an admin. Right? That would be a normal programming language. Ruby
51:14 doesn't do it like that. Ruby boils almost all of it away. We start with the if. Okay, that's the same. No
51:19 parenthesis necessary because there's no ambiguity for the human to distinguish
51:25 that the next part is just a single statement. So you do if space user dot
51:33 admin question mark. Yeah.
51:38 No open brackets, no parentheses, no nothing. Next open line here's
51:45 unconditional. That question mark means nothing to the computer,
51:51 but it means something to the human. Ruby put in the predicate method style
51:58 purely as a communication tool between humans. It's actually more work for the
52:05 interpreter to be able to see that this question mark is there. Why is this question mark in here? Because it just
52:11 reads so nicely. if user admin question mark. That's a very human phrase. But it
52:19 gets better. You can turn this around. You can have your statement you want to
52:26 execute before the conditional. You can do userupgrade.
52:31 Say you're calling an upgrade method on a user space if space user.admin question mark.
52:38 We do the thing if the thing is true. Instead of saying if the thing is true, do the thing. But it gets even better.
52:45 This is why I love this example with the conditional because you can keep diving into it. So let's flip it around.
52:52 User.downgrade if exclamation point not
52:58 user.admin. Right? That'd be a typical way of writing it. Ruby goes, that
53:04 exclamation point is light noise. Why do we have if and then an exclamation point? That's ugly. We could do
53:10 user.downgrade unless useradmin
53:16 question mark. That to me is an encapsulation of the incredible
53:22 beauty that Ruby affords the programmer through ambiguity
53:27 that is only to serve the human reader and writer. All of these statements
53:32 we've just discussed, they're the same for the computer. It'll compile down to the same C code. They'll compile down to
53:38 the same assembly code, it makes no difference whatsoever. In fact, it just makes it harder to write an interpreter.
53:44 But for the human who gets to choose whether the statement comes before the conditional or the predicate method has,
53:52 it's just incredible. It reads like poetry at some point. It's it's also incredible that you know, one language
53:58 designer is creating that. you know, Guido and Ross also, it's like one
54:03 person gets to make these extremely difficult decision because it's you have to think about how does that all get
54:09 parsed and you have to think about the thousands if it's a popular language,
54:14 the millions of people that end up using this and what they feel with that
54:20 question mark on the for the if statement, what what does that feel like for that's what Matt's thought about because
54:26 he started his entire mission off a different premise than almost every programming language designer that I'd
54:33 heard at least articulate their vision. That his number one goal was programmer happiness. That his number one goal was
54:40 the affordances that would allow programmers to articulate code in ways
54:46 that not just executed correctly, but were a joy to write and were a joy
54:53 to read. And that vision is based on a fundamentally different view of
54:60 humanity. There's no greater contrast between Matts and James Gosling, the
55:06 designer of Java. I once listened to James talk about the design of Java. Why
55:12 was it the way it was? Why was it so rigid? And he was very blunt about it, which I, by the way, I really
55:17 appreciate. And I think Gotham has done a tremendous job with Java. But his view of humanity is rather dark. His view of
55:25 humanity was programmers at the average are stupid creatures.
55:31 They cannot be trusted with sophisticated programming languages
55:36 because they're going to shoot their foot off or their hand off. And that would be kind of inconvenient to the
55:44 regional development office of a mid-tier insurance company writing code
55:50 that has to last for 20 years. Now, it's actually a very Thomas Saul
55:56 view of constrained capacity in humans that I've come to appreciate much later in life. But it's also a very depressing
56:03 view of programmers that there are just certain programmers who are too dumb to appreciate
56:10 code poetry. They're too ignorant to learn how to write it. Well, we need to give them a sandbox where they just
56:18 won't hurt themselves too much. Matt's went the complete opposite
56:23 direction. He believes in humanity. He believes in the unlimited capacity of
56:29 programmers to learn and become better. So much so
56:34 that he's willing to put the stranger at his own level. This is the second part I
56:41 truly appreciate about Ruby. Ruby allows you to extend base classes. You know how
56:47 we just talked about five dot times is a way to iterate over um a statement five
56:53 times. That five is obviously a base class. It's a number. Do you know what
56:58 you can add your own methods to that? I did extensively in Rails. We have
57:05 something called active support which is essentially my dialect of Ruby for programming web applications.
57:12 And I'll give you one example. I've added a method called days to the
57:17 number. So if you do 5 days, you get five days in seconds because seconds is
57:24 the way we set cash expiration times and other things like that. So you can say
57:29 cash expires in 5 days. Yeah. And you're going to get whatever 5*
57:37 24 * 60 * 60 is or whatever the math is, right? very humanly readable. In a novel
57:44 programming language, you would type out the seconds and then you would have a little comment above it saying this
57:50 represent five days. In Ruby, you get to write five days. But even better than that, Matts didn't come up with it.
57:57 Matts didn't need the five days. I needed that because I needed to expire caches. I was allowed by Matts to extend
58:05 his story with my own chapters on equal footing such that a reader of
58:11 Ruby could not tell the difference between the code Mattz wrote and the code that I wrote. He trusted me as a
58:18 complete stranger from Denmark who had never met to mess with his beautiful
58:24 story. That level of trust is essentially unheard of. I know there are other programming languages that allow
58:30 things with macros and so forth, but none do it in a way like Ruby does it. None does it with an articulated vision
58:38 of humanity, a trust in humanity like Matts does.
58:43 That is the opposite end of the spectrum of Java. Yeah. I mean, for my aesthetic
58:48 sensibilities, just the way you describe five days, that's really pleasant to me.
58:54 like I could see myself sitting alone sleepdeprived and just writing that it's
59:01 just is an easy thing you can write it in a long way with a comment you can you can write a multiple lines you could do
59:07 and now with AI I'm sure it's going to generate it correctly but there's something really pleasant about the simplicity of that I'm not sure what
59:12 that is but you're right there is a good feeling there and I'm sure we'll talk about happiness
59:19 from all kinds of philosophical angles but you know that is what happiness is
59:25 made of. That little exactly good feeling there. It's the good feeling that come out of a
59:31 concept compressed to its pure essence. There's nothing you can take away from
59:38 that statement that's superfluous. But see, I I also want to push back a little bit because it's not because I
59:44 also program in Pearl a bunch just just to be cool. Um so like it's not all
59:50 about compression. No, you can compress it too far. Pearl Gulf is a thing where
59:56 you can turn programs into something that's unreadable for humans. Now, the great thing about Pearl was that it came
60:02 out before Ruby. Mattz was a great student of Wall, was a great student of
60:09 Pearl, was a great student of Python and Small Talk and Lisp. He took inspiration
60:14 from all of these prior attempts at creating good programming languages and really edited down the very best bits
60:22 into this. So he was able to learn from his lessons. But what I found incredible about Ruby is that here we are 2025.
60:30 Ruby has been worked on for over 30 years and essentially the first draft is
60:37 90% of what we're still using. There was almost a sense of divine inspiration possible in wherever Matts was writing
60:44 that initial version of Ruby that transcended time to such a degree that
60:49 no one has still even begun to reach it. This is the other thing I always find fascinating. I generally believe in the
60:56 efficient market theory that if someone comes up with a better mousetrap or better idea, others will eventually copy
61:02 them to such an extent that perhaps the original mousetrap is no longer even remembered. No one has been able to copy
61:09 that essence of Ruby. They borrowed elements and that's totally fine, but Ruby still stands taller than everyone
61:16 else on these metrics on this trust in humanity and programmers. And we should also say like you know uh
61:24 maybe the perfect programming language that that metric and then there's the successful language and those are often
61:30 different. There there's something wonderful about the Brendan Ike story of creating JavaScript. Yes. of of there's something truly
61:38 beautiful uh about the way JavaScript took over the world. I've uh recently
61:44 got to visit the Amazon jungle and just one of my favorite things to do is just to watch the ants take over anything
61:50 everything and it's just like it's a nice distributed system. It's a messy thing that doesn't seem to be order but
61:56 it just works and the machinery of it worse is better. I mean that's actually the name of a pattern for in in software
62:03 development and other ways of how do is the pattern of Linux. Linux was quantifiably worse than I think it was
62:11 minix at the time. Other ways of it that were more cathedral
62:16 less bizarre and is still one that there's something to it that the
62:21 imperfections can help something go forward. It's actually a trick I've studied to the degree that I now
62:28 incorporate it in almost all open source that I do. I make sure that when I release the first version of any new
62:33 thing I work on, it's a little broken. It's a little busted in ways that invite
62:38 people to come in and help me cuz there's no easier way to get the
62:44 collaboration of other programmers than to put something out that they know how to fix and improve.
62:49 Yeah, that's awesome. But Ruby is somehow or was at least a little bit different in that regard. Not in all
62:55 regards. Matt's got the ethos of the language, the design of the language just right. But the first versions of
63:02 Ruby were terribly slow. It's taken, I mean, hundreds of man years to get Ruby
63:09 to be both this beautiful yet also highly efficient and really fast. And we
63:16 should say that the thing that made you fall in love with this particular programming language is meta programming.
63:21 Yes. So that takes all of these elements we've just talked about and turned them up to 11. I'll explain metaroming real
63:28 soon. Metar programming is essentially a version of the five days. You get to add
63:36 keywords to the language. Active record is the part of Rails that
63:41 communicates with the database. This is a system where every table in the
63:48 database is represented by a class. So if we take the user example again you do
63:53 class user um descends from active record base and
63:58 then the first line you can write is this I want my users to have many posts
64:03 or have many comments. Let's do that. We're making some system where users can make comments. The very next line is has
64:10 underscore many space colon comments. Now you've set up a
64:17 dependency between users and comments that will give you a whole host of
64:22 access and factory methods for users to be able to own comments, to create comments, to update comments. In that
64:29 line alone has many looks like a keyword. It looks like it's part of the
64:34 Ruby language. That's metaroming. when Rails is able to add these elements to
64:40 how you define a class and then that runs code that adds a bunch of methods to the user class. That's metaroming.
64:49 And when metaroming is used in this way, we call it domain specific languages. You take a generic language like Ruby
64:56 and you tailor it to a certain domain like describing relationships in a database at a object
65:04 level. And this is one of those early examples where you can do um user has
65:10 many comments belongs_2 space colon account. Now you've set up a
65:18 uh onetoone relationship. Before we had a one to many relationship. Rails is rife with all these kinds of domain
65:25 specific languages where at sometimes it doesn't even look like Ruby. You can't
65:30 identify Ruby keywords. You can just identify what looks like keywords in its
65:36 own programming language. Now again, I know that lisp and others also do this
65:41 stuff. They just do it with the maximum amount of line noise that can ever be crammed in to a programming language.
65:49 And Ruby does it at a level where you cannot tell my metarogramming from Matt's keywords and with zero line
65:56 noise. Yeah, I should say that my first love was lisp. So there's a slow tear that
66:01 you can't see. I've actually never written any real lisp myself. Well, how can you judge it so harshly
66:06 then? Because I have two eyes and I can look at code and my aesthetic sensibilities
66:12 forbid me to even go much further, which is a limitation. I know I should actually dive into Lisp because I found
66:18 that I've learned a lot just diving into maybe I'm insulting Lisp again here but
66:23 the past of programming languages with small talk for example I think small talk is a incredible
66:31 experiment that also worked but isn't suitable for today's programming environments.
66:37 I love that we're talking about Ruby so much and what beautiful code is what a beautiful programming language is. So
66:42 one of the things that is I think implied maybe you made explicit in your descriptions there is
66:49 that uh Ruby is dynamic typing versus strict typing and you have been not just
66:55 saying that it's a nice thing but that you will defend dynamic typing to the death like that freedom is a powerful
67:03 freedom to preserve it's the essence of what makes Ruby Ruby this is why I don't
67:08 fully understand when people call for Ruby to static typing because to me is
67:14 the bedrock of what this is. Why would you want to turn one of the most beautiful languages into something far
67:21 uglier? This is one of my primary objections to static typing. It's not just that it limits you in certain ways.
67:29 It makes metaroming harder. I write a bunch of meta programming. I've seen what it takes to do meta programming in
67:34 Typescript. That was actually one of the things that just really sent me on a tear of getting meta or getting
67:40 Typescript out of some of the projects that I'm involved with. We pulled TypeScript out of um Turbo, one of the
67:47 front-end frameworks that we have because I tried to write some meta programming in Typescript and I was just
67:52 infuriated. I don't want that experience, but I also don't want it from an aesthetic point of view. I hate
67:59 repetition. We've just talked about how much I love that Ruby boils all of these
68:04 expressions down to its essence. You can't remove one dot. You can't remove
68:09 one character without losing something. This moment you go for static typing that you declare at least I know there
68:15 are ways to do implied typing and so forth. But let's just take the stereotypical case of the of a example.
68:21 For example, um, capital U user. I'm declaring the type of the variable
68:28 lowerase user. I'm now naming my variable equals uppercase user or new
68:34 uppercase user. I've repeated user three times. I don't have time for this. I
68:41 don't have sensibilities for this. I don't want my Ruby polluted with this. Now, I understand all the arguments for
68:48 why people like static typing. One of the primary arguments is that it makes tooling easier. It makes it easier to do
68:55 autocomplete in editors, for example. It makes it easier to find certain kinds of
68:60 bugs because maybe you're calling methods that don't exist on an object
69:05 and the editor can actually catch that bug before you even run it. I don't
69:10 care. First of all, I don't write code with tools. I write them with text
69:16 editors. I chisel them out of the screen with my bare hands. I don't
69:22 autocomplete. And this is why I love Ruby so much. And this is why I continue to be in love with the text editor
69:29 rather than the IDE. I don't want an IDE. I want my fingers
69:35 to have to individually type out every element of it because it will force me
69:41 to stay in the world where Ruby is beautiful. Because as soon as it gets easy to type a lot of boilerplate, well,
69:48 guess what? You're gonna have a lot of boilerplate. Every single language basically that has great tooling support
69:54 has a much higher tolerance for boiler plate because the thinking is, well, you're not typing it anyway. You're just
69:60 autocompleting it. I don't want that at all. I want something where
70:05 the fabric I'm working in is just a text file. There's nothing else to it. So,
70:11 these things play together. There's the aesthetic part, there's the tooling part, there's the meta programming part,
70:17 there's the fact that Ruby's ethos of duck typing, I don't know if
70:22 you've heard that term before, it's essentially not about can I call this method if a object is of a certain
70:30 class. It is can I call this method if the method responds. It's very out of
70:35 small talk in that regard. you don't actually check of whether that class has
70:41 the method which allows you to dynamically add methods at runtime and do all sorts of really interesting
70:47 things that underpin all the beautiful meta programming that we do in Ruby. I don't want to lose any of that and I
70:54 don't care for the benefits. One of the benefits I've se touted over and over again is that it's much easier to write
70:60 correct software. You're going to have fewer bugs. You're going to have less null pointer exceptions. and less all of
71:07 this stuff. Yeah, I don't have any of that. It is just not something that occurs in my standard mode of operation.
71:13 I'm not saying I don't have bugs. Of course I do. But I catch those bugs with unit testing, with integration testing.
71:20 Those are the kinds of precautions that'll catch logical bugs,
71:26 things that compile but are wrong along with the uncompilable stuff. So, I've
71:32 never been drawn into this world. And part of it is because I work on a certain class of systems. I fully accept
71:37 that. If you're writing systems that have 5, 10, 50 million lines of code
71:43 with hundreds, thousands, or tens of thousands of programmers, I fully accept
71:48 that you need different methods. What I object to is the idea that what's right for a code base of 10 million lines of
71:55 code with a 100,000 programmers working on it is also the same thing I should be using in my bedroom to create base camp
72:02 because I'm just a single individual. That's complete nonsense. In the real world, we would know that that makes no
72:08 sense at all. That you don't, I don't know, use your Pagani to go pick up groceries at Costco. It's a bad vehicle
72:16 for that. It just doesn't have the space. You don't want to muddy the beautiful seats. You don't want to do any of those things. We know that
72:23 certain things that are very good in certain domains don't apply to all in programming languages. It seems like we
72:28 forget that. Now, to be fair, I also had a little bit perhaps of a reputation of forgetting that. When I first learned
72:34 Ruby, I was so head over heels in love with this programming language that I almost found it unconceivable that
72:40 anyone would choose any other programming language at all to write web applications. And I kind of engaged the
72:47 evangelism of Ruby on Rails in that spirit as a crusade as I just need to
72:53 teach you the gospel. I just need to show you this conditional code that we just talked about and you will convert
72:59 at the point of a sharp argument. Now I learned that's not the way. And part of the reason it's not the way is that
73:05 programmers think differently. Our brains are configured differently. My
73:11 brain is configured perfectly for Ruby, perfectly for a dynamically
73:17 ducttyped language that I can chisel code out of a text editor with. And
73:23 other people need the security of an IDE. They want the security of classes
73:31 that won't compile unless you call the methods on it. I have come to accept that, but most programmers don't.
73:36 they're still stuck in essentially I like static typing therefore static
73:42 typing is the only way to create reliable correct systems which is just such a mindblowing
73:49 to be blunt idiotic thing to say in the face of evidence mountains of evidence
73:54 to the contrary this is one of the reasons I'm so in love with Shopify as
73:60 the flagship application for Ruby and Rails Shopify exists at a scale that
74:08 most programmers will never touch. On Black Friday, I think Shopify did 1
74:13 million requests per second. That's not 1 million requests of images. That's of
74:19 dynamic requests that are funneling through the pipeline of commerce. I mean, Shopify runs something like 30% of
74:26 all e-commerce stores on the damn internet. A huge portion of all commerce in total
74:33 runs through Shopify. and that runs on Ruby and Rails. So Ruby and Rails is
74:38 able to scale up to that level without using
74:44 static typing in all of what it does. Now I know they've done certain experiments in certain ways because they are hitting some of the limits that you
74:50 will hit with dynamic typing and some of those limits you hit with dynamic typing
74:55 are actually by the way just limits you hit when you write 5 million lines of code. I think the Shopify monolith is
75:00 about 5 million lines of code. At that scale, everything breaks because you're at the frontier of what humans are
75:07 capable of doing with programming languages. The difference in part is that Ruby is such a succinct language
75:14 that those 5 million if they had been written in let's just say Go or Java would have been 50 or 25. Now that might
75:22 have uh alleviated some of the problems that you have when you work on huge systems with many programmers, but it
75:28 certainly would also have compounded them. trying to understand 25 million lines of code.
75:33 So, the thing does scale. That's a persistent myth that it doesn't scale. Uh Shopify and and others, but Shopify,
75:40 I think, is a great example. Uh, by the way, I love Shopify and I love Toby.
75:45 You got to have Toby on. Yeah. This morning for sure. He's a brilliant I I got to hang out with him in the desert
75:51 somewhere. I forget in Utah. He's just a brilliant human. Um, and uh, and
75:56 Shopify, Shopify.com/lux has been supporting this podcast for the longest time. I don't I don't think actually
76:01 Toby knows that they sponsor this podcast. I mean, it's a big company, right? It's a huge company. I think uh, just
76:08 under 10,000 employees, market cap of 120 billion, uh, GMV of a quarter of a trillion every
76:16 quarter, and he's involved with the details still. He is very much so. A funny story about Toby. Toby was on the Rails core team
76:24 back in the mid 2000s. Toby himself wrote active merchant which is one of
76:30 the frameworks for creating shops. He wrote the liquid templating language that Shopify still uses to this day. He
76:38 has a huge list of contributions to the Rails ecosystem and he's the CEO of the
76:44 company. I think it's just it's very inspiring to me because it's such at the opposite end of what I like to do. I
76:50 like to chisel code with my own hands most of the day. He runs a company of almost 10,000
76:57 people that is literally like world commerce depends on it. A level of
77:02 criticality I can't even begin to understand. And yet we can see eye to eye on so many of these fundamental
77:09 questions in computer science and program development. That is a dynamic range.
77:16 Mhm. To be able to encompass Rails being a great tool for the one developer who's
77:22 just starting out with an idea, who don't even fully know everything, who is right at the level where PHP would have
77:28 been a good fit in those late 90s because yeah, I could probably upload something to an FTP server and so on. Rails does have more complexity than
77:35 that, but it also has so much longer runway. The runway goes all the way to goddamn Shopify. That is about the most
77:41 convincing argument I can make for sort of dynamic range that we can do a lot of it. And even having said that, Shopify
77:49 is the outlier. Of course, I don't think about Shopify as the primary target when
77:55 I write Rails. I think of the single developer. Actually, I do think about Shopify, but I don't think about Shopify
78:01 now. I think of Shopify when Toby was writing Snowevil, which was the first e-commerce store to sell snowboards that
78:08 he created. There was the prehopify Shopify he created all by himself. And that was possible because Ruby and Rails
78:16 isn't just about beautiful code. It's just as much about productivity. It's just as much about the impact that an
78:22 individual programmer is able to have that they can build system where they can keep the whole thing in their head and be able to move it forward such that
78:30 you can go from one developer sitting and working on something and that something is Shopify and it turns into
78:36 what it is today. When we talk about programming languages and we compare them, we often compare them at a very
78:42 late stage like what is the better programming language for let's say Twitter in 2009 when it's already a huge
78:49 success. Twitter was started on Ruby and Rails. They then hit some scaling problems. It was a big debacle at the
78:55 time. They end up then I think writing it in some other language which by the
79:01 way I think is the best advertisement ever for Ruby and Rails because nothing fucking happened for 10 years after they
79:07 switched over right essentially zero innovation. Some of that was because
79:12 they were doing a long conversion and all of the early success in part came
79:17 because they had the agility to quickly change and adopt and so forth. That's what startups needs. That's what Shopify
79:23 needed. That's what Twitter needed. That's what everyone needs and that's the number one priority for Ruby and
79:29 Rails to make sure that we don't lose that because what happens so often when development tools and programming
79:35 language are driven by huge companies is that they mirror their orc chart. React
79:41 and everything else needed to use that is in some ways a reflection of how Meta
79:47 builds Facebook because of course it is because of course it's a distraction of that. I'm not saying React isn't a great
79:52 tool and that can't be used by smaller teams. Of course, it can. But it's born in a very different context than
79:58 something like Ruby and Rails. Uh let me say as a small aside because I think we might return to Shopify and
80:04 celebrate it often. Just a sort of personal note, uh this particular
80:09 podcast has way more sponsors and sponsors that want to be sponsors than I
80:15 could possibly ever have. And it's really really important for me to not
80:20 give a shit and to be able to celebrate people like I celebrate people. I
80:25 celebrate companies and has I don't care that they're sponsoring. I really don't
80:31 care. I just want to make that very explicit cuz we're going to continue saying positive things about Shopify. I
80:37 don't care. Stop sponsoring. It doesn't really matter to me. But yeah, I just want to make that explicit. So, but to
80:43 linger on the scaling thing with the Twitter and the Shopify, uh can you just explain to me what Shopify is doing with
80:51 uh with the Jet? What did they have to try to do to scale this thing? Because
80:57 that's kind of an incredible story, right? Yeah. So, one of the great contributions that Shopify has made to the entire Ruby
81:04 ecosystem, not just Rails, but in particular Rails is YJet. So, YJID is
81:09 their compiler for for Ruby that just makes everything a lot more efficient and at Shopify scale eking out even a 5
81:18 10% improvement in Ruby's overhead and execution time is a huge deal. Now,
81:24 Shopify didn't need YJ. Shopify was already running on the initial version
81:30 of Ruby that was I think 10 times slower than what we have today. If you look
81:35 back upon the Ruby 186 that Topi probably started on just as I started on
81:42 and that was enough to propel Shopify to the scale that it has today. A lot of the scaling conversation in is lost in a
81:51 failure to distinguish two things. Scale is kind of one package we talk
81:57 about when there are really multiple packages inside of it. One is runtime performance latency. How fast can you
82:04 execute a single request? Can it happen fast enough that the user will not notice? If your Rails request takes a
82:11 second and a half to execute, the user is going to notice. Your app is going to feel slow and sluggish. You have to get
82:17 that response time down below, let's say, at least 300 milliseconds. I like
82:22 to target 100 milliseconds as my latency. That's kind of performance. How much performance of that kind of latency
82:30 can you squeeze out of a single CPU core? That tells you something about what the price of a single request will
82:36 be. But then whether you can deal with 1 million requests a second like Shopify
82:42 is doing right now. If you have one box that can do a thousand requests a
82:47 second, you just need X boxes to get up to a million. And what you'll actually find is that when it comes to
82:53 programming languages, they're all the same in this way. They all scale largely
82:58 beautifully horizontally. You just add more boxes. The hard parts of scaling a
83:04 Shopify is typically not the programming language. It's the database. And that's
83:09 actually one of the um challenges that Shopify has now is how do you deal with MySQL at the scale
83:17 that they're operating at? When do you need to move to other databases to get
83:23 worldwide performance? All of these things. The questions about scaling Ruby are economic questions. If we're
83:29 spending so and so much on application servers, if we can get just 5% more
83:34 performance out of Ruby, well, we could save 5% of those servers and that could filter down into the budget. Now, that
83:40 analysis concludes into basically one thing. Ruby is a luxury language.
83:48 It's a luxury, the highest luxury in my opinion. It is the Koko Chanel of
83:54 programming languages. Something that not everyone can afford. And I mean this in the best possible way. There are some
84:00 applications on the internet where each request has so little value you can't
84:06 afford to use a luxurious language like Ruby to program in it. You simply have to slum it with a C or a Go or some
84:14 other low-level language or Rust. Talk about line noise there for a hot second. The thrift store of languages.
84:20 Exactly. where you need kind of just you need a very low level to do it. You can't afford to use a luxury language to
84:27 you to to build it with. That's not true of Shopify. It wasn't true of Base Camp. Even back in 2004, it's not been true of
84:35 99% of all web applications ever created because the main cost component of 99%
84:42 of web applications is not CPU cores, it's wet cores, it's human cores, it's
84:48 human capacity to understand and involve systems. It's their personal productivity. I did a calculation once
84:56 when someone had for the 400th time said that oh if you switch from Ruby to some
85:01 faster language you could save a bunch of money and I calculated it out that at the time and I think the last time I did
85:07 this calculation was almost a decade ago we were spending about 15% of our operating budget on Ruby application
85:15 servers. So for me to improve my cost
85:20 profile of the business um by seven percentage points, I'd have to pick
85:25 something twice as fast. That's quite hard. Versus if Ruby and Ruby and Rails
85:30 was even 10% more productive than something else, I would move the needle far more because making individual
85:36 programmers more productive actually matters a lot more. This is why people are so excited about AI. This is why
85:42 they're freaking out over the fact that a single programmer in Silicon Valley who makes $300,000 a year can now do the
85:50 work of three or five at least in theory. I haven't actually seen that fully in practice, but let's just assume the theory is correct. If not now, then
85:57 in 6 months, that's a huge deal. That matters so much more than whether you
86:04 can squeeze a few more cycles out of the CPU when it comes to these kinds of business applications. If you're making
86:10 Unreal Engine rendering stuff like Tim Sweeney you had on, yeah, he needs to really sweat all those
86:16 details. The Nanite engine can't run on Ruby. It It's never going to. It was not meant for that. Fine. These kinds of
86:23 business applications absolutely can. And everything that people are excited about AI for right now, that extra
86:31 capacity to just do more, that was why we were excited about Ruby back in the early 2000s. It was be because I saw
86:39 that if we could even squeeze out a 10% improvement of the human programmer,
86:45 we'd be able to do so much more for so much less. Probably argue about this, but I really
86:51 like working together with AI, collaborating with AI, and I would argue that the kind of code you want AI to
86:58 generate is human readable, human interpretable. Yes. If it's generating pearl golf code,
87:05 it's just it's not a collaboration. So, it has to be speaking the human. It's not just you're writing the prompts in
87:11 English. You also want to read the responses in the human interpretable language like Ruby, right? So it's
87:18 that's actually is beneficial for AI too cuz you've kind of said that for you the
87:23 sculptor the sort of the elitist Coco Chanel sculptor you want to on your
87:29 fancy keyboard to type every single letter yourself with your own fingers but it's also uh that uh the benefit of
87:37 Ruby also applies in when some of that is written by AI and you're actually doing with your own fingers the editing
87:43 part. Yes. Because you can interact with it because it's human interpretable. The paradigm I really love with this was something Elon
87:49 actually said on one of your shows when you guys were talking about Neurolink. That Neurolink allows the bandwidth
87:57 between you and the machine to increase. That language either spoken or written
88:02 is very low bandwidth. If you are to calculate just how many bits we can exchange as we're sitting here, it's
88:09 very slow. Ruby has a much higher bandwidth of
88:15 communication, reveals, conveys so much more concept
88:20 per character than most other programming languages do. So when you
88:26 are collaborating with AI, you want really high bandwidth. You want it to be able to produce programs with you,
88:33 whether you're letting it write the code or not, that both of you can actually
88:38 understand really quickly and that you can compress a grand comp or a grand
88:44 concept, a grand system into far fewer parts that both of you can understand.
88:50 Now, I actually love collaborating with AI, too. I love chiseling my code, and the way I use AI is in a separate
88:57 window. I don't let it drive my code. I've tried that. I've tried the cursors and the wind serves and I don't enjoy
89:02 that way of writing. And one of the reasons I don't enjoy that way of writing is I can literally feel
89:09 competence draining out of my fingers like that level of immediacy with the
89:16 material disappears. And the where I felt this the most was I did this um
89:22 remix of Ubuntu called amacube when I switched to Linux and it's all written in bash. I'd never
89:28 written any serious amount of code in bash before. So I was using AI to collaborate to write a bunch of bash
89:34 with me because I needed all this. I knew what I wanted. I could express it in Ruby, but I thought it was an
89:40 interesting challenge to filter through Bash because what I was doing was setting up a Linux machine. That's
89:46 basically what Bash was designed for. It's a great constraint. But what I found myself doing was asking AI for the
89:53 same way of expressing a conditional, for example, in Bash over and over again. That by not typing it, I wasn't
90:01 learning it. I was using it. I was getting the expression I wanted, but I
90:06 wasn't learning it. And I got a little scared. I got a little scared like, is this the end of learning? Am I no longer
90:12 learning if I'm not typing? And the way I for me recast that was I don't want to
90:18 give up on the AI. It is such a better experience as a programmer to look up APIs, to get a second opinion on
90:25 something, to do a draft, but I have to do the typing myself because you learn
90:31 with your fingers. If you're learning how to play the guitar, you can watch as many YouTube videos as you want. You're
90:37 not going to learn the guitar. You have to put your fingers on the strings to
90:42 actually learn the motions. And I think there is a parallel here to programming where programming has to be learned in
90:48 part by the actual typing. I'm just really this is this is fascinating.
90:54 Listen, part of my brain agrees with you 100%, part doesn't.
90:59 I think AI should be in the loop of learning. Now current systems don't do
91:05 that but I think it's very possible for cursor to say
91:10 to basically force you to type certain things. So like if you set the mode of learning I just I don't want to be this
91:18 uh sort of give up on AI. I really I think I think vibe coding is a skill. So
91:26 uh for an experienced programmer it's too easy to dismiss vibe coding as a thing.
91:31 I agree. I wouldn't dismiss it. But I think you need to start building that skill and start to figure out how
91:38 do you prevent the competency from slipping away from your fingers and brain. Like how do you develop that
91:45 skill in parallel to the other to the other skill? I don't know. I just it's I think it's a fascinating puzzle though.
91:51 I know too many really strong programmers that just kind of avoid AI because it's currently a little too
91:56 dumb. Yes, it's a little too slow is actually my main problem. It's a little too dumb in some ways, but it's a little too slow
92:02 in other ways. When I use uh Claude's code,
92:07 the terminal version of uh Claude, which is actually my preferred way of using it, I just I get too impatient. It feels
92:15 like I'm going back to a time where code had to compile and I had to go do something else or boil some tea while
92:21 the code is compiling. Well, I've been working in Ruby for 20 years. I don't have compile weight in me anymore. So
92:29 there's that aspect of it. But I think the more crucial aspect for me is I really care about the competence. And
92:34 I've seen what happens to even great programmers the moment they put away the keyboard. Because even before AI, this
92:42 would happen as soon as people would get promoted. Most great programmers who work in large businesses stop writing
92:49 code on a daily basis because they simply have too many meetings to attend to. They have too many other things to do and invariably they lose touch with
92:57 programming. That doesn't mean they forget everything. But if you don't have
93:03 your fingers in the sauce, the source, you are going to lose touch with it.
93:08 There's just no other way. I don't want that because I enjoy it too much. This is not just about outcomes. This is
93:15 what's crucial to understand. Programming for programmers who like to
93:20 code is not just about the programs they get out of it. That may be the economic value. It's not the only human value.
93:27 The human value is just smudge in the expression. When someone who sits down on a guitar
93:34 and plays Stairways to Heaven, there's a perfect recording of that that will last in eternity. You can just put it on
93:41 Spotify. You don't actually need to do it. The joy is to command the guitar yourself. The joy of a programmer of me
93:49 as a programmer is to type the code myself. If I elevate, if I promote myself out of programming, I turned
93:56 myself into a project manager, a project manager of uh murder of AI crows, as I
94:01 wrote the other day. I could have become a project manager my whole career. I could have become a project manager 20
94:08 years ago if I didn't care to write code myself. And I just wanted outcomes. That's how I got started in programming.
94:13 I just wanted outcomes. Then I fell in love with programming and now I'd rather
94:18 retire than give it up. Now that doesn't mean you can't have your cake and eat it too. I've done some vibe coding where I
94:26 didn't care that I wasn't playing myself. I just wanted to see something. There was an idea in my head. I wanted
94:32 to see something. That's fine. I also use AI all day long. In fact, I'm
94:38 already at the point where if you took it away from me, I'd be like, "Oh my god, how do we even look things up on the internet anymore?" Is is Stack
94:44 Overflow still around? Are forums still a thing? Like, how do I even find answers to some of these questions I
94:50 have all day long? I don't want to give up AI. In fact, I'd say the way I like to use AI, I'm getting smarter every day
94:57 because of AI. Because I'm using AI to have it explain things to me, even
95:03 stupid questions. I would be a little embarrassed to even enter into Google.
95:08 AI is perfectly willing to give me the ELI5 explanation of some Unix command I
95:14 should have known already, but I don't. I'm sorry. Can you just explain it to me? And now I know the thing. So, at the
95:20 end of the day of me working with AI all day long, I'm a little bit smarter, like
95:26 5%. Sorry, not 5%, half a percent maybe. That compounds over time. But what I've
95:32 also seen when I worked on the OMAKU project and I tried to let AI drive for me, I felt I was maybe half a percent
95:39 dumber at the end of the day. Okay, you said a lot of interesting things. First of all, let's just start
95:44 with the very fact that uh asking dumb questions. If you go to Stack Overflow and ask a dumb question or read somebody
95:50 else's dumb question and the answer to it, there's a lot of judgment there. Yes, AI sometimes to an excessive degree has
95:57 no judgment. It usually says, "Oh, that's a great question to a fault." Yeah. Oh, that's wonderful.
96:05 Yeah. I I mean, it's it's such a it's so conducive to learning. It's such a
96:11 wonderful tool for learning and I would I too would miss it. And it's a great basically search engine into all kinds
96:17 of nuances of a particular programming language, especially if you don't know it that well or like APIs you can load
96:24 in documentation. It's just so great for learning. I for me personally it
96:30 I mean on the happiness scale it makes me more excited to program.
96:36 I don't know what that is exactly. Part of that is the I'm really sorry Stack Overflow is an incredible website but
96:43 there is a negativity there. Yes, there's a judgment there. There's it's just exciting to be like a with a hype
96:49 man next to me just like saying yeah that's a great idea and I'll say no
96:55 that's wrong. I'll I'll correct the AI and the and the AI will say, "You're absolutely right. How did I not think
97:02 about that?" He'll rewrite the code. I'm like, "Holy shit, I'm having it's like a buddy that's like really being positive
97:09 and is very smart and is challenging me to think and even if I never use the code it generates, I'm already a better
97:16 programmer." But actually, the deeper thing is for some reason I'm having more
97:21 fun. That's a really really important thing. I like to think of it as a pair programmer. for exactly that reason.
97:27 Pair programming came vogue in like the 2000s where you'd have two programmers in front of one machine and you'd push
97:34 the keyboard between you. One program would be driving, they'd be typing in. The other programmer would essentially
97:40 sit and watch the code, suggest improvements, look something up. That was a really interesting dynamic. Now,
97:47 unfortunately, I'm an introvert, so I can do that for about five minutes before I want to jump off a bridge. So,
97:52 it doesn't work for me as a full-time occupation, but AI allows me to have all the best of that experience all the
97:59 time. Now, I think what's really interesting what you said about it makes it more fun. I hadn't actually thought about that, but
98:05 what it's made more fun to me is to be a beginner again. It's made me it made it
98:10 more fun to learn Bash successfully for the first time. Now, I had to do the
98:16 detour where I let it write all the code for me and I realized I wasn't learning nearly as much as I hoped I would. and
98:22 that I started doing once I typed it out myself. But it gave me the confidence that you know what if I need to do some
98:28 iOS programming myself. I haven't done that in probably 6 years was the last time I dabbled in it. I never really
98:34 built anything for real. I feel highly confident now that I could sit down with AI and I could have something in the app
98:40 store by the end of the week. I would not have that confidence unless I had a pair programming body like AI. I don't
98:47 actually use it very much for Ruby code. I'm occasionally impressed whenever I try it. They're like, "Oh, it got this
98:53 one thing right. That is truly remarkable and it's actually pretty good." And then I'll ask you two more questions and I go like, "Oh, yeah.
98:59 Okay. If you were my junior programmer, I'd start tapping my fingers and going like, you got to you got to shape up."
99:05 Now, the great thing, of course, is we can just wait five minutes. Um, the entropic CEO seems to think that 90% of
99:12 all code by the end of the year is going to be written by AI. I'm more than a little bit skeptical about that. But I'm open-minded about the prospect that
99:20 programming potentially will turn into a horse when done manually, something we
99:26 do recreationally. It's no longer a mode of transportation to get around LA. You're not going to saddle up and go to
99:33 the grocery store and pick up stuff from Whole Foods in your saddle bags. That's just not a thing anymore. That could be
99:39 the future for programming, for manual programming. Entirely possible. I also
99:44 don't care like even though we have great renditions of all the best songs as I said there are millions of people
99:51 who love to play the guitar it may no longer have as much economic value as it once did I think that I'm quite
99:58 convinced is true that we perhaps have seen the peak now I understand the paradox when the price of something goes
100:04 down actually the you overall usage goes up and total spend on that activity goes up that could also happen maybe but what
100:11 we're seeing right now is that a lot of the big shops, a lot of the big companies are not hiring like they were
100:19 5 years ago. They're not anticipating they're going to need tons more programmers. Controversially, Toby
100:25 actually put out a memo inside of Shopify asking everyone who's considering hiring someone to ask the
100:31 question, could this be done by AI? Now, he's further ahead on this question than I am. I look at some of the coding
100:37 trenches and I go like, I'd love to use AI more and I see how it's making us more productive, but it's not yet at the
100:43 level where I just go like, "Oh, we have this project. Let me just give it to the AI agent and it's going to go off and do it." But let's just let's just be honest.
100:49 You're like a Clint Eastwood type character, cowboy on a horse, seeing uh seeing cars going around and you're
100:55 like, well, that's part of it. And I think that's it is important to have that humility that what you are good at may no longer be
101:03 what society values. This has happened a million times in history that you could have been exceptionally good at saddlem
101:10 for example. That's something that a lot of people used to care about because everyone rode a horse and then suddenly
101:15 riding a horse became this niche hobby that there's some people care about it but not nearly as many. That's okay. Now
101:23 the other thing of this is I've been had the good fortune to have been a programmer for nearly 30 years. That was
101:30 a great run. I try to look at life in this way that I've already been blessed
101:35 with decades of economically viable, highly
101:40 valuable ways of translating what I like best in the working world to write Ruby
101:47 code that that was so valuable that I could make millions and millions of dollars doing it. And if that's over
101:52 tomorrow, I shouldn't look at that with regret. I should look at it with gratitude. But you're also a highly
101:59 experienced, brilliant, and opinionated human being. So, it's really interesting
102:06 to get your opinion on the future of the horse because it, you know, there's a
102:11 lot of young people listening to this who love programming or who are excited by the possibility of building stuff
102:16 with software uh with a Ruby with Ruby with Ruby on Rails that kind of language
102:22 this and now the possibility. Is it a career? Is it a career? And
102:28 how if indeed a single person can build more and more and more with the help of
102:34 AI like how do they learn that skill? Is this a good skill to learn? I mean that
102:39 to me is the real mystery here because I think it's still absolutely true that
102:44 you have to learn how to program from scratch currently. Yes. But how do you balance those two skills?
102:51 Because I too as I'm thinking now there is a scary slipping away of skill that
102:57 happens in a matter of like really minutes on a particular piece of code.
103:02 It just it's it's it's scary. Not the way driving, you know, when you have a car
103:10 drive for you, it doesn't quite slip away that fast. So that really scares me. So when when
103:17 somebody comes up to me and asks me like, "How do I learn to program?" I don't know what the advice is because I
103:24 think it's not enough to just use cursor or copilot to generate code.
103:29 It's absolutely not enough. Not if you want to learn. None of you want to become better at it. If you just become a tap monkey, maybe you're productive in
103:37 a second, but then you have to realize, well, can anyone just tap if that's all we're doing is just sitting around all
103:42 day long tapping? Yes. Yes. Yes. Yes. Yes. That's not a marketable skill. Now,
103:48 I always preface this both to myself and when I speak to others about it is rule number one, nobody fucking knows
103:55 anything. No one can predict even 6 months ahead. Right now, we're probably at peak AI future hype because we see
104:02 all the promise because so much of it is real and so many people have experienced it themselves. this mind-boggling
104:10 thing that the silicon is thinking in some way that feels eerily reminiscent
104:17 of humans. I'd actually say the big thing for me wasn't even chat GBT. It wasn't even Claude. It was DeepSeek.
104:23 Running Deepseek locally and seeing the think box where it converses with itself
104:30 about how to formulate the response. I almost wanted to think is this a
104:35 gimmick? Is it doing this as a performance for my benefit? But that's not actually how it thinks. If this is
104:41 how it actually thinks, okay, I'm a little scared. Yeah, this is incredibly human how it thinks
104:47 in this way. But where does that go? So in 95, one of my favorite movies, one of
104:54 my favorite be movies came out. The Lawn Mower Man. Great movie. Incredible movie about virtual reality
105:00 being an Avatar and living in VR. Like the story was a mess, but the aesthetics, the world that built up was
105:06 incredible. And I thought, we're 5 years away. I'm going to be living in VR now.
105:12 I'm just going to be floating around. I'm going to be an avatar. This is where most humans can spend most of their day.
105:18 That didn't happen. We're 30 years later. VR is still not here. It's here
105:25 for gaming. It's here for some specialized applications. My oldest loves playing Gorilla Tag. I don't know
105:32 if you've tried that. That's basically the hottest VR game. Wonderful. That's great. It's really hard to predict the
105:39 future because we just don't know. And then when you factor in AI and you have
105:45 even the smartest people go like I don't think we fully understand how this works. But then on the flip side you
105:50 have Moore's law that seems to have worked for many many many years in uh
105:57 decreasing the size of transistor for example. So like you know uh flash didn't take over the
106:02 internet but Moors law worked. So we don't know which one AI is
106:08 what it is and this is what I find so fascinating too. I forget who did this presentation but someone in the web
106:13 community did this great presentation on the history of the airplane. So you go
106:19 from the Wright brothers flying in what was 1903 or something like that and 40
106:24 years later you have jet flight just an unbelievable amount of progress in four
106:31 decades. Then in 56 I think it was the halt design for the Boeing 747
106:39 essentially precursor was designed and basically nothing has happened since. Just minor tweaks and improvements on
106:46 the flying experience since the 50s somehow if you were to predict where
106:52 flying was going to go and you were sitting in 42 and you'd seen you remember the Wright brothers flying in '
106:58 03 and you were seeing that jet engines coming. You're like, "We're going to fly the to the stars in another two decades.
107:05 We're going to invent super mega hypersonic flights that's going to traverse the earth in in two hours." And
107:12 then that didn't happen. It tapped out. This is what's so hard of predicting about predicting the future. We can be
107:17 so excited in the moment because we're drawing a line through early dots on a
107:22 chart and it looks like those early dots are just going up and to the right and sometimes they just flatten out. This is also one of those things where we have
107:29 so much critical infrastructure. for example, that still runs on cobalt that about five humans around the world really understand truly deeply that
107:36 there's a it's possible for society to lose a competence it still needs because
107:43 it's chasing the future. Copalt is still with us. This is one of the things I think about with with programming. Ruby
107:49 and Rails is at such a level now that in 50 years from now, it's exceedingly likely that there's still a ton of Ruby
107:56 and Rail systems running around. Now, very hard to predict what that exact world is going to be like, but yesterday's weather tells us that if
108:02 there's still cobalt code from the 70s operating social security today, and we
108:08 haven't figured out a clean way to convert that, let alone understand it. Um, we should certainly be humble about
108:15 predicting the future. I don't think any of the programmers who wrote that cobalt code back in the 70s had any damn idea
108:21 that in 2025 checks were still being cut off the business logic that they had encoded back then. But that just brings
108:28 me to the conclusion on the question for what should a young programmer do? You're not going to be able to predict the future. No one's going to be able to
108:35 predict the future. If you like programming, you should learn programming. Now, is that going to be a career forever? I don't know. But what's
108:41 going to be a career forever? Who knows? Like a second ago, we thought that it
108:47 was the blue collar labor that was going to be abstracted first. It was the robots that were going to take over.
108:52 Then Gen AI comes out and then all the artists suddenly look like, "Holy shit, is this going to do all animation now?
108:58 It's going to do all music now." They get real scared. And now I see the latest Tesla robot going like, "Oh,
109:04 maybe we're back now to blue collar being in trouble because if it can dance like that, it can probably fix a
109:10 toilet." So no one knows anything and you have to then position yourself for
109:17 the future in such a way that it doesn't matter that you pick a
109:23 profession or path where if it turns out that you have to retool and reskill
109:28 you're not going to regret the path you took. That's a general life principle for me. How I look at all endeavors I
109:35 involve myself in is I want to be content with all outcomes. When we start
109:40 working on a new product at 37 signals, I set up my mental model for its success. And I go, do you know what? If
109:47 no one wants this, I will have had another opportunity to write beautiful Ruby code, to explore a green field
109:55 domain, to learn something new, to build a system I want, even if no one else wants it. What a blessing. What a
110:02 privilege. If a bunch of people want it, that's great. We can pay some salaries.
110:08 we can keep the business running and if it's a blowway success, wonderful, I get to impact a bunch of people.
110:14 I think one of the big open questions to me is uh how far you can get with vibe
110:19 coding, whether an approach for a young developer to invest most of their time into vibe coding or into writing code
110:27 from scratch. So vibe coding meaning so I'm I'm leaning into the meme a little bit but
110:33 the vibe coding meaning you generate code you have the this idea of a thing you want to create you generate the code
110:40 and then you fix it with both natural language through the prompts and manually you learn enough to manually
110:46 fix it. So that's the learning process, how you fix code that's generated or you
110:53 you write code from scratch and have the LLM's kind of uh tab tab tab tab add
110:59 extra code like which part do you lean on? I think to be safe, you should find
111:07 the the beauty and the the artistry and the skill in both. Right from scratch,
111:13 like there should be some percent of your time just writing from scratch and some percent by coding. There should be more of the time writing from scratch.
111:20 If you are interested in learning how to program, unfortunately, you're not going to get fit by watching fitness videos.
111:26 You're not going to learn how to play the guitar by watching YouTube guitar videos. You have to actually play
111:31 yourself. You have to do the sit-ups. Programming understanding learning almost anything requires you to do.
111:39 Humans are not built to absorb information in a way that transforms into skills by just watching others from
111:45 afar. Now, ironically, it seems AI is actually quite good at that. But humans are not. If you want to learn how to
111:51 become a competent programmer, you have to program. It's really not
111:57 that difficult to understand. Now, I understand the temptation and the temptation is there because vibe coding
112:03 can produce things perhaps in this moment, especially in a new domain you're not familiar with with tools you don't know perfectly well that's better
112:10 than what you could do or that you would take much longer to get at, but you're not going to learn anything. You're
112:16 going to learn in this superficial way that feels like learning but is completely empty calories. And secondly,
112:24 if you can just vibe code it, you're not a programmer. Then anyone could do it. which may be wonderful. That's
112:29 essentially what happened with the Access database. That's what happened with Excel. It took the capacity of
112:36 accountants to become software developers because the tools became so accessible to them that they could build
112:42 a model for how the business was going to do next week. That required a programmer prior to Excel. Now, it
112:49 didn't because they could do it themselves. Vive coding enables non-programmers to explore their ideas
112:57 in a way that I find absolutely wonderful but it doesn't make you a programmer. I agree with you but I want
113:03 to allow for room for both of us be wrong. For example, there could be vibe
113:09 coding could actually be a skill that if you train it and by vibe coding let's
113:14 include the the the step of correction the iterative correction. It's possible if you get really good at that that
113:22 you're outperforming the people that write from scratch that you can come up with truly innovative things, especially
113:29 at this moment in history while the LLMs are a little bit too dumb to create
113:34 super novel things and a complete product, but they're starting to creep close to that. So, if you're investing
113:40 time now into becoming a really good vibe coder, maybe this is the right
113:45 thing to do uh as if it's indeed a skill. We kind of meme about vibe coding
113:50 just like sitting back and in the it's in the name. But if you treat it seriously, a competitive vibe coder and
113:57 get good at riding the wave of AI and get good at the skill of editing
114:04 code versus writing code from scratch. It's possible that you can actually get farther in the
114:12 long term. Maybe editing is a fundamentally different task than writing from scratch if you take that
114:17 seriously as a skill that you develop. I see. I don't to me that's an open question. I just think I'm I personally
114:25 and now you're on another level, but just me just just personally I'm not as good at editing
114:33 the code that I didn't write. That's a different no one is of this generation.
114:40 But but maybe that's a skill. Maybe if you get on the same page as the AI
114:45 because there's a consistency to the AI. It's like um it really is a pair programmer with a consistent style and
114:52 structure and so on. Plus with your own prompting you can control the kind of code you write. I mean it could
114:58 legitimately be a skill. Like that's the dream of the prompt engineer. I think it's complete pipe dream. I
115:04 don't think editors exist that aren't good at writing. I've
115:09 written a number of books. I've had a number of professional editors. Not all of them wrote their own great books, but
115:16 all of them were great writers in some regard. You cannot give someone pointers if you don't know how to do it. It's
115:22 very difficult for an editor to be able to spot what's wrong with a problem if
115:28 they couldn't make the solution themselves. Editing in my opinion is the
115:33 reward. The capacity to be a good editor is the reward you get from being a good doer. You have to be a doer first. Now
115:41 that's not the same as saying that vibe coding prompt engineering won't be
115:47 able to produce fully formed amazing systems even shortly. I think that's entirely possible. But then there's no
115:54 skill left which maybe is the greatest payoff at all. Wasn't that the whole promise of AI anyway? that it was just
116:00 all natural language that even my clumsy way of formulating a question could
116:05 result in a beautiful succinct answer. That actually to me is a much more appealing vision that there's going to
116:11 be these special prompt engineering wizards who know how to tickle the AI just right to produce what they want.
116:17 The beauty of AI is to think that someone who doesn't know the first thing about how AI actually works is able to
116:24 formulate their idea and their aspirations for what they want and the AI could somehow take that messy clump
116:32 of ideas and produce something that someone wants. That's actually what programming has always been. There's
116:38 very often been people who didn't know how to program, who wanted programs, who then hired programmers who gave them
116:44 messy descriptions of what they wanted and then when the programmers delivered that back said, "Oh, no, actually that's
116:50 not what I meant. I want something else." AI may be able to provide that
116:56 cycle. If that happens to the fullest extent of it, yeah, there's not going to be as many programmers around, right?
117:01 But hopefully presumably someone still at least for the foreseeable future have
117:07 to understand whether what the AI is producing actually works or not. As a
117:12 interesting case study maybe a thought experiment if I wanted to vibe code uh
117:17 base camp or or hey and some of the some of the products you you've built like
117:24 what would be the bottlenecks? What where would I fail along the way? What
117:30 I've seen when I've been trying to do this, trying to use vibe coding to build something real is you actually fail really early, uh, the vibe coding is
117:38 able to build a veneer at the current present moment of something that looks
117:43 like it works, but it's flawed in all sorts of ways. There are the obvious ways, the meme ways that it's leaking all your API
117:49 keys, it's storing your password in plain text. I think that's ultimately
117:54 solvable. Like, it's going to figure that out or at least it's going to get better at that. But its capacity to get
118:00 lost in its own labyrinth is very great right now. You let it code something and
118:06 then you want to change something and it becomes a game of whack-a-ole real quick. Peter levels who've been doing this wonderful flight simulator was
118:12 talking to that where at a certain scale the thing just keeps biting its own tail. You want to fix something and it
118:18 breaks five other things which I think is actually uniquely human because that's how most bad programmers are at a
118:24 certain level of complexity with the domain. They can't fix one thing without
118:29 breaking three other things. So in that way, I'm actually in some ways almost a
118:34 positive signal for that the AI is going to figure this out because it's on an extremely human trajectory right now.
118:39 The kind of mistakes it's making are the kind of mistakes that junior programmers make all the time. Yeah. Uh can we zoom out and look at the
118:48 vision, the manifesto, the doctrine of Rails? What are some of the things that make a programming language, a framework
118:57 great, especially for web development? So, we talked about happiness. Yes. The underlying objective of Ruby. Uh,
119:04 what else? So, you're looking at the nine points I wrote out in I think 2012. And first
119:09 before we dive into them, I want to say the reason I wrote it down is that if you want a community to endure, you have
119:18 to record its values and you have to record its practices. If you don't, eventually you're going to get enough
119:24 new people come in who have their own ideas of where this thing should go. And if we don't have a a guiding light
119:31 helping us to make decisions, we're going to start flailing. We're going to start actually falling apart. I think
119:36 this is one of the key reasons that institutions of all kinds start falling apart. We forget why Chesterton's fence
119:43 is there. We just go like, why is that fence there? Let's yank it out. Oh, it was to keep the wolves out. Now we're
119:49 all dead. Oops. So, I wanted to write these things down. And if we just take
119:54 them quick one by one, you talked about optimizing for programmer happiness. I put that at number one in homage of
119:59 Matts. And that's a lot about accepting that there is occasionally a trade-off between writing beautiful code and other
120:06 things we want out of systems. There can be a runtime trade-off. There can be a performance trade-off, but we're going
120:11 to do it nonetheless. We're also going to allow ambiguity in a way that many
120:18 programmers by default are uncomfortable with. I give the example actually here
120:23 of in the interactive Ruby shell where you can play with the language or even
120:28 interact with your domain model. You can quit it in two ways, at least that I found. You can write exit, boom, you're
120:35 out of the program. You can write quit, boom, you're out of the program. They do it the same thing. We just wrote both
120:40 exit or the people who built that wrote both exit and quit because they knew humans were likely to pick one or the other. Python is the perfect
120:48 contrast to this. In the Python interactive protocol, if you write exit, it won't exit. It'll give you a fucking
120:55 lesson. It'll basically tell you to read the fucking manual. It says use exit
121:00 parentheses or control D i.e. end of file to exit. I'm like one is very human
121:09 and another is very engineer. And I mean that both of them in the best possible
121:14 way. Python is pedantic. Python's the value from the start stated is that
121:22 there should be preferably one and only one way to do a certain thing. Ruby goes
121:27 the complete opposite. No, we want the full expression that fits different
121:32 human brains such that it seems like the language is guessing just what they want.
121:38 And part of that is also you describe the principle of least surprise which is a difficult thing to engineer into a
121:43 language because you have to kind of it's a subjective thing what is which is why you can't do it in one way
121:48 which is why I use the example of both exit and quit. The principle of least surprise for some people would be like,
121:54 "Oh, exit. That's how I get out of the prompt. For other people, it would be quit." Why don't we just do both?
122:01 Okay. So, what's the convention over configuration? That's a big one. That's a big one. That's a huge one. And
122:07 it was born out of a frustration I had in the early days with especially Java frameworks where when you were setting
122:13 up a web application framework for Java back in the day, it was not uncommon to literally write hundreds if not
122:20 thousands of lines of XML configuration files. Oh, I need this. I want um the
122:26 database to use the foreign keys as post ID. No, no, no. I want it as post
122:32 capital I D. Oh, no, no, no. you have to do a capital P ID. There are all these
122:38 ways where you can configure how foreign relation keys should work in a database and none of them matter.
122:44 We just need to pick one and then that's fine. And if we pick one and we can depend on it, it becomes a convention.
122:51 And if it's a convention, we don't have to configure it. And if we don't have to configure it, you can get started with you actually care about much quicker. So
122:58 convention over configuration is essentially to take that idea that the system should come preassembled. I'm not
123:05 just handing you a box of fucking Legos and asking you to build the Millennium Falcon. I'm giving you a finished toy.
123:10 You can ed you can change it. It's still built out of Legos. You can still take some pieces off and put in some other pieces, but I'm giving you the final
123:17 product. And this cuts against the grain of what most programmers love. They love a box of Legos. They love to put
123:23 everything together from scratch. They love to make all these detailed little decisions that just don't matter at all.
123:28 And I want to elevate that up such that hey, I'm not trying to take the decisions away from you. I just want you
123:34 to focus on decisions that actually matter that you truly care about. No one cares about whether it's postc ID or
123:40 post ID or pit. Yeah. Great defaults. Yeah. Just a wonderful thing. You have
123:46 all these aspirations. They're going to do some kind of custom most beautiful Legos castle that nobody's ever built
123:52 from these pieces. But in reality to be productive in most situations you just need to build the basic thing and and
124:00 then on top of that is where your creativity comes. Absolutely. And I think this is one of
124:05 those part of the doctrine that a lot of programmers who get to use Ruby and
124:11 Rails begrudgingly will acknowledge is a nice thing even if they don't really like it. Like it's hard to beat the
124:20 sort of attraction to building with Legos from scratch out of programmers. That's just what we like. This is why
124:25 we're programmers in the first place because we like to put these little pieces together. But we can direct that instinct towards a more productive end
124:32 of the stack. Okay. What are some of the other ones? The menu is amacasa. It actually comes
124:38 out of the same principle that great defaults really matter. If you look at everything that's wrong with the
124:44 JavaScript ecosystem right now, for example, it is that no one is in charge of the menu. There are a billion
124:51 different dishes and you can configure just your tailored specific configuration of it, but no one done the
124:57 work to make sure it all fits together. So you have all these unique problems in the JavaScript ecosystem. For example,
125:03 there's probably 25 major ways of just doing the controller layer and then as
125:09 many of how to talk to the database. So you get this permutation of n * n * n of
125:15 no one is using the same thing and if they are using the same thing they're only using the same thing for about 5 minutes. So we have no retained wisdom.
125:23 We build up no durable skills. Rails goes the complete opposite way of saying
125:28 do you know what Rails is not just a web framework. It is a complete attempt at
125:34 solving the web problem. is complete attempt at solving everything you need to build a great web application. And
125:41 every piece of that puzzle should ideally be in the box, preconfigured,
125:47 pre-assembled. If you want to change some of those pieces later, that's wonderful. But on day one, you'll get a
125:54 full menu designed by a chef who really cared about every piece of the ingredient, and you're going to enjoy
126:00 it. And that's again one of those things where many programmers think like I know
126:07 better and they do in some hyper local sense of it. Every programmer knows
126:12 better. This is what Ruby is built on that every programmer knows better in their specific situation. Maybe they can
126:18 do something dangerous. Maybe they think they know better and then they blow their foot off and then they truly will know better because
126:24 they've blown their foot off once and won't do it again. But the the menu is that. So you in general see the value in
126:32 the in the monolith. Yes. The integrated system integrated. Someone thought of the whole problem.
126:37 This is one of the reasons why I've been on a crusade against microservices since the term was coined. Microservices was
126:45 born out of essentially a good idea. What do you do at Netflix scale when you have thousands of engineers working on
126:52 millions of lines of code? No one can keep that entire system in their head at one time. You have to break it down. Microservices can be a reasonable way to
126:59 do that when you're at Netflix scale. When you apply that pattern to a team of 20 programmers working on a codebase of
127:06 half a million lines of code, you're an idiot. You just don't need to turn
127:12 method invocations into network calls. It is the first rule of distributed programming. Do not distribute your
127:19 programming. It is makes everything harder. all the failure conditions you have to consider as a programmer just
127:25 becomes infinitely harder when there's a network cable involved. So I hate the
127:31 idea of premature decomposition and microservices is exactly that. The monolith says let's try to focus on
127:38 building a whole system that a single human can actually understand and push that paradigm as far as possible by
127:45 compressing all the concepts such that more of it will fit into memory of a single operating human and then we can
127:51 have a system where I can actually understand all of basecap I can actually understand all of hey both of those
127:56 systems are just over 100,000 lines of code I've seen people do this at maybe twice maybe three times that scale and
128:02 then it starts breaking down once you get north of certainly half a million in lines of code. No individual human can
128:08 do it. And that's when you get into maybe some degree of microservices can make sense. Base Camp and Hay are both 100,000
128:14 100,000 lines of code. Oh, that's small. It is considering the fact that Basec Camp I think has something like 420
128:21 screens, different ways and configurations. Uh do you include the front end in that? No, that's the Ruby code. Well, it's
128:27 front end in the sense that some of that Ruby code is beneficial to the to the front, but it's not JavaScript, for example. Now the other thing we might
128:34 talk about later is we write very little JavaScript actually for all of our applications. Hey which is a Gmail
128:40 competitor. Gmail ships I think 28 megabytes of uncompressed JavaScript. If
128:45 you compress it I think it's about 6 megabytes. 28 megabytes. Think about how many lines of code that is. When hey launched we shipped 40 kilobytes.
128:54 It's trying to solve the same problem. You can solve the email client problem with either 28 megabytes of uncompressed
129:00 JavaScript or with 40 kilobytes if you do things differently. But that comes to the same problem
129:06 essentially. This is why I have fiercely fought splitting front end and back end
129:12 apart. that in my opinion this was one of the great crimes against web development
129:18 that we are still atoning for that we separated and divided what was and
129:24 should be a unified problem-solving mechanism when you are working both on
129:29 front end and back end you understand the whole system and you're not going to get into these camps that decompose and
129:35 eventually you end up with shit like GraphQL okay
129:41 uh let's fly through the rest of the doctrine. No one paradigm. No one paradigm goes to the fact that
129:46 Ruby is a fiercely object-oriented programming language at its core, but it's also a functional programming
129:52 language. This five times I told you about you can essentially do these uh
129:57 anonymous function calls and you can chain them together very much in the spirit of how true functional
130:03 programming languages work. Ruby has even moved closer towards the functional programming end of the scale by making
130:09 strings immutable. Um there are ideas from all different
130:14 disciplines of and all different paradigms of software development that can fit together.
130:19 Small talk for example was only object-oriented and that was just it. Ruby tries to be mainly object-oriented
130:25 but borrow a little bit of functional programming a little bit of imperative programming be able to do all of that.
130:30 Rails tries to do the same thing. We're not just going to pick one paradigm and run it through everything. Object
130:36 orientation is at the center of it, but it's okay to invite all these other disciplines in. It's okay to be
130:42 inspired. It's okay to remix it. I actually think one of the main benefits
130:47 of Rails is that it's a remix. I didn't invent all these ideas. I didn't come up with active record. I didn't come up
130:53 with the MVC way of dividing an application. I took all the great ideas that I had learned and picked up from
130:59 every different um camp and I put it together. Not because there was going to be just one single overarching theory of
131:06 everything, but I was going to have a cohesive unit that incorporated the best from everywhere. Is that idea a bit at tension with the
131:13 beauty of the monolith system? I think the monolith can be thought of as quite roomy, quite
131:21 as a big tent. That the monolith needs actually to borrow a little bit of
131:26 functional programming for the kinds of problems that that excels that discipline excels at solving or that
131:31 paradigm excels at solving if you also want object orientation as its core. I actually think when I've looked at
131:37 functional programming languages, there's a lot to love. And then I see some of the crazy contortions they have
131:44 to go through when part of the problem they're solving calls for mutating something. And you go like, "Holy shit,
131:53 this is a great paradigm for 90% of the problem." And then you're twisting yourself completely out of shape when
131:59 you try to solve the last 10. Oo, exalt beautiful code is the next one. We've talked about that at length. Then
132:04 here's a great example that really summarizes the domain specific language quality of Ruby and Rails that you can
132:11 make code actually pleasant to write and read which is really funny to me because
132:18 as we talked about when I started learning programming it wasn't even a consideration. I didn't even know that that could be part of the premise that
132:24 that could be part of the solution that writing code could feel as good as
132:30 writing a poem. Class project application record belongs to account
132:35 has many participants class name person validates presence of name.
132:41 See you could read it out. You didn't even change anything. It's a haiku or something, right? Isn't that beautiful?
132:47 Yeah, it's nice. It's really it's really it's really nice. There's a there's an intuitive nature to it. Okay. So, I have
132:53 specific questions there. I mean, active record, just to take that tangent, that
132:58 has to be your favorite feature. It's the crown jewel of Rails. It really
133:03 is. It is the defining characteristic of how to work with Ruby and Rails. And it's born in an interesting level of
133:11 controversy because it actually uses a pattern that had been described by Martin Fowler in the patterns of
133:17 enterprise application architecture. one of the greatest books for anyone working
133:22 on business systems and if you had not read it you must pick it up immediately. Patterns of enterprise application
133:28 architecture I think it was published in 2001. It is one of the very few programming books that I have read many
133:34 times over. It's incredible. In it Martin describes a bunch of different
133:40 patterns of how to build business systems essentially. And active record is a little bit of a footnote in there.
133:46 The pattern is literally called active record. You can look it up in it's called active erot. I wasn't even creative enough to come up with a name
133:52 of my own, but it allows the creation the marriage
133:57 of database and object orientation in a way that a lot of programmers find a
134:02 little um off-putting. They don't actually want to pollute the
134:07 beautiful object-oriented nature of that kind of programming with SQL. There was
134:13 a rant by Uncle Bob the other day about how SQL is the worst thing ever. Blah blah. Okay, fine. Whatever. I don't
134:20 care. This is practical. We are making CRUD applications. You're
134:25 taking things out of an HTML form and you're sticking them into a damn database. It's not more complicated than that. The more abstractions you put in
134:32 between those two ends of the spectrum, the more you're just fooling yourself. This is what we're doing. We're talking
134:38 to SQL databases. By the way, quick aside, SQL was one of those things that
134:43 have endured the onslaught of NoSQL databases, structured list data for a
134:48 better part of a decade and still reign supreme. SQL was a good thing to invest your time in learning. Every programmer
134:55 working with the web should know SQL to a fair degree. Even if they're working with an ORM, an object relational mapper
135:02 as active record, you still need to understand SQL. What active record does is not so much try to abstract the SQL
135:09 away behind a different kind of paradigm as just making it less cumbersome to write. Making it more amenable to build
135:16 domain models on top of other domain models in a way since you don't have to write every damn SQL statement by hand.
135:23 We just say that active record is an OM which is a layer that makes it intuitive
135:30 and human interpretable to communicate with a database. Even simpler than that, it turns tables into classes and rows
135:38 into objects. I actually think SQL is very easy to understand. Most of it, you can write some SQL golf, too. That's
135:44 very hard to understand. But SQL at its base and much of the criticism against SQL was it was written for human
135:50 consumption. It's actually quite rebose, especially if you're doing things like inserts over and over again. It's quite
135:56 ribbos. Insert into table parenthesis, enumerate every column. You want to
136:01 insert values, parentheses, every value that fits with that column. It gets
136:06 tedious to write SQL by hand, but it's actually very humanly readable.
136:12 Active record just takes that tediousness away. It makes it possible to combine things in a way that a
136:18 humanly describable language just doesn't. It composes things into methods and you can combine these methods and
136:24 you can build structures around them. So, I don't dislike SQL. I dislike a lot of things in programming. try to get rid
136:30 of them. SQL wasn't really one of them. It was just a sense of I don't want to write the same thing over and over
136:35 again. It was a can we be a little more succinct? Can we match it just slightly better to the object orientation without
136:42 trying to hide away the fact that we're persisting these objects into a database? That's where I think a lot of
136:49 OM went wrong. They tried to live in the pure world of objects, never to consider
136:55 that those objects had to be consistent into a SQL database. And then they came up with convoluted way of translating
137:01 back and forth. Active record says, do you know what? Just accept it. This record, this object is not going to get
137:08 saved into some NoSQL database. It's not going to be it's going to be saved into a SQL database. So just structure the
137:14 whole thing around that. It's going to have attributes. Those attributes are going to respond to columns in the
137:19 database. It's not more complicated than that. Stop making it. So yeah, but I I should say so I personally
137:24 love SQL because I'm an algorithms person and so I love optimization. I love to know how the databases actually
137:31 work so I can match the SQL queries and the design of the tables such that there
137:37 is you know optimal squeeze the optimal performance out of the table okay based
137:44 on the actual way that that table is used. So I mean I I think that pushes to the point that like there is value in
137:50 learning and understanding SQL. I I wonder because I I started looking
137:57 at active record and it looks really awesome. Does that make you lazy? Not you, but uh a person that rolls in and
138:04 starts using Rails, you can probably get away with never really learning SQL, right?
138:10 As long as you want to stay at the entry level of competence. And this is actually my overarching mission with
138:16 Rails is to lower the barrier of entry so far down that someone can start
138:22 seeing stuff on the browser without basically understanding anything. They can run Rails new blog, run a
138:30 couple of generators, they have a whole system, they don't understand anything, but it's an invitation to learn more.
138:37 Where I get fired up, and this ties back to the AI discussion, is when that's turned into this meme that programmers
138:43 no longer have to be competent. They can just I mean, the AI is going to figure it out. The generators is going to
138:48 figure it out. I don't need to know SQL. Active record is going to abstract it away from me. No, no, no, dude. Hold up.
138:55 The path here is competence. I'm trying to teach you things. I understand I can't teach you everything in five
139:01 minutes. No one who's ever become good at anything worthwhile could be taught everything in five minutes. If you want
139:07 to be a fully well-rounded web application developer, that takes years,
139:12 but you can actually become somewhat productive in a few days. You can have
139:17 fun in a few days for sure. You can have fun in a a few minutes, and a few hours. And over time, I can teach you a little
139:23 more. Active record says like, "Yeah, yeah, all right. Start here and then like uh next week we'll do a class on
139:29 SQL." Uh and actually you have this beautiful expression that I love that a great programming language like Ruby has
139:36 a soft ramp go the ramp goes to infinity. That's exactly right. So you Yeah. It's super accessible,
139:42 super easy to get started and it never stops. Yeah, it never there's always more to learn. This is one of the reasons I'm still
139:48 having fun programming that I'm still learning new things. I can still incorporate new things. The web is deep enough as a domain. You're never going
139:54 to learn all of it. Provide sharp knives. This is a good one because another way of saying this, the
140:00 opposite way of saying this, the Java way of saying is do not provide foot guns, right? I don't want to give you
140:07 sharp knives. You're a child. You can't handle a sharp knife. Here's a dull butter knife. Cut your damn steak,
140:14 right? That's a very frustrating experience. You want a sharp knife even though you might be able to cut yourself. I trust humans in the same way
140:21 that Matts trusts humans. Maybe you cut off a finger. All right, you're not going to do that again. Thankfully, it
140:27 was a virtual thing finger. It's going to grow back out. Your competence is going to grow. It's more fun to work
140:33 with sharp tools and that actually contributes to the the ramp that goes to infinity
140:39 to the learning value integrated systems. We kind of hit on that one. This is Rails is trying to solve the whole
140:44 problem of the web, not just one little component. It's not leaving you a bunch of pieces you have to put together
140:50 yourself. Progress over stability. You know what? If there's one that's dated, it's probably that one. At this stage,
140:57 Rails has been incredibly stable over many, many generations. The last major
141:03 release, Rails 8, was basically a no upgrade for anyone running Rails 7. Rail
141:09 7 was almost a no-up upgrade for anyone running Rails 6. I used to think it
141:14 required more churn to get progress to stay on the leading edge of new stuff.
141:21 And I wrote this before I experienced the indignity of the 2010s in the
141:27 JavaScript community where it seemed like stability was not just unvalued, it
141:33 was actually despised. That churn in and of itself was a value we should be pursuing that if you were still working
141:39 with the same framework 3 months later, you were an idiot. And I saw that and I actually recoiled and if I was going to
141:46 write the doctrine today, I'd write that differently. I wouldn't say progress over stability. Well, maybe that it'd be
141:52 a function of the the age of the programming language also maybe or a deeper understanding of the
141:59 problem. I think part of what's so fascinating about technology is that we have this perception that everything
142:04 constantly moves so fast. No, it doesn't. Everything moves at a glacial pace. There is occasionally a paradigm
142:13 shift like what's happening with AI right now. Like what h happened with the introduction of the iPhone in 2007, like
142:20 what happened with the internet in '95. That's basically the total sum of my career. Three things changed. Everything
142:27 else in between was incremental small improvements. You can recognize a Rails
142:33 application written in 2003. I know because the base camp I wrote back then is still operating, making millions of
142:40 dollars in ARR, surveys customers on the initial version that was launched back then. and it looks like the Rails code
142:46 if I squint a little that I would write today. So most things don't change even in computing and that's actually a good
142:52 thing. We saw with the JavaScript ecosystem what happens when everyone gets just mad about constant churn.
142:59 Things don't change that often. By the way, on that small tangent, you just sort of visibly verbally changed
143:05 your mind with the you of 15 years ago. Yes.
143:11 That's interesting. Have you have you noticed yourself changing your mind quite a bit over the years?
143:18 I would say oh yes and then also oh no in the sense that there are absolutely
143:23 fundamental things both about human nature about institutions about programming about business that I've
143:29 changed my mind on. And then I've also had experiences that are almost even more interesting where I thought I had
143:35 changed my mind and I tried it a new way realized why I had the original opinion in the first place and then gone back to
143:42 it. So it happens both ways. The an example of the later part for example was um managers at 37 signals. For the
143:50 longest time I would rail against engineering managers as an unnecessary
143:56 burden on a small or even mediumsized company. And at one point, I actually started doubting myself a little bit. I
144:02 started thinking like, you know what, maybe all programmers do need a one-on-one therapy session every week
144:08 with their engineering manager to be a whole individual. So, we tried that for a couple years where we hired some very
144:14 good engineering managers who did engineering management the way you're supposed to do it, the way it's done all over the place. And after that, I
144:22 thought like, no, no, I was right. This was correct. We should not have had managers. Um, not every programmer needs
144:29 a therapy session with an engineering manager every week. We don't need these endlessly scheduled huddles. We don't
144:36 need all these meetings. We just need to leave people the hell alone to work on problems that they enjoy for long
144:42 stretches of uninterrupted time. That is where happiness is found. That's where productivity is found. And if you can
144:48 get away with it, you absolutely should. Engineering management is a necessary evil when that breaks down. What's the
144:55 case for managers then? The case for managers is that if you do have a lot of people, there's a bunch of
145:01 work that kind of just crops up. The one-on-one is one example that programmers need someone to check in
145:06 with. There's another idealized version that someone needs to guide the career of juniors, for example, to give them
145:12 redirecting feedback and all this other stuff. And it's not that in the abstract
145:18 I don't agree with some of those things, but in practice I've found that they often create more problems that they
145:25 solve. And a good example here is can you get feedback from someone who's not
145:31 better at your job than you are? You can get some feedback. You can get feedback on how you show up at work. Are you
145:37 being courteous to others? Are you being a good communicator? Okay. Yes. But you can't get feedback on your work. And
145:43 that's more important. It's more important that you work under and with someone who's better at your job than
145:49 you are if you wish to progress in your career. And every single programmer I've ever worked with was far more interested
145:55 in progressing in their career on that metric, getting better at their craft, than they were in picking up pointers
146:02 that a middle manager could teach them. That's not saying that there isn't value in it. It's not saying there isn't value
146:08 in being a better person or a better communicator. Of course, there is all those things. But if I have to choose one or the other, I value competence
146:15 higher. Right? That's again, I cavit this a million times because I know what
146:20 people sometimes hear. They hear the genius asshole is just fine and that's great and you should excuse all sorts of
146:27 malicious behavior. Someone just really good at what they do. I'm not saying that at all. What I am saying is that
146:33 the history of competence is a history of learning from people who are better than you. And that relationship should
146:40 take precedence over all else. And that relationship gets put aside a bit when
146:45 engineering managers introduced. Now the funny thing is this conversation ties back to the earlier things we were
146:51 talking about. Most engineering managers are actually former programmers. They at least know programming to some extent.
146:56 But what I've seen time and again is that they lose their touch, their feel with it very very quickly and turn into
147:04 pointy-haired bosses very very quickly who are really good at checking for
147:10 updates just seeing where we are on uh project A here if you need anything or we ready to deliver to okay yes and also
147:18 no just shut up leave me the hell alone let me program and then I'll come up for air I'll talk with other programmers who
147:25 I can spar that we can learn something with, I can turn the problems over with and we can move forward. If you look
147:31 back on the history of computer industry, all the great innovation that's happened, it's all been done by
147:37 tiny teams with no engineering managers, just full of highly skilled individuals.
147:44 You've had uh John Karmag on here. I used to look up to its software so
147:49 much, not just because I loved Quick, not just because I loved what they were doing, but because he shared a bit about
147:54 how the company worked. There were no managers, or maybe they had one business guy doing some business stuff, but that
147:59 was just to get paid. Everything else was basically just designers and programmers, and there were about eight of them, and they created a goddamn
148:06 Quake, too. So, why do you need all these people again? Why do you need all these managers again? Um, I think again
148:13 at a certain scale, it does break down. It's hard to just have 100 thousand
148:18 programmers running around wild without any product mommies or daddies telling them what to do. I understand that. And
148:24 then even as I say that, I also don't understand it because if you look at something like Gmail, for example, there was like a side project done by Busher U
148:32 at Google at the time. So much of the enduring long-term value of even all
148:37 these huge companies were created by people who didn't have a goddamn manager. And that's not an accident.
148:43 That's a direct cause and effect. So, I've turned in some way even more militant over the years against this
148:49 notion of management, at least for myself and knowing who I am and how I want to work because the other part of this is I don't want to be a manager.
148:56 And maybe this is just me projecting the fact that I'm an introvert who don't like to talk to people in one-on-one calls every week. But it also
149:04 encapsulates how I was able to progress my career. I did not really go to the next level with Ruby or otherwise until
149:10 I had a door I could close and no one could bother me for six hours straight. So in companies probably one of the
149:18 reasons is it's very easy to hire managers and uh managers also
149:25 delegate responsibility from you. So if if you just have a bunch of programmers running around you're kind
149:30 of respons like you it's it's it's work. It's intellectual work to have to deal
149:36 with the the first principles of every problem that's going on. So managers like
149:41 you can like relax. Oh be taken care of. uh but they then hire their own managers
149:47 and it just multiplies and multiplies and multiplies. I would love it if some of the great companies we have uh in the
149:54 United States if there was like an extra side branch that we could always run maybe physicists can come up how to
150:01 split the simulation to where just all the managers are removed also just with
150:06 it just just in that branch just the PR and the comm's people also and even the lawyers just engineers and let's just
150:14 see and then we merge it back I've essentially run that branch at 37 signals for 20 years and I've
150:20 experimented with forking back on the other side. I've experimented with having a full-time lawyer on staff. I've
150:26 experimented with having engineering managers. And I can tell you life is much better at 50 60 people when none of
150:32 those individuals or none of those roles. It's never about the individuals. It's about the roles. None of those
150:38 roles are in your organization full-time. Occasionally, you need a manager. Occasionally, you need a
150:44 lawyer. I can play the role of manager. occasionally fine and then I can set it back down to
150:51 zero. It's almost like the like a cloud service. I want a manager service I can call on for seven hours this week and
150:58 then I want to take it down to zero for the next 3 months. Yeah, I read I don't know if this is still the case that Base Camp is an LLC
151:04 and doesn't have a CFO like a full-time accountant. Is that
151:09 what's funny is these days we do have a head of finance. We did not for the first
151:15 19 years of life I think. Um we got away with basically just having an accountant do our books in the
151:22 same way you do a small ice cream shop except we would over the times have done hundreds of millions of dollars in revenue. The scale seemed quirky and at
151:30 some point you can also fall in love with your own quirkiness to a degree that isn't actually healthy. And I've
151:35 certainly done that over time. And we should have had someone mount or count the beans a little more diligently, a
151:41 little earlier, which was part of a blessing of just being wildly profitable and selling software that can have
151:47 infinite margins. Basically, that you kind of can get away with a bunch of stuff that you perhaps shouldn't. What
151:53 partially taught me this lesson was when we realized we had not been collecting sales tax in different US states where
152:01 we had nexus. And it took us about two years and $5 million in settlements and
152:06 cleanups to get out of that mess. And after that, I went like, "Okay, fine. We can hire a finance person." Okay.
152:11 And we now have a wonderful finance person, Ron, who actually ended up replacing something else we used to
152:16 have. We used to have a full-time data analytics person who would do all sorts of insight mining for why are people
152:23 signing up for this thing. We ran that for 10 years and realized, you know what, if I can have either a data analytics person or an accountant, I'm
152:29 picking the accountant. I love this so much on so many levels. Can we just linger on that advice that you've given
152:35 that small teams are better? I think that's really less less is is is
152:43 more. What did you say before worse is better. Okay. I'm sorry. Worse is better on adoption with
152:49 technology a lot of times. Yeah. And I think actually comes out of the same thing. It comes out of the fact that many of the great breakthroughs are
152:57 created by not even just tiny teams but individuals. Individuals writing something and an individual writing
153:04 something on some parameter what they do is worse. Of course it's worse when one
153:09 person has to make something that a huge company have hundreds if not thousands of developers that they can have work on
153:16 that problem. But in so many other parameters that worseness is the value.
153:21 That less is the value. In getting real, which we wrote back in 2006, we talk
153:26 about this notion of less software. When we first got started with Base Camp back in 2004, people would ask us all the
153:33 time, "Aren't you petrified of Microsoft? They have so many more resources. They have so many more
153:38 programmers. What if they take a liking to your little niche here and they show up and they just throw a thousand
153:45 programmers at the problem? And my answer, perhaps partly because I was like 24, was first of all, no, no care
153:53 in the world. But the real answer was they're not going to produce the same thing. You cannot produce the kind of
153:59 software that Base Camp is with a team of a thousand people. You will build the kind of software that a thousand people
154:05 build and that's not the same thing at all. So so much of the main breakthrough
154:12 in both end user systems but also in open source systems in fundamental system they're done by individuals or
154:18 very small teams even all these classical histories of Apple has always
154:24 been like well it was a big organization but then you had the team that was actually working on the breakthrough it was four people it was eight people it
154:30 was never 200 and large team seems to slow things down
154:36 yes it's it's so fascinating thing and part of it is the manager thing cuz humans don't scale. Communication
154:43 between humans certainly don't scale. You basically get the network cost effect. Every time you add a new node,
154:50 it goes up exponentially. This is perhaps the key thing of why I
154:57 get to be so fond of having no managers at base camp because our default team size is two.
155:03 One programmer, one designer, one feature. When you're operating at that
155:08 level of scale, you don't need sophistication. You don't need advanced
155:13 methodologies. You don't need multiple layers of management because you can just do the magic of small teams is that
155:20 they just do. They don't have to argue because we don't have to set direction. We have to don't to worry about the road
155:26 map. We can just sit down and make something and then see if it's good. When you can get away with just making
155:31 things, you don't have to plan. And if you can get out of planning, you can follow the truth that emerges from the
155:40 code, from the product, from the thing you're working on in the moment. You know far more about what the great next
155:46 step is when you're one step behind rather than if you try 18 months in
155:51 advance to map out all the steps. How do we get from here to very far away? You
155:56 know what? That's difficult to imagine in advance because humans are very poor at that. Maybe AI one day will be much
156:03 better than it than us. But humans can take one foot or put one foot in front
156:08 of each other. That's not that hard. And that allows you to get away with all that sophistication. So the process just
156:15 become much simpler. You need far fewer people. It compounds. You need much less pro uh pro process. You need to waste
156:21 less time in meetings. You can just spend these long, glorious days and weeks of uninterrupted time solving real
156:28 problems you care about and that are valuable. And you're gonna find that that's what the market actually wants.
156:34 No one is buying something because there's a huge company behind it. Most of the time they're buying something
156:39 because it's good. And the way you get something good is you don't sit around and have a meeting
156:46 about it. You try stuff. You build stuff. It really is kind of incredible what one person, honestly, one person can do in
156:54 100 hours of deep work, of focused work, even less. So, I'll tell you this. I tracked
157:00 exactly the number of hours I spend on the first version of Base Camp. And I was doing this because at the time I was
157:06 working on a contract basis for Jason. He was paying me I was going to say $15
157:12 an hour. That's what I got paid when we first got started. I think he had bumped my pay to a glorious 25. But I was
157:17 billing him. And I know that the invoice for the first version of Base Camp was 400 hours. That's what it took for one
157:25 sole individual in 2004 to create an entire system that has then gone on to
157:31 gross hundreds of millions of dollars and continues to um do extremely well. One person, just me setting up
157:38 everything. Part of that story is Ruby, part of that story is Rails, but a lot of it is also just me plus Jason plus uh
157:45 Ryan plus Matt. That was the entire company at the time. And we could create something of sheer sustaining value with
157:54 such a tiny team because we were a tiny team. Not the spite of small is not a stepping stone. This is the other thing
157:60 that people get into their head. This is one of the big topics of a rework that
158:05 it gave entrepreneurs the permission to embrace being a small team. Not as a way
158:10 point, not as like I'm trying to become a thousand people. No, I actually like being a small team. Small teams are more
158:17 fun. If you ask almost anyone, I'm sure Toby would say this too, even at his scale, the sheer enjoyment of
158:25 building something is in the enjoyment of building it with a tiny team. Now, you can have impact at a different scale
158:31 when you have a huge company. I fully recognize that and I see the appeal of it. But in the actual building of
158:37 things, it's always small teams. Always. How do you protect a small team? Base camp has successfully stayed small. has
158:44 been the dragon you had to fight off that like basically you make a lot of money.
158:51 There's a temptation to grow. So how do you not grow? Don't take venture capital.
158:57 Okay, that's step one. Point number one. First of all, everybody takes venture capital. So you already you already
159:04 went. I mean that's been the the answer for the longest time because the problem isn't just venture capital. It's other
159:09 people's money. Once you take other people's money, completely understandably, they want a return and
159:15 they would prefer to have the largest return possible because it's not them sitting in the code. It's not them
159:20 getting the daily satisfaction out of building something, chiseling beautiful code poems out of the editor, right?
159:26 They don't get that satisfaction. They get the satisfaction maybe of seeing something nice put into the world. That's fair. But they certainly also get
159:33 a satisfaction of a higher return. And there is this sense certainly in venture capital stated in venture capital that
159:40 the whole point of you taking the money is to get to a billion dollars or more. Now the path to that usually does go
159:47 through running established playbooks and then when it comes to software the enterprise sales playbook is that
159:54 playbook. If you're doing B2B software, SAS, you will try to find product market
159:59 fit and the second you have it, you will abandon your small and medium-sized accounts to chase the big whales with a
160:05 huge sales force. And by then, you're a thousand people, and life sucks. Mhm. Uh that said, you you uh I mean,
160:12 people are just curious about this. I've gotten a chance uh to get to know Jeff Bezos. He invested in base camp
160:21 non-controlling. He bought secondaries. So this was the funny thing is that when
160:27 investing have these two dual meanings. Normally when people think about investing they think you're putting in
160:33 growth growth capital because you want the business to hire more people to do more R&D so they can grow bigger. Basis
160:40 didn't do that actually. He bought a ownership stake directly from Jason and I and 100% of the pro proceeds of that
160:48 purchase went into my and Jason's bank account. personal bank accounts. Not a single cent went into the account of the
160:55 company because we didn't need the money to grow. What we needed or what we certainly enjoyed was
161:02 to some extent maybe the vote of confidence, but more so the security of
161:09 taking a little bit off the table is that we dare turn down the big bucks from venture capitals. It was
161:15 essentially a vaccine against wanting to take a larger check from people who then
161:20 wanted to take the company to something enormous that we didn't want to go with it. So Jeff
161:26 gave Jason and I just enough money that we were comfortable turning all those people down in a way where if it had
161:33 turned belly up like 6 months later we wouldn't have been kicking ourselves and calling we had something here that was
161:39 worth millions and now we have nothing and I have to worry about rent and groceries again.
161:44 I it is a vote of confidence. I wonder from uh I'd love to hear Jeff's side of the story of like why cuz he he he
161:53 doesn't need like the money. So, it's really I think it probably is just believing in people and wanting to
162:00 have cool stuff be created in the world and make money off of it, but not like 100% the motivation for Jeff wasn't a
162:08 return because he actually has a team, he's private office that runs these
162:14 investments who did the calculus on the investment pitch we gave him, which was
162:19 so ridiculous that Jason and I were laughing our asses off when we were writing down our metrics. I was like,
162:25 "No one's going to pay this. No one is going to give us this multiple of this amount of revenue." And that's fine. I
162:31 mean, we took the call essentially out of kind of an awe that Jeff Bezos even
162:37 wanted to look at us and like, do you know what? We don't want venture capital. We don't need other people's money, but like, let's just give him a
162:42 bullshit number that no sane person would actually say yes to. And then, I mean, we can we can each go our own way.
162:48 And his investment team said, like, Jeff, no way. This makes no economic sense at all. They're asking for way too
162:53 much money with way too little revenue. And Jeff just went like, "I don't care. I want to invest in these guy." Because
162:58 to him at the time, it was chump change, right? Like Jason and I each got a few million dollars. I mean, whatever the
163:05 currency swing between the yen and the dollar that day, probably moved 10x that for his net worth than our investment
163:12 did. Jeff seemed genuinely interested in being around interesting people,
163:17 interesting companies, helping someone go the distance. And I actually look
163:23 back on that relationship with some degree of regret because I took that
163:28 vote of confidence for granted in ways that I'm a little bit ashamed of over the years. I've been more critical about
163:35 some of the things that Amazon had done that I feel now is sort of justified. So
163:41 that's just sort of part of that processing um of it. But on the economic sense, he gave us that confidence. He
163:49 gave us the economic confidence, but then he also gave us the confidence of a CEO running perhaps at the time the most
163:55 important internet business in the US, showing up to our calls, which we would
164:00 have with him like once a year and basically just going like, "Yeah, you guys are doing awesome stuff. You should
164:06 just keep doing awesome stuff. I read your book. It's awesome. You launched this thing. It's awesome. You should just do more of that. I don't actually
164:11 know how to run your business. You guys know." So the book goes out because I'm I'm just so from a fan perspective
164:18 am curious about how Jeff Bezos was able to see because to me you and Jason are like special humans in the space of tech
164:25 and the fact that Jeff was able to see that right. How hard is it to see that? He certainly saw it very early and I
164:31 think this is something that Jeff does better than almost anyone else. he spots that opportunity so far in advance of
164:38 anyone else even open their eyes to it or certainly he's willing to bet on it far early and far harder than anyone
164:44 else is and he's just right time and again I mean we were not the only investment that he made and certainly
164:50 Amazon had a extremely long-term vision
164:56 so far longer than I have ever had the gumption to keep like I think of myself
165:01 as a long-term thinker I'm playing a child's game compared to the game that Jeff is playing. Like when I looked at
165:08 Amazon's economics around the dot boom and bust, they looked ridiculous. Like they were losing so much money. They
165:14 were so hated by the market. They were no one believed that it was going to turn into what it is. But Jeff did in a
165:20 way that that level of conviction I really aspire to. And I think that's one of the main things I've taken away from
165:26 that relationship is that you can just believe in yourself to that degree
165:32 against those odds. That's ridiculous. He did that at so many times our level
165:38 that it's pathetic if I'm doubting myself. Yeah, I think Amazon is one of those
165:45 companies. I mean, it's come under a bunch of criticism over the years.
165:51 Uh this is something about humans that don't appreciate so much that we take for granted the positive that a thing
165:57 brings real quick and then we just start criticizing the thing. It's with the Wi-Fi and the airplanes.
166:03 That's exactly it. But I think I think Amazon there could be a case made that Amazon is
166:12 one of the greatest companies in the last hundred years. For sure. I think it's an easy case to
166:17 make. What I also think is that the price you pay to be one of the greatest
166:22 companies in the last hundred years is a lot of detractors, a lot of push back, a
166:28 lot of criticism that this is actually order restored in the universe. One of my favorite teachers in all the time
166:34 I've been on the internet is Kathy Sierra. I don't know if you know her work, but she was actually for only a
166:40 few short years before the cruel internet ran her off, but she wrote a blog called creating passionate users.
166:47 And she carved into my brain this notion of balance in the universe. If you're
166:53 creating something of value that a lot of people love, you must create an equal
166:59 and opposite force of haters. You cannot have people who love what you do without also having people who hate what you do.
167:06 The only escape from that is mediocrity. If you are so boring and so uninteresting that no one gives a damn
167:12 whether you exist or not, yeah, you don't get the haters, but you also don't get the impact of people who really enjoy your work. And I think Amazon is
167:20 that just at the massive scale, right? They've brought so much value and change to technology, to commerce that they
167:28 must simply have a black hole size of haters, otherwise the universe is simply going to tip over. Uh let me ask you
167:35 about small teams. So you mentioned Jason a bunch of times. Jason Freed, you have been partners for a long long time.
167:42 Perhaps it's fair to say he's more on the sort of the design business side. You're like the tech the engineering
167:49 wizard. Uh how have you guys over all these years creating so many amazing products not murder each other? It's
167:56 it's a great story of like partnership. What's what can you say about collaboration? What can you say that
168:02 about Jason that that that you love that you've learned from? Uh why does this work?
168:08 So first I'll say we have tried to murder each other several times over the years but far less I think in the last
168:14 decade. In the early days, our product
168:19 discussions were so fierce that when we were having them in the office and there
168:25 were other employees around, some of them were legitimately worried that the company was about to fall apart because
168:31 the volume coming out of the room would be so high and sound so acrimonious
168:39 that they were legitimately worried the whole thing was going to fall apart. But you know what's funny is that it never
168:44 felt like that in the moment. It always felt like just a peak vigorous search
168:50 for something better. And that we were able to stomach that
168:58 level of adversity on the merits of an idea because it was about the idea. It
169:05 wasn't about the person. And it never really got personal. Not even never
169:11 really. It didn't get personal. It wasn't like, Jason, you're an asshole. It was like, Jason, you're an idiot, and
169:17 you're an idiot because you're looking at this problem the wrong way, and let me tell you the right way to do it. As a small tangent, let me say that some
169:23 some people have said, we'll probably return to this, that uh you're sometimes
169:29 uh uh can have flights of uh temper on the internet and so on. I I never take
169:36 it that way because it is the same kind of ilk. Maybe I haven't seen the right kind of uh uh traces of temper, but
169:43 usually it's about the idea and it's just excited, passionate, human. That's ex exactly what I like to think
169:48 of it as. It doesn't always come across as that. And I can see why spectators in particular sometimes
169:55 would see something that looks like I'm going after the man rather than the ball. And I I do think I've tried to get
170:02 better at that. But in my relationship with Jason, I think it's worked so well because we have our own distinct areas
170:09 of competence where we fully trust each other. Jason trusts me to make the correct technical decisions. I trust him
170:16 to make the correct design and product direction decisions and then we can overlap and share on the business, on
170:23 marketing, on writing, on other aspects of it. So that's one thing is that if
170:29 you're starting a business with someone where you do exactly the same as they do and you're constantly contesting who is
170:35 the more competent person, I think that's far more difficult and far more volatile. So if you're starting a
170:41 business and you're both programmers and you both work on the same kind of programming,
170:46 ah good luck. I think that's hard. I tried to pick an easier path working
170:51 with a designer where I knew that at least half of the time I could just delegate to his experience and
170:58 competence and say like you know what I may have an opinion I have an opinion all the time on design but I don't have
171:04 to win the argument because I trust you. Now occasionally we would have overlaps
171:09 on business or direction where we'd both feel like we had a strong stake in the game and we both had a claim to
171:16 competence in that area. But then for whatever reason, we also both had a
171:22 long-term vision where I would go, do you know what? I think we're wrong here. But as I learned from Jeff Bezos, by the
171:27 way, I'm going to disagree and commit. That was one of those early lessons he gave us that was absolutely crucial and
171:33 perhaps even instrumental in ensuring that Jason and I have been working together for a quarter of a century.
171:39 Disagree and commit is one of the all-time Jeff Bezos greats. I'm just surprised that Yokoono hasn't
171:45 come along. You know what I mean? like there there's there's so many yokos in this world.
171:52 It might have happened if not in part because we don't sit on each other's lap
171:57 all the time. Most of our careers we haven't even lived in the same city.
172:02 Like I lived in Chicago for a couple of years while we were getting going after I'd moved to the US in 2005. But then I
172:08 moved to Malibu and then I lived in Spain and then I lived in Copenhagen and Jason Ry from the foundation of our
172:15 relationship learned how to work together in a remarkably efficient way where we didn't
172:21 have to actually talk that much on any given week. I'd be surprised if Jason and I spent more than 2 hours of direct
172:30 exchange and communication. Yeah. Sometimes it's the the basic human
172:35 frictions that just up against another person, that person damn well better be
172:41 your spouse if it's too much for too long. Yeah. But even there co co has really test the relationship.
172:47 It's fascinating to watch. It has and I do think that having some separation which is kind of counterintuitive because I think a lot
172:54 of people think the more collaboration you can have the better. The more ideas they can bounce back and forth the
172:59 better. And both Jason and I for whatever reason came to the conclusion early on in careers absolutely not.
173:04 That's complete baloney. This is why we were huge proponents of remote work.
173:09 This is why I enjoy working in my home office where I can close the door and not see another human for like 6 hours
173:16 at the time. I don't want to bounce ideas off you all the time. I want to bounce ideas off you occasionally and
173:22 then I want to go off and implement those ideas. There's way too much bouncing going on and not enough
173:28 scoring, not enough dunking. And I think this is one of the great traps of
173:34 executive rule. Once a founder elevates themselves all the way up to an
173:39 executive where what they're doing is just telling other people what to do. That's the realm they live in 24/7. They
173:44 just live in the idea realm. Oh, I can just tell more people more things what to do and we can just see it happen. If you actually have to be part of
173:50 implementing that, you slow your horse. You think like, you know what, I had a good idea last week. I I'm going to save
173:56 the rest of my good ideas until next month. And there is a temptation for the managers and for the exe for the people
174:02 in the executive layer to do to do do something which that something usually
174:08 means a meeting. Yes. Right. And so that's why you say their job is telling other people what to do.
174:13 Yeah. And the meeting So this is one of the big things you're against is meetings are toxic.
174:19 Yeah. And this really I think ties into this with Jason Ry. If I had to count out the
174:24 total number of meetings we've had in 24 years of collaborations where we in person sat in front of each other and
174:30 discussed a topic, I probably it'd be less than whatever 3 months at a fan
174:36 company. We just haven't done that that much and we haven't worn it out. One of this funny metaphors that Trump came up
174:44 with at one point was a human has like a limited number of steps in their life, right? Like that's the longevity
174:50 argument here. You can do you can do so much activity and then you run out. There's some kernel in that idea that
174:55 can be applied to a relationship. There's some amount of exchange we can have. There's some amount of time we can
175:01 spend together where you can wear it out. Jason and I were diligent about not
175:07 wearing each other out. And I think that is absolutely key to the longevity of the relationship combined with that
175:13 level of trust. And then just combining with the level that we really like the work itself. We don't just like the
175:19 brainstorming, the the says where we just come up with good ideas. No, we like to do the ideas and we like to be
175:25 part of that process directly ourselves. I like to program. He likes to do design. We could go off and do our
175:31 little things for long stretches of time. Occasionally, come together and go like, "Hey, let's launch a great product." This might sound like I'm
175:38 asking you to do therapy. But I find myself to sometimes want or
175:44 long for a meeting because I'm lonely. Like cuz it remote work, just sitting by
175:51 yourself, I don't know. It can get really lonely for long stretches of time.
175:57 Let me give you a tip. Uhhuh. Get a wife.
176:02 God damn it. Get get a couple kids. All right. Like family really is the great antidote
176:07 to loneliness. And I mean that as sincerely as I can possibly say it. I certainly had exactly that feeling you
176:14 described earlier in my career when I was working remotely and I was just like me living in an apartment. A total
176:22 stereotype where for the longest time when I first moved to Chicago, all I had on the floor was a mattress and then I
176:28 bought this big TV and I didn't even mount it and then I had a stack of DVDs and I was basically I was working a lot
176:35 of time and then I would just go home and I'd do that and it wasn't great. It
176:40 really wasn't like I do think that humans need humans and if you can't get them at work and I
176:46 actually sort of kind of don't want them at work at least I don't want them for 40 hours a week that's not what I prefer. You need something else. You
176:52 need other relationships in your life and there is no greater depth of relationship if you can find someone
176:58 that you actually just want to spend a lot of time with. That's key to it. And I think it's key for both Jason and I
177:03 that we've had families for quite a long time. And it grounds you too in a way
177:09 where the sprint of a startup can get traded in for the marathon of an
177:16 enduring company and you get settled in a way. We talked briefly about sometimes
177:21 I get fired up. I mean, a lot of times, maybe even most of the times, I get fired up about topics,
177:26 but I don't get fired up in the same way now as I used to when I was 24. I'm
177:32 still extremely passionate about ideas and trying to find the right things. But having a family, meeting my wife,
177:39 building a life around that has just mellowed everything out in a completely
177:46 cliche way. But it I think it's actually key. I think if we could get more even
177:54 younger people not to wait until they were in their late goddamn 30s or early 40s to hitch up with someone, we'd be
178:02 better off and we'd have more stable business relationships as well because
178:07 folks would get that nurturing human relation somewhere else. Now, when I say all of that, I also accept that there
178:14 are plenty of great businesses that's been built over the years that have not been built remote, that have been built by a gang of hooligans sitting in an
178:22 office for immense hours of time. I mean, both John Carmarmac and Tim Sweeney talked about that in the '9s
178:28 with their careers that that was just basically work, sleep, hang out with the guys at the office, right? Totally fair.
178:35 That never appealed to me. Both Jason and I saw eye to eye on the idea that 40
178:40 hours a week dedicated to work was enough. That if we were going to go to distance for not just the 5 to seven
178:48 years it takes to build a VC case up to an exit but for potentially 10 years, 20
178:54 years or further. We needed to become whole humans because the only that whole
179:00 humanness was going to go to distance which included building up friendships outside of work, having hobbies,
179:09 finding a mate and having a family. And that
179:16 entire existence, those legs of the stool, that
179:21 work is not the only thing in life is completely related to the fact that we've been
179:27 around for 25 years. There's way too much, especially in America, of false
179:33 trade-offs. Oh, you want to build a successful business? Well, you can either have uh money, enjoyment, family,
179:39 or health. Pick one. What? Why do we have to give up all of this? Now again, I'm not saying that
179:46 there aren't moments payers in life where you can sprint, but I am saying if that sprint turns into a decade, you're
179:53 going to pay for it. And you're going to pay for it in ways I've seen time and again seemed like a very bad trade that
180:00 even if it works, and by the way, most of the time it does not. Most of the time startups go bust. Most of the time
180:06 people spend five, seven years or something that does not pan out and they don't get the payout and then they just
180:12 sit with regret of like what the fuck happened to my 20s. Early on, Jason and I basically made the
180:19 pact that working together was not going to lead to that kind of regret that we were going to allow ourselves and each
180:25 other to build a whole life outside of work. And
180:32 the fact that that worked is something I feel is almost like forbidden knowledge.
180:38 Certainly in technology circles in the US, it's something that we've tried to champion for 20 years and we still get
180:43 slacked for. Just two days ago, I had another Twitter beef with someone saying like, "Oh, well, okay, maybe it worked,
180:50 but you didn't turn into Atlassian, so you're a failure. You base camp isn't Jira, so why are you even bothering?"
180:56 And it's such a fascinating winner takes all mentality that unless you dominate
181:04 everyone else in all the ways, you've lost when so much of life is far more
181:11 open to multiple winners. Where we can end up with a business that have made
181:16 hundreds of millions of dollars over the years and we've kept much of that to do whatever we want. And that that's
181:23 enough. That's good. That's great. that's actually something worth aspiring to. Certainly,
181:31 it should be a path for someone to consider choosing rather than the VC
181:37 unicorn and bust mentality that dominates everything. Yeah. I'd love to ask you about this exchange so you can explain to me the
181:42 whole saga. But so just to link on that a little bit is I think there's a notion that success
181:50 for a tech founder is like work for a few years all out and then
181:58 uh exit sort of sell your company for I don't know hundreds of millions of dollars that's success when it seems in
182:05 reality when you look at who the people like you like really smart
182:11 creative humans who they actually are and what happiness entails.
182:16 It actually entails working your whole life a little bit. Just like cuz you actually love the programming, you love
182:23 the building, you love the designer, and you don't want to exit. And that's
182:28 something you've talked about really uh really eloquently about. So like you actually want to create a life where
182:34 you're always doing the building and doing it in a way that's not completely taken over your life.
182:40 Mojito Island is a mirage. It always was. There is no retirement for ambitious people. There is no just
182:46 sitting back on the beach and sipping a mojito for what? For two weeks before you go damn crazy and want to get back
182:53 into the action. That's exactly what happens to most people who have the capacity to build those kinds of exits.
183:00 I've never seen I shouldn't say never. I've almost never seen anyone be able to pull that off. Yet so many think that
183:08 that's why they're doing it. That's why they're sacrificing everything. Because once I get to the finish line, I'm
183:13 golden. I've won. I can retire. I can sit back. I can just relax. And you find out that that kind of relaxation is
183:21 actually hell. Yeah. It's hell for creative people to squander their god-given creative juices
183:29 and capacities. And I was really lucky to read the book
183:35 Flow by Mihi Chicken Mihayi early on. Nice. the pronunciations.
183:41 You know what? I had to practice that with AI over the last few days because I knew I was gonna cite him and I butchered his name several times. So, AI
183:48 taught me how to pronounce that um at least somewhat correctly. But his main
183:55 work over his career was essentially the concept of flow that came out of a search for
184:03 understanding happiness. Why are some people happy? When are they happy? And what he learned was quite illuminating.
184:09 He learned that people aren't happy when they sit on Mojito Island. They're not happy when they're free of all obligations and responsibilities. No,
184:16 they're happy in these moments where they're reaching and stretching their
184:22 capacities just beyond what they can currently do. In those moments of flow,
184:27 they can forget time and space. They can sit in front of the keyboard, program a
184:32 hard problem, think 20 minutes have passed, and suddenly it's been three hours. They look back upon those moments
184:38 with the greatest amount of joy. And that is what peak happiness is. If you take away the pursuit of those kinds of
184:46 problems, if you eliminate all the problems from your plate, you're going to get depressed. You're are not going
184:53 to have a good time. Now, there are people who can do that, but they're not the same kind of people who built these kinds of companies. So, you have to
184:59 accept the kind of individual you are. If you are on this path, don't bullshit
185:04 yourself. Don't bullshit yourself into thinking, I'm just going to sacrifice everything, my health, my family, my
185:10 hobbies, my friends, but in 10 years I'm going to make it all up because in 10 years I can do it. It never works out
185:16 like that. It doesn't even It doesn't work out on both ends of it. It does not work out if you're successful and you sell your company because you'll get
185:22 bored out of your mind after two weeks on retirement. It doesn't work out if the company is a failure and you regret
185:28 the last 10 years spent for nothing. It doesn't work out if it all works and you stay in the business because it never
185:34 gets any easier. So, you're going to fail on all metrics if you just go there's only work and nothing else. And
185:42 I didn't want that. I wanted the happiness of flow. I understood that
185:47 insight was true, but I wanted to do it in a way where I could sustain the journey for 40 or 50 years. And uh
185:54 there's another other interesting caveat that I've heard you say is that if you do exit, you sell your company and you
186:00 want to stay in, you want to do another company, that's going to usually not be as fulfilling.
186:06 Yes. Cuz really your first baby like you can't do it again or most people can't
186:12 do it again. A because their second idea is not going to be as good as the first one. It is so rare to capture lightning
186:19 in the bottle like we have for example with base camp. I know this from experience because I've been trying to build a lot of other businesses since
186:24 and some of them have been moderate successes, even good successes. None of them have been base camp. It's really
186:30 difficult to do that twice. But founders are arrogant pricks, including myself.
186:35 And we like to think that, do you know what? We succeeded in large part because we're just awesome. We're just so much
186:40 better than everyone else. And in some ways, that's true some of the time. But you can also be really good at something
186:46 that matters for a hot moment that that door is open, the door closes. Now you're still good at the thing, but it
186:53 doesn't matter. No one cares. There's that part of it. And then there's the part of it that
186:59 going back to experience things for the first time only happens the first time. You can't do it again. I don't know if I
187:06 have it in me to go through the bullshit of the early days again. And I say bullshit in the sense of the most
187:12 endearing sense. It's all great to do it. I know too much. This is one of the reasons why whenever I'm asked the
187:18 questions, if you could tell your younger self um something that would really What would you say to your
187:23 younger self? I would fucking not say a thing. I would not rob my younger self of all the life experiences that I've
187:29 been blessed with due to the ignorance of how the world works. Building up the wisdom about how the world works is
187:37 a joy. And you got to build it one brick at a time. If you just handed all the results, it's like, "Oh, should we watch
187:43 your movie?" Here's how it ends. I don't want to f watch the movie now. You You spoiled it. I don't want you to spoil my
187:50 business experience. I don't want to spoil any of my ignorance. The greatest blessing half the time when you're
187:56 starting something new is a you don't know how hard it's going to be. B, you don't know what you don't know. Like the
188:02 adventure is the payoff. The responsibility is the payoff. This is something Jordan Peterson has really
188:09 taught me to articulate this notion that responsibility is actually key to meaning. Um,
188:17 man's search for meaning. Victor Frankle talks about this as well that we can endure any hardship if there is a reason
188:24 why. Now he talked about it in truly lifealtering concentration camp ways but you can also
188:31 apply it at a smaller scale with less criticality of even just your daily life
188:36 that all that hardship in building the original business that is responsibility you take upon yourself the appeal the
188:44 reason you take that on you is in part because you don't know fully what it entails if you had known up front if id known up front how hard it would be how
188:51 much frustration there'd be along the way if you told me that in a narrative before I
188:56 got started, I would have been like, "Ah, maybe I should just go get a job." You said so many smart things there just
189:03 to pick one. It It's funny that sometimes the advice
189:08 givers, the wisdom givers are have gone through all the bullshit. And so there
189:15 is a degree to which you want to make the mistake. So I think I think I would still give the advice of you want to
189:22 have a stretch of your life where you work too hard including at a thing that
189:27 fails. I don't think you can learn the lessons why that's a bad idea in any other way except by doing it. There is a
189:35 degree but of course you don't I think you should stretch. Should you have to stretch for a decade? I'm not so
189:41 sure. Yeah. The decade thing is 20s is a special time. It's a lot to trade. You don't get your
189:46 20s back. You don't get your 30s back, you don't get your 40s back. You really I would have regretted personally if I
189:53 hadn't done the other things I did in my 20s. If I hadn't had the fun I had, if I hadn't have the friends I had, if I
189:58 hadn't built up the hobbies that I did, if I hadn't started driving race cars at an early enough age to actually get
190:04 really good at it. If I had just gone all in on business because I would have got the same out in the end. This is
190:11 something Derek Civers really taught me is he has this great essay about how
190:16 when he went for a bike ride, he could go really hard all out and he could do the ride I think in whatever 19 minutes
190:24 or he could enjoy the ride, go 5% slower, do the ride in 21 minutes
190:30 and realize there's only two minutes apart. Either I go all in all the time, there's nothing else. I'm completely
190:36 exhausted at the out end or I travel the same distance and I arrive maybe 2
190:41 minutes later but I got to enjoy the scenery, listen to the birds, smell the flowers. That journey
190:49 is also valuable. Now I say that while accepting and celebrating that if you
190:55 want to be the best at one thing in the world, no, you have to sacrifice everything. You have to be obsessed with
191:03 just that thing. There is no instant of someone who's the best in the world at something who's not completely obsessed
191:08 at. I didn't need the best at anything. This was a a blessing of a rare blessing
191:14 of humility I had early on is like, you know what, I am not that smart. I'm not that good. I'm not that talented. I can
191:20 do interesting things by combining different aspects and elements that I know, but I'm not going to be the best
191:26 at anything. And that released me from this singular obsession which is going
191:32 like I'm gonna be the best programmer in the world. I know I'm not. I fucking failed at it twice before I even got how
191:38 conditionals worked. I'm not smart enough to be the best at anything. I'm not dedicated enough to do that. That's
191:45 a bit of a blessing. And I think as a society we have to straddle both
191:50 celebrating peak excellence which we do all the time and celebrating the peak intensity
191:56 of mission it takes to become that and then also going like you know what we don't all need to be Michael Jordan.
192:03 There's only going to be one of those. Well we should say that there's certain pursuits where a singular obsession is
192:10 required. Basketball is one of them. by the way, probably racing. If you want to
192:15 be the best at F1 in the world, if you want to be Senna, you got to be a maniac.
192:20 But I would argue that there's most disciplines like programming
192:25 allows if you want to be quote unquote the best, whatever that means. I think that's judged at the end of your life.
192:32 And usually if you look at that path, it's going to be a nonlinear one. It you're not going to look like the life
192:37 of an Olympic athlete who singular focus. You're going to there's going to be some acid there in the 20s or there's
192:45 going to be a det several detours which the true greats there's going to
192:51 be detours and sometimes they're not going to be Steve Jobs asset type of situation. They'll be just different
192:58 companies you worked for, different careers or different uh sort of efforts
193:04 you allocated your life to. But it's going to be nonlinear. It's not it's not going to be a singular focus.
193:10 The way I think about this sometimes is I want a good bargain on learning. I can
193:15 become in the top 5% of whatever I defined as good at something
193:22 much much easier. Perhaps it's 20 times easier, 100 times easier to get into the top 5% than it is to get into the top
193:29 0.1%. That's almost impossibly hard to get into that. But if I'm content just
193:34 being in the top 5%, I can be in the top 5% on like five things at once. I can
193:39 get really good at writing. I can get decent at driving a race car. I can
193:45 become pretty good at programming. I can run a company. I can have a family. I can do a lot of things at the same time.
193:51 That gives me sort of that variety that almost um idealized K Marx has this
193:57 idea. Oh, I'm going to fish in the morning and uh hammer in the evening and paint on the weekends, right? That
194:03 there's a sense for me at least where his diagnosis of alienation was true. That just that tunnel vision, there's
194:10 just this one thing I'm just going to focus on that gives me a sense of alienation I can't stomach. When I'm
194:16 really deep on programming and sometimes I go deep for for weeks, maybe even in a few cases months, I have to come up for
194:23 air and I have to go do something else. like, "All right, that was programming for this year. I've done my part. I'm
194:29 going to go off riding or annoy people on the internet or drive some race cars or do something else and then I can do
194:36 the programming thing with full intensity again next year." Speaking of of annoying people on the internet, you got to explain to me this
194:42 drama. Okay, so what is this guy that said, "Imagine losing to Jira, but boasting that you have a couple million
194:48 dollars per year." So, this had to do with this almost now a meme decision to
194:54 leave the cloud. DHH left the cloud. I think that's literally a meme, but it's
195:00 also a fascinating decision. Can you talk to the full saga of DHA leaves the cloud?
195:08 Yes. Leaving AWS um saving money. And I guess the case this person is making no
195:14 is that we wasted our time optimizing a business that could have been 100 times bigger if we' just gone for the moon
195:20 and and for the moon includes venture capital other things includes
195:26 not caring about cost but also because AGI's around the corner you should have been investing into AI
195:31 right is this just part of sort of tangent I think it's a bit of a muddy argument but if we just take it at its peak ideal which I actually think is
195:40 a reasonable point is that you can get myopically focused on counting pennies
195:47 when you should be focused on getting pounds, right? That I've optimized our spend on
195:54 infrastructure by getting out of the cloud and that took some time and I could have taken that time and spent it
195:60 on making more features that would have attracted more customers or spend even more time with AI or done other thing.
196:06 Opportunity cost is real. I'm not denying that. I'm pushing back on the idea that for a company of our size,
196:15 saving $2 million a year on our infrastructure bill, which is about
196:21 somewhere between half to 2/3, goes directly to the bottom line, which means it's returned to Jason and I as
196:27 owners and our employees part of our uh profit sharing plan. It's totally worth
196:34 doing. This idea that costs don't matter is a very Silicon Valley way of thinking
196:40 that I again understand at the scale of something maybe but I also actually think it's
196:47 it's aesthetically unpleasing. I find an inefficient business as I find an
196:53 inefficient program full of line noise to just be a splinter in my brain. I
196:60 hate looking at an expense report and just seeing disproportionate waste. And
197:05 when I was looking at our spend at 37 Signals a while back a few years back, I
197:10 saw bills that did not pass my smell test. I remembered how much we used to
197:16 spend on infrastructure before the cloud and I saw numbers I could not recognize in proportion to what we needed. The
197:23 fact that computers have gotten so much faster over time. Shouldn't things be getting cheaper? Why are we spending more and more money servicing more
197:30 customers? Yes, but with much faster computers. Moore's law should be
197:35 lowering the cost. And the opposite is happening. Why is that happening? And that started a journey of unwinding
197:43 why the cloud isn't as great as the deal as people like to think that.
197:49 Yeah. Can we look at the specifics just to for people who don't know the story and then generalize
197:56 to what it means about the the the role of the cloud in in a tech business. So the specifics is you were using AWSS3
198:04 for we were using AWS for everything. Hey.com launched as an entirely cloud app. It was completely on AWS for
198:11 compute for databases for all of it. We're using all the systems as they're best prescribed that we should. Our
198:18 total cloud bill for Basecam. Our total spend with AWS was I think 3.2 million
198:26 or 3.4 million at its peak. That's kind of a lot of money. 3.4 million. I mean,
198:31 we have a ton of users and customers. But still, that just struck me as unreasonable. And the reason why I was
198:38 so unreasonable was because I had the pitch for the cloud ringing in my ears.
198:43 Hey, this is going to be faster. This is going to be easier. This is going to be cheaper. Why are you trying to produce
198:50 your own power? Like, do you have your own power plant? Why would you do that? Leave the
198:55 computers to the hyperscalers. They're much better at it anyway. I actually thought that was a compelling pitch. I
199:01 bought in on that pitch for several years and thought, do you know what? I'm done ever owning a server again. we're
199:07 just going to render our capacity and Amazon is going to be able to offer us services much cheaper than we could buy
199:15 them themselves because they're going to have these economies of scale. And I was thinking Jeff's word ringing uh my
199:22 competitor's margin is my opportunity. That was something he used to drive Amazon.com with that if he could just
199:28 make 2% when the other guy was trying to make 4% he would end up with all the money and on volume he would still win.
199:35 So I thought that was the operating ethos for AWS. It turns out that's not true at all. AWS by the way operates at
199:41 almost 40% margin. So just in that there's a clue that uh
199:47 competitors are not able to do the competitive thing we like about uh capitalism which is to lower costs and
199:53 so forth. So the cloud pitch in my optics are fun is fundamentally false.
199:60 It did not get easier. First of all, I don't know if you've used AWS recently. It is hella complicated. If you think
200:07 Linux is hard, you've never tried to set up AM rules or access parameters or whatever for AWS.
200:12 Yeah, AWS was always difficult. It was always clunk. Well, I think it's gotten even more difficult. But yes, now some of that is
200:19 it's difficult because it's very capable and you have a bunch of capacity on tap. And there are reasons. I don't think
200:24 they're good enough to justify how complicated the whole jing and majing has become. But what's certainly true is
200:30 that it's no longer easier is not easier to use AWS than it is to run your own
200:37 machines, which we learned when we pulled out of the cloud and didn't hire a single extra person. Even though we
200:42 operate all our own hardware, the team stayed exactly the same. So, you have this three-way pitch, right? It's going
200:48 to be easier. It's going to be cheaper. Certainly wasn't cheaper. We've just
200:53 proved that by cutting our spend on infrastructure by half to 2/3. And it's going to be faster. The last bit was
200:60 true, but way too many people overestimated the value of that speed.
201:05 If you need a thousand computers online in the next 15 minutes, nothing beats
201:11 the cloud. How would you even procure that? If we just need another 20 servers, it's going to take a week or
201:17 two to get boxes shipped on pallets delivered to a data center and unwrapped and racked and all that stuff, right?
201:24 But how often do we need to do that? And how often do we need to do that if buying those servers is way way cheaper
201:30 such that we get vastly more compute for the same amount of money? Could we just buy more servers and not even care about
201:36 the fact that we're not hyper optimized on the compute utility that we don't have to use things like uh automatic
201:42 scaling to figure things out because we have to reduce cost? Yes, we can. So we
201:48 went through this journey over a realization in early 2023
201:54 when I had finally had enough with our bills. I wanted to get rid of them. I wanted to spend less money. I wanted to
202:00 keep more of the money ourselves. And in just over 6 months, we moved seven major
202:06 applications out of the cloud in terms of compute, caching, databases, the works onto our own servers. A glorious,
202:13 beautiful new fleet bought from the king of servers, Michael Dell, who really, by
202:20 the way, is another icon of my I saw he just celebrated 41 years in business. 41 years this man has been selling awesome
202:28 servers that we've been using for our entire existence. But anyway, these pallets arrive in uh a couple of weeks
202:34 and we rack them up and get everything going and we were we were out at least with the computer part. We then had a
202:40 long uh multi-year commitment to S3 because the only way to get decent
202:45 pricing in the cloud, by the way, is not to buy on a day-to-day basis, not to
202:51 rent on a database basis, but to bind yourself up to multi-year contracts. With compute, it's often a year that was
202:58 in our case. And with storage was four years. We signed a 4-year contract to
203:03 store our pabytes of customer files in the cloud to be able to get something just halfway decent, affordable. So, all
203:11 of these projects came together to the sense that we're now saving literally millions of dollars, projected about 10
203:18 million over 5 years. It's always hard. How do you do the accounting exactly? And to this, that and the other thing,
203:24 but it's millions of dollars. But it's not just that. It's also the fact that
203:29 getting out of the cloud mean meant returning to more of an original idea of
203:34 the internet that the internet was not designed such that three computers
203:40 should run everything. It was a distributed network such that the individual nodes could disappear and the whole thing would still carry on. DARPA
203:47 designed this such that the Russians could take out Washington and they could still fight back from New York. that the
203:53 entire communication infrastructure wouldn't disappear because there was no hub and spoke. It was a network. I
203:59 always found that an immensely beautiful vision that you could have this glorious
204:04 internet and no single node was in control of everything. And we've returned to much more of a single node
204:11 controlling everything idea with these hyperscalers. When US East one, the main
204:17 and original region for AWS goes offline, which has happened more than a few times over the years, seemingly a
204:23 third of the internet is offline. Like that in itself is just an insult to DARPA's design. I it doesn't detract
204:30 from the fact that what AWS built was marvelous. I think the cloud has moved
204:35 so many things so far forward, especially around virtualization, automation, setup. It's all those giant
204:43 leaps forward for system administration that's allowing us now to be able to run
204:48 things on prem in a way that smells and feels much like the cloud just at half
204:54 the cost or less and with the autonomy and the satisfaction of owning hardware.
204:60 I don't know what the last time you looked at like an actual server and took it apart and looked inside of these
205:05 things are gorgeous. I mean, I posted a couple of pictures of our racks out in the data center, and people always go
205:11 crazy for them because we've gotten so abstracted from what the underlying metal looks like in this cloud age that
205:17 most people have no idea. They have no idea how powerful a modern CPU is. They
205:23 have no idea how much RAM you can fit into a oneU rack. Progress in computing
205:31 has been really exciting, especially I'd say in the last four to five years after TSMC with Apple's help really pushed the
205:38 envelope. I mean, we kind of sat still there for a while while Intel was spinning their wheels going nowhere and
205:44 then TSMC with Apple propelling them really moved things forward and now servers are exciting again. Like you're
205:51 getting jumps year-over-year in the 15 20% rather than the single digit we were
205:56 stuck with for a while. And that all means that owning your own hardware is a more feasible proposition than it's ever
206:02 been. That you need fewer machines to run ever more. And that more people should do it because
206:09 as much as I love Jeff and Amazon, like he doesn't need another whatever 40%
206:15 margin on all the tech stuff that I buy to run our business. And
206:22 this is just something I've been focused on both because of the ideology around
206:27 honoring DARPA's original design, the practicality of running our own hardware, seeing how fast we can push
206:34 things with the latest machines, and then saving the money. And that has all
206:40 been so enjoyable to do, but also so counterintuitive for a lot of people because it seemed I think for a lot of
206:46 people in the industry that like we'd all decided that we were done buying computers that that was something we would just delegate to AWS and Azure and
206:55 Google Cloud that we didn't have to own these things anymore. So, I think there's a little bit of whiplash for some people that, "Oh, I thought we
207:02 agreed. We were done with that." And then along come us and say, "Yeah, do you know what? Maybe you should have a
207:07 computer." Is there some pain points to running your own servers? Oh, plenty. There's pain points to operating computers of all kind. Have
207:14 you tried just like uh using a personal computer these days? Half the time when my kids or my wife uh have a problem, I
207:20 go like, "Have you tried turning it just off and on?" Again, computers are inherently painful to humans. Owning
207:26 your own computer though kind of makes some of that pain worth it. There's a responsibility that comes with actually
207:32 owning the hardware that to me at least make the burden of operating that hardware seem slightly more enjoyable.
207:38 Now there are things you have to learn certainly at our scale too. I mean we're not just buying a single computer and
207:45 plugging into an Ethernet. We have to have racks and racks of them and you got to set it up with network cabling and there is some specialized expertise in
207:51 that. But it's not like that expertise is like building nuclear rockets. It's
207:57 not like it's not widely distributed. Literally, the entire internet was built on people knowing how to plug in a
208:03 computer to the internet, right? Oh, Ethernet cable goes here, power cable goes here. Let's boot up Linux. That's
208:08 how everyone put anything online until 10, 12 years ago when the cloud sort of
208:14 took over. So, the expertise is there and can be rediscovered. You too can learn how to operate a Linux computer.
208:21 Yeah. And it's, you know, when you get a bunch of them, there's a bunch of flashing LEDs and it's just so exciting.
208:26 Beautiful, calming, amazing. Computers are really fun. This is actually something I've gotten into even deeper
208:32 after we moved out of the cloud. Now, my next kind of tingle is that if you could
208:39 move out of the cloud, can you also move out of the data center? Personal servers
208:45 have gotten really scarily quick and efficient. and personal internet
208:50 connections rival what we connected data centers with just a decade or two ago.
208:57 So there's a whole community around this concept of home lapping which is essentially installing server hardware
209:04 in your own apartment connecting it to the internet and exposing that directly
209:10 to the internet. that harks back to those glorious days of the '90s when people building for the internet would
209:16 host the actual website on their actual computer in the closet. And I'm pretty fired up about that. I'm
209:22 doing a bunch of experiments. I've ordered a bunch of home servers for my own apartment. I marvel at the fact that
209:28 I can get a 5 gigabit fiber connection now. I think do you know what 5 GB that
209:33 could have taken base camp to multiple millions of MR in the way that back then
209:40 I ran the whole business on a single box with 2004 technology and two probably
209:46 100 megabit cable like the capacity we have access to both in terms of compute
209:52 and connectivity is something that people haven't readjusted to and this
209:58 happens sometimes in technology where progress ever sneaks up on you. This happened with SSDs. I love that. By the
210:04 way, we designed so much of our technology and storage approach and database design around spinning metal
210:11 discs that had certain seek rate properties. And then we went to NVME and
210:18 SSDs. And it took quite a while for people to realize that the systems had
210:24 to be built fundamentally different now. that the difference between memory and disk was now far smaller when you
210:31 weren't spinning these metal plates around with a little head that had to read off them. You were essentially just
210:36 dealing with another type of memory. I think we're a little bit in that same phase when it comes to the capacity of
210:42 new businesses to be launched literally out of your damn bedroom. So, you can get pretty far with a large
210:48 user base with home labbing. Absolutely. That's exciting. That's like the old
210:53 school That's really exciting. It's bringing back the startup in the garage
210:58 in the literal physical sense of the word. Now, some of that is, do we need to? You can get relatively
211:05 cheap cloud capacity if you don't need very much. Hell yes, we need to. I mean, the feeling of doing that by yourself, of
211:12 seeing LED lights uh in your own home. I mean, there's nothing like that.
211:17 There's just an aesthetic to it that I am completely in love with and I want to try to push on. Now, is that going to be
211:23 the same thing as getting out of the cloud? I'm not sure. Our exit out of the cloud was not the exit out of the data center. We basically just bought
211:28 hardware, shipped it to a professionally managed data center that we didn't even
211:34 actually touch. This is the other misconception people have about moving out of the cloud that we have a bunch of people who are constantly driving to a
211:39 data center somewhere to rack new boxes and change dead RAM. That's not how things happen in the modern world at
211:45 all. We have a company called Summit, previously deaf, that is what we call
211:52 white gloves. They just they work in the data center. When we need something like, hey, hey, deaf, can you uh go down
211:57 and uh swap the debt SSD in box number six, they do it. And what we see is akin
212:04 to what someone working with the cloud would see. You see IP addresses coming online. You see drives coming online.
212:09 It's not that different, but it is a whole heck of a lot cheaper when you are operating at our scale. And of course it
212:16 is. Of course, it's cheaper to own things if you need those things for years rather than it is to rent it. In
212:23 no other domain would we confuse those two things that it's cheaper to own for the long duration than it is to rent.
212:29 There is some gray area like I've gotten a chance to interact with the XAI team a bunch. I'll probably going back out
212:35 there in Memphis to do a big podcast associated with the Grock release. And those folks in order to achieve the
212:42 speed of building up the the cluster and to solve some of the novel aspects that
212:48 have to do with the GPU with the with the training, they have to be a little bit more hands-on. It's a less white
212:53 glove. Oh, and I love that. Right. They're dealing with a frontier problem and they're dealing with it not by
212:58 rending a bunch of GPUs at a huge markup from their main competitor. They're going like, "No, screw that. We're going
213:04 to put 100,000 GPUs in our own tents, right, and build it in absolute record
213:10 time." So, I think if anything, this is testament to the idea that owning hardware can give you an advantage both
213:16 at the small scale, at the medium scale, and at the pioneer levels of computing. By the way, you know, speaking of teams,
213:22 that those are XAI, Tesla are um large companies, but all those folks,
213:30 I don't know what it is about. You said Jeff is really good at finding good people,
213:37 at seeing seeing strength in people. Like Elon is also extremely I don't know what that is. Actually, I I've never
213:44 actually seen maybe you could speak to that. He's good at finding greatness. I
213:49 don't think he's finding as much as he's attracting. He's attracting the talent because of
213:54 the audaciousness of his goals and his mission. The clarity by which he states
213:59 it. He doesn't have to go scour the earth to find the best people. The best people come to him because he is talking
214:07 about Elon here. One of the singular most invigorating figures in both the
214:12 same order of the universe here. Haters and lovers, right? Like he's having such an impact at such a scale that of course
214:18 he's got to have literally millions of people think he's the worst person in the world. And he's also
214:25 going to have millions of people thinking he's the greatest gift to humanity depending on the day. I'm somewhere in between, but I'm more on
214:31 the greatest gift to humanity end of the scale than I'm on the others end of the scale. And I think that really inspires
214:38 people in a way that we've almost forgotten that that level of audacity is
214:44 so rare that when we see it, we don't fully know how to analyze it. We think of Elon as
214:49 finding great talent. And I'm sure he's also good at that. But I also think that this beacon of the mission, we're going
214:56 to fucking Mars. We're going to transform transportation
215:02 into using electricity. We're going to cover the earth in internet is so grand
215:08 that there are days where I wake up and go like, "What the fuck am I doing with these to-do lists?" Like, Jesus, should I go sign up for
215:16 something like that? That sounds invigorating in a sense I can only imagine like a Viking back in
215:23 1050 going like, "Should we go to Normandy? You may die along the way, but
215:28 oh boy does that sound like a journey and an adventure. There's a few components there. One definitely this bigger than life mission
215:35 and really believing it. You know, every other sentence is about Mars. Like
215:40 really believing it. It doesn't really matter what like anybody else the criticism anything there's a very
215:47 singular focused big mission. But I think it also has to do a bunch of the other components like being able to hire
215:55 well once the people once the beacon attracts. And I've just seen people that
216:01 don't necessarily on paper have a resume with a track record. I've I've seen
216:07 really who now turned out to be like legendary people. He basically like
216:12 tosses them the ball of leadership. Yes. sees something in them and says like you go and gives them the ownership and they
216:19 run with it and that that happens at every scale that there's a real meritocracy and like there's something
216:27 uh there's there's just like you could see the flourishing of human intellect in these meetings in these group getting
216:33 together where they're like the energy is palpable. It's it's it's like exciting for me to just be around that
216:41 cuz I don't I there's not many companies I've seen that in because when a company becomes successful and larger, it
216:48 somehow suffocates that energy that I I guess you see in startups
216:53 at the early stages, but like it's cool to see it at at a large company that's
216:59 actually able to achieve scale. You know, I think part of the secret there is that
217:05 Elon actually knows things. And when you know things, you can evaluate the
217:11 quality of work products. And when you can evaluate the quality of work products, you can very quickly tell
217:16 who's full of shit and who will actually take you to Mars. And you can fire the people who's full of shit and you can
217:22 bet on the people who get us to Mars. That capacity to directly evaluate the
217:27 competency of individuals is actually a little bit rare. It's not
217:34 widely distributed amongst managers, hiring managers. It's not something you
217:39 can easily delegate to people who are not very skilled at the work itself. And
217:46 Elon obviously knows a lot about a lot and he can smell who knows stuff for
217:52 real. And is this at our tiny scale. Something I've tried to do in the same
217:57 order where when we hire programmers, for example, it's going to be interesting now with AI as a new
218:03 challenge. But up until this point, the main pivot point for getting hired was
218:09 not your resume, was not the schooling you've had, was not your grades, was not your pedigree. It was how well you did
218:16 on two things. A, your cover letter, because I can only work with people remotely if they're good writers. So if
218:23 you can't pen a proper capital letter and can't bother to put in the effort to write it specifically for us, you're
218:29 out. Two, you have to be able to program really well to the degree that I can
218:35 look at your code and go like, "Yeah, I want to work with that person." Not only I want to work with that person, I want to work on that person's code when I
218:41 have to see it again in five years to fix some damn bug. So we're going to give you a programming test that
218:47 simulates the way we work for real and we're going to see how you do. And I've been surprised time and again where I
218:54 thought for sure this candidate is a shoein. They sound just right. The CV is
218:59 just right. And then you see the code getting turned in. I'm like, no way. No way are we hiring this person. And the
219:07 other way has been true as well. I've like I don't know about this guy or this this woman.
219:13 I don't know. And then they turn in their coach stuff and they're like, holy shit, can that person be on my team tomorrow? Preferably the capacity to
219:21 evaluate work product is a superpower when it comes to hiring. There's a step that I've seen Elon do
219:26 really well which is be able to show up and say this can be done simpler.
219:31 Yes. And but he knows what he's talking about and then the the engineer because Elon
219:37 knows enough the engineer who first reaction you can kind of tell like it's
219:42 almost like rolling your eyes if your parent tells you something. Yes. this this is not no we've I've been
219:49 working on this for a month you don't know but then when you have that conversation a little more you realize
219:55 no it can be done simpler find the way so there's a good when two engineers are
220:01 talking one might not have perfect information but if if if the senior
220:06 engineer has like good instinct that's like been battle earned
220:13 then you can say simplify and it it it actually will result and simplification
220:18 and I think this is the hallmark of the true greats that they not only have the insight into what's required to do the
220:25 work but they also have the transc transcendent vision to go beyond what
220:31 the engineer would do the programmer would do I think if we're looking at these rarities obviously the myth of
220:40 Steve Jobs was also this even though perhaps he was less technical than Elon
220:45 is in many ways He had the same capacity to show up to a product team and really
220:51 challenge them to look harder for the simplification or for making things greater in a way that would garner
220:58 disbelief from the people who are supposed to do it. Like this guy is full of shit. Like this is crazy. We can never and then two months later it is.
221:06 So there is something of this where you need you need the vision. You need it
221:11 anchored by the reality of knowing enough about what's possible. knowing enough about physics, knowing enough
221:17 about software that you're not just building bullshit. There are plenty of people who can tell a group of
221:22 engineers, "No, just do it faster." Like, that's not a skill. It's got to be anchored in something real. But it's
221:28 also got to be anchored in it's a tired word, but a passion for the
221:35 outcome to a degree where you get personally insulted if a bad job is done. This is what I've been writing
221:41 about lately with Apple. They've lost that asshole who would show up and tell
221:46 engineers that what they did was not good enough in ways that would actually
221:52 perhaps make them feel a little small in the moment, but would spark that
221:58 zest to really fix it. And now they have a logistics person who's very good at
222:05 sourcing components and lining up production Gant charts,
222:10 but you're not getting that magic. Now, what's interesting with that whole scenario was I actually thought how well
222:17 Tim Cook ran things and has run things at Apple for so long that maybe we were wrong. Maybe we were wrong about the
222:24 criticality of Steve Jobs to the whole mission. Maybe you could get away with not having it. I think the bill was just
222:31 going to come later and now it has. Apple is failing in all these ways that
222:37 someone who would blow up Steve's ghost and really exalt him would say like see
222:43 this is what's happening now. So the other thing here too of course is it's impossible to divorce like your
222:49 perception of what's a critical component of the system and the messy reality of a million different moving
222:55 parts in the reality of life and you should be skeptical about your own analysis and your own thesis at all
223:01 time. Since you mentioned Apple, have to ask. Uh somebody in the internet
223:07 uh submitted the question. Uh does DHA still hate Apple? I believe
223:13 the question is um so there was a time when Basecam went to war with Apple over
223:21 the 30%. What's Can you tell the saga of that battle? Yes. But first, I'll tell you how I fell
223:28 in love with Apple, which was all the way back in also early 2000s
223:34 when Microsoft was dominating the industry in a way we now see Apple and
223:41 Google dominate mobile phones. Microsoft was just everything when it came to personal computers. And I really did not
223:47 like the Microsoft of the '90s. The Microsoft of the '90s was the cut off the air supply to Netscape kind of
223:54 characters. was the Bill Gates sitting defiant in an interview with the DOJ
224:00 asking about what the definition of what is and just overall unpleasant. I think
224:07 you can have respect for what was achieved, but I certainly didn't like it. And as we've talked about, I came
224:12 begrudgingly to the PC after Commodore fell apart and I couldn't continue to use the AmIGGA. So, I already had a bit
224:19 of a bone to pick with PCs just over the fact that I love my Amigga so much. But
224:24 then in the early 2000s, Apple emerged as a credible alternative because they
224:29 bet the new generation of Macs on Unix underpinnings and that allowed me to escape from
224:37 Microsoft and suddenly I became one of the biggest boosters of Apple. I was in
224:42 my graduating class at the Copenhagen Business School. I started with the
224:48 first white iBook, first person using Mac. And by the time we were done and graduating, I had basically converted
224:54 half the class to using Apple computers because I would evangelize them so hard and demonstrate them and do all the
225:02 things that a super fan would do. And I continued that work over many years.
225:07 Jason or I actually in I think 2004 2005 did an ad for Apple that they posted on
225:13 the developer site where we were all about like Apple is so integral to everything that we do and we look up to them and we are inspired by them and
225:21 that love relationship actually continued for a very long time. I
225:26 basically just became a Mac person for 20 years. I didn't even care about
225:32 looking at PCs. It seemed irrelevant to me whatever Microsoft was doing which felt like such a relief because in the
225:39 90s I felt like I couldn't escape Microsoft and suddenly I had found my escape and now I was with Apple and it
225:44 was glorious and they shared so many of my sensibilities and my aesthetics and they kept pushing the envelope and there was so much to be proud of so much to
225:51 look up to and then that sort of started to change with the iPhone which is weird because
225:58 the iPhone is what made modern Apple. It's what I lined up in 2007 together
226:04 with Jason for 5 hours to stand in the line to buy a first generation product
226:10 where Apple staff would clap at you when you walked out of the store. I don't know if you remember that. It was it was
226:16 a whole ceremony and it was part of that myth and mystique and awe of Apple. So,
226:24 I just I wasn't in the market for other computers. I wasn't in the market for other computer ideas. I thought perhaps I'd be with the Mac until the end of
226:30 days. But as Apple discovered the gold mine it is to operate a toll booth where
226:38 you don't have to innovate, where you don't actually even have to make anything, where you can just take 30% of
226:44 other people's business. There was a rot that crept in to the foundation of Apple
226:51 and that started all the way back from the initial launch of the app store. But I don't think we saw at the time, I
226:57 didn't see at the time, just how critical the mobile phone would become to computing in general. I thought when
227:04 the iPhone came out that like, oh, it's like a mobile phone. I've had a mobile phone since the early '9s. Well, it
227:09 wasn't a mobile phone. It was a mobile computer. And even more than that, it was the most important computer or it
227:15 would become the most important computer for most people around the world, which meant that if you like to make software
227:21 and wanted to sell it to people, you had to go through that computer. And if going through that computer meant going
227:28 through Apple's toll booth and not just having to ask them permission, which in
227:33 and of itself was just an indignity when you're used to the internet where you don't have to ask anyone permission
227:39 about anything. You buy a domain and you launch a business and if customers show up, boom, you're success. And if they
227:46 don't, well, you're a failure. Now, suddenly, before you could even launch, you'd have to ask Apple for permission.
227:52 That always sat wrong with me. But it wasn't until we launched Hey in 2001
227:60 that I saw the full extent of the rot that has snug into Apple's apple.
228:05 For people who don't know, and we'll talk about it, hey is this amazing email
228:11 sort of attempt to solve the email problem. Yes. I like to pitch it as what Gmail
228:18 would have been with 20 years of lessons applied in a way where they could actually ship. Gmail was incredible when
228:24 it launched in 2004. And it still is a great product, but it's also trapped in
228:30 its initial success. You can't redesign Gmail today. It just has way too many
228:36 users. So, if you want fresh thinking on email, I wanted fresh thinking on email.
228:41 I needed to build my own email system and not just my own email client. That's what a lot of people have done over the years. They build a client for Gmail,
228:48 but you're severely constrained if you don't control the email server as well. If you really want to move the ball
228:54 forward with email, you have to control both the server and the client. And that was the audacious mission we set out to
228:59 do with Hey. And that was what's funny. I thought our main obstacle here would
229:05 be Gmail. It's the 800 pound gorilla in the email space. something like 70% of
229:11 all email in the US is sent through Gmail. I think their world rates are probably in that neighborhood as well. They're
229:17 just absolutely huge and trying to attack an enormous
229:25 established competitor like that who's so actually still loved by plenty of
229:31 people and is free seems like a suicide mission. And it was only a mission we signed up for because we had grown
229:38 ambitious enough after making Basec camp for 20 years that we thought we could tackle that problem. So I thought, hey,
229:44 this is dumb. I would not advise anyone to go head tohead with Gmail. That seems
229:51 like a suicide mission. We're going to try anyway because you know what? If we fail, it's going to be fine. We're just going to build a better email experience
229:57 for me and Jason and the people at the company and our cat, and that'll be okay because we can afford to do so. But when
230:04 we got ready to launch after spending two years building this product, millions of dollars in investment to it,
230:11 we obviously needed mobile apps. You're not going to be a serious contender with email if you're not on a mobile phone,
230:17 and you need to be there with a native client. So, we had built a great native client for both iOS and for Android. And
230:23 as we were getting ready to launch, we submitted both of them to the app stores, got both of them approved on, I
230:28 think Friday afternoon for the iOS app. And we then went live on Monday and we
230:35 were so excited. Hey world, we've been working on this new thing. I'd love for you to check it out. And of course, as
230:43 with anything, when you launch a new product, there are some bugs. So, we quickly found a few in the iOS client
230:48 and submitted a new build to Apple. Hey, here's our bug fixes. can you please update? And that's when all the
230:54 help broke loose. Not only were they not going to approve our update, they said, "Oh, wait a
231:01 minute. We gave you permission to be in the app store, but I'm sorry. That was a mistake. We see that uh you're not using
231:07 our inapp payment system, which means that we don't get 30% of your business.
231:13 You will have to rectify that or you can't be in the app store." At first, I thought like, well, it got approved
231:19 already. We're running on the same model we've run base camp on in the app store for a decade. If you're not signing up
231:26 through the app and we're signing up our own customers on our own website and they're just going to the app store to
231:31 download their companion app, we're going to be fine. That was the truth, right? That was why I never got so fired
231:37 up about the app store even as Apple started tightening the screws was like my business was okay. Now suddenly my
231:43 business wasn't okay. Apple was willing to destroy hay if we did not agree to
231:50 give them 30% of all the signups that came through the iOS app. And it wasn't
231:55 just about the 30%. It was also about splitting and not longer having a direct
232:01 relationship with our customers. When you sell an app in the app store, you're not selling an app to a customer. You're
232:07 selling an app to inventory at Apple and then Apple sells an app to that customer. that customer has a purchasing
232:15 relationship with Apple. So if you want to give discounts or refunds or whatever, it's complete hell. If you
232:22 want to easily support multiplatform, that's complete hell. If someone signs up for Hey, on their iPhone and they
232:29 want to switch to Android, but that billing relationship, it's tied to Apple, it's complete hell. For a million
232:35 reasons, I did not want to hand my business over to Apple. I did not want to hand 30% of our revenue over to
232:41 Apple. So, we decided to do something that seemingly Apple had never heard before. We said, "No, we're not going to
232:49 add the inapp payment. I don't care if you're threatening us. This this is not
232:55 fair. This is not reasonable. Please approve." And of course, they
233:01 didn't. And it escalated. And after a couple of days, we realized, you know what? This isn't a mistake. This isn't
233:08 going away. we're going to be dead if they go through with this. If we're not going to yield and give them the 30%.
233:16 They're going to kick us off unless we make such a racket, such noise that
233:24 they will regret it. And that's exactly what then happened. We were blessed by the fact that we launched Hey, one week
233:30 before the WWDC, their worldwide developer conference where Apple loves to get up on stage and harp on how much
233:38 they do for developers, how much they love them, and why you should build for their new devices and so on and so
233:43 forth. And then we also just happen to have a platform on the internet which is very uh convenient when you need to go
233:49 to war with a $3 trillion company. So I started kicking and screaming and
233:55 essentially turning it up to 11 in terms of the fight and going public with our
234:03 denial to be in the app store. And that turned into a prolonged twoe battle with Apple that essentially ended in the best
234:11 possible outcome we could have gotten as David fighting Goliath, which was a bit of a truce. We wouldn't hand 30% over to
234:19 Apple. they wouldn't kick us out of the app store, but we had to build some bullshit
234:25 dummy account such that the app did something when you downloaded it. That was a rule that Phil Schiller seemingly
234:31 made up on the fly when pressed for the fifth time by the media about why we couldn't be in the app store when a
234:37 million other companion apps could. But we just happened to be able to create so much pain and noise for Apple that it
234:44 was easier for them to just let us be than to keep on fighting. What do you think about uh Tim Sweeny's victory with
234:52 Epic over Apple? I think it is incredible and the entire developer
234:59 ecosystem, not just on iOS, but on Android as well, owe Epic, Tim Sweeney,
235:06 and Mark Rain an enormous debt of gratitude for taking on the only battle
235:12 that has ever inflicted a serious wound on Apple in this entire sorted campaign
235:19 of monopoly enforcement, and that is Epic's fight versus them.
235:25 Tim recently revealed that it has cost well over $100 million in legal fees to
235:31 carry on this battle against Apple. We for a hot moment considered suing Apple
235:36 when they were threatening to kick us out. We shopped the case around with a few law firms and perhaps of course they
235:43 would tell us you have a good case. I mean they're trying to sell a a product here. But they would also tell us it's going to cost a minimum of $10 million
235:50 and it's going to take 5 to seven years through all the appeals. Now we now
235:56 learned the actual price tag was 10 times higher, right? Epic spent over hundred million. It would have destroyed
236:01 us to take on Apple in the legal realm. Only a company like Epic could do it.
236:07 And only a company run by founders Mhm. like Tim, like Mark, could risk the
236:16 business in the way that they did, the audacity they had to provoke the fight in the first place, which I thought was
236:22 just incredible, and to stick with it for the long term. No board would have
236:27 signed off on this lawsuit to a professional CEO. No freaking way. So,
236:33 the fact that they've been able to beat Apple in also the most hilarious way possible, I think is just incredible cuz
236:40 remember their first victory in the case was actually not much of a victory.
236:45 There were about 11 counts in the trial. Apple basically won 10 of them and the
236:53 judge awarded Epic this one little win that Apple couldn't tell them not to
236:60 link out to the internet to be able to do the payment processing. So they won this one little thing and Apple instead
237:07 of just taking the 10 out of 11 wins and going fine, you can have your little links but all these other rules stay in
237:14 place decided to essentially commit criminal contempt of court as they've
237:20 now been referred to for prosecution um and angered the judge to such a
237:26 degree that the rule of law in the US now is that you can launch an app in the
237:32 app store and you don't have to use inapp payment, but you can have a direct billing relationship with a customer if
237:37 you just link out to the open internet when you take the credit card and then hop back into the app. And we owe all of
237:44 that to Tim and Mark. We owe all of that to Epic. We're going to launch new apps any minute now. I hope um actually next
237:51 week that take advantage of this that revamp the Hay app such that people who download the Hay app off the Apple app
237:58 store can sign up in the app and can then use uh the web to put in their
238:03 credit card. So we don't have to pay 30%. So we have a direct billing relationship and such that they can take that subscription to Android to PCs
238:12 whatever without any hassle and we have Tim and Mark to thank for it. Yeah, Tim, I mean the like you said founders but
238:19 also specific kind of founders because I think maybe you can educate me on this but uh Tim is somebody who maintains to
238:28 this day sort of the unreasonleness of principles. Yes, that's what I love.
238:33 I I think sometimes maybe even with founders you can get worn down. It's a large company. There's a lot of smart
238:39 quote unquote people around you, lawyers and just whisper in your ear over time and you're like well just be reasonable
238:45 being, you know, this is a different thing and to to be the sort of maintain
238:50 I mean Steve Jobs did this maintain m still are the asshole.
238:56 Yes. Who says no this whole company I'll sink this whole fucking company over this. That's the
239:03 exact language basically I used in our original campaign. I will burn this
239:09 business down before I hand over 30% of it to Apple. And that sort of
239:14 indignation, that actual rage is something I try to be a little careful about tapping into because it is a
239:20 little bit of a volatile compound because I mean I have a bunch of employees, we have a bunch of uh
239:25 customers. It would be pretty sad if the journey of 37 signals after 25 years would come to an end because Apple would
239:32 burn us down or I would burn the business down over this fight with Apple. But I think you also need that
239:38 level of conviction to be able to even drive the day-to-day decisions. One of the other Apple examples, I know I'm
239:44 racking on Apple a little bit here, and I don't actually hate them. I really don't. I am tremendously disappointed at
239:51 the squandered relationship that did not need to be sold away for so little. Now
239:58 I understand that the app store toll booth is actually pretty big business. It's multiple billions but Apple is a
240:05 trillion dollar company and I think in the lens of history this is going to come off as a tremendous mistake and I
240:11 think it's already coming off as a tremendous mistake. The flop that was the Vision Pro was partly because Apple
240:17 had pissed off every other developer. No one was eager to come build the kind of
240:23 experiences for their new hardware that would perhaps have made it a success. So
240:29 when you're on top and you have all the cards, you can delude yourself into thinking that you can dictate all terms
240:35 at all times and there are no long-term consequences. Apple is learning finally the fact that there are long-term
240:41 consequences and that developers actually are important to Apple's business and the relationship is not
240:47 entirely one-sided. We don't owe our existence to Apple and Apple alone. We've built our own customer bases.
240:54 Apple has been beneficial to the industry. I'm glad the iPhone exists. Uh
240:59 da da. It's not that it doesn't go both ways, but Apple wants it only one way. And I think
241:06 that is a mistake. And it's a mistake that was avoidable. And a that's
241:12 disappointing. Certainly disappointing for me. I've literally spent 20 years evangelizing this shit, right? I've
241:18 spent so much money buying Apple hardware. Um, excusing a bunch of things
241:24 they've done over the years and then for what?
241:29 For the fact that you wanted 30% of something that I created in the most unreasonable way possible. Couldn't we
241:36 have found a better way to do this? I think they're going to get forced to to do a better way. But did you also have
241:42 to go through the indignity of having a criminal contempt charge against you, getting referred to prosecution? It just
241:48 seems so beneath Apple. But it also seems so in line with what happens to huge companies who are run by quote
241:56 unquote professional managers rather than founders and unreasonable people.
242:01 Well, we should probably also say that the thing you love about Apple, the great spirit of Apple, I think still
242:08 persists. And there's a case to be made that this 30% thing is a slice, a particular slice of a company, not a
242:15 defining aspect of the company. And that it Apple is still on top in the in the
242:20 hardware that it makes in a lot of things that it makes. Uh and
242:25 you know this is uh there could be just a hiccup in a long story of a great
242:30 company that does a lot of awesome stuff for humanity. So like Apple's a truly
242:35 special company. We met we mentioned Amazon. There is no company like Apple. I agree. This is why the disappointment
242:43 is all greater because we had such high aspirations and expectations to Apple that they were the
242:50 shining city on the hill and they were guiding the industry in a million
242:56 positive ways. I think as we talked about earlier, hardware is exciting again in large part because Apple bought
243:04 PA Semi and pursued a against all odds
243:10 mission to get ARM up to the level it is today. And we have these incredible M
243:15 chips now because of it. And the design sensibilities that Apple bring to the
243:22 table are unparalleled. No one has taste certainly at the hardware level like
243:28 Apple does. Even at the software level, I'd say there's a lot of taste left in Apple, but there's also some real sour
243:34 taste now. So, they have to wash that off first, I think, before they find their way back. But Apple's been in a in
243:40 a mirage before. I mean, uh, Wasnak and Steve Jobs started this thing in the
243:45 garage, has great success with the Apple 2. He hands the company over to a sugar drink salesman who tanks the company
243:53 into the 90s. He doesn't learn the lesson. Spends the next 20 years building up this amazing company. Then
243:60 hands the company over again to a logistics person who presumably had more
244:06 redeeming qualities than uh the first guy who put in charge but still ends up
244:12 leading the company astray. Now this is the norm. The norm is that great
244:18 companies don't last forever. In the long arc of history, almost no company lasts forever. There are very few
244:25 companies around that was here 100 years ago, even fewer 200 years ago, and
244:30 virtually nothing that are a thousand years old outside of a handful of Japanese swords makers or something like
244:36 that, right? So, you can get deluded into thinking that something is forever when you're in the
244:41 moment and they seem so large. Apple could absolutely stumble and I think they have more reason to stumble now
244:49 than ever. They're behind on AI, terribly behind. Their software quality
244:54 is faltering in a bunch of ways. The competition is catching up on the hardware game in part because TSMC is
245:01 not an Apple subsidiary, but a foundry that services AMD and Nvidia and others
245:08 who are now able to use the same kind of advanced processes. This is something I learned after not looking at PC hardware
245:14 for the longest time that holy smokes, AMD actually makes CPUs that are just as
245:19 fast, if not faster than Apple's. They're not quite as efficient yet because ARM has some fundamental
245:24 efficiencies over x86, but they're still pretty good. So, Apple should have reason to worry. Apple's shareholders
245:32 should have reason to be concerned not just about all these stumbles but also
245:37 by the fact that Apple is run by old people. Apple's board has an average age
245:44 of I think 75. Their entire executive team is above 60. Now
245:50 that sounds horribly agist and in some ways it a little bit is in the same way
245:56 I'm agist against myself. Like I'm 45 now and I sort of kind of have to force
246:02 myself to really get into AI because it is such a paradigm shift and a lot of
246:07 people when they reach a certain age are just happy to stay with what they know. They don't want to go back to being a
246:12 beginner. They don't want to go back to having to relearn everything. And I think like this is a little hard for me
246:18 at 45. How the hell do you do that at 75? I have to come back to you mentioned it
246:24 earlier. You're a parent. Can you speak to the impact that becoming a father has had on
246:32 your life? I think what's funny about fatherhood is that for me, I wasn't even sure it's
246:37 something I wanted. It took meeting the right woman and
246:42 letting her convince me that this was the right idea before we even got
246:49 started. I didn't have starting my own family on the list of priorities in my
246:56 late 20s or even early 30s. It was really the impetus of meeting my
247:03 wife Jamie and her telling me this is what I want. I want to have a family. I
247:09 want to get married. I want to have kids. I want to have three. And me going
247:16 for a second like whoa whoa whoa. and then h all right let's do it and I think
247:26 that's the kind of happy accident where some parts of my life have been very driven where I knew exactly what I
247:33 wanted and how to push forward to it and what the payoff was going to be but when it comes to having a family
247:41 that always felt like a very fuzzy abstract idea that sure someday maybe.
247:49 And then it became very concrete because I met a woman who knew what she wanted.
247:55 And looking back on it now, it almost seems
248:02 crazy like there's this fork in the road of reality where if that hadn't happened
248:07 and I had been sitting here now, not being a father, not having a family,
248:14 the level of regret knowing what I know now about the joys of having that family
248:21 would have been existential, would have been
248:27 I don't know if they would have been devastating. I think men have a little bit of a longer window to pursue these
248:34 things than women do. There are just certain biological facts.
248:39 But ending up with the family I have now, ending up with my three boys have been
248:47 just a transformative experience in the sense that here's something that turned out to be the most important thing. And
248:54 it was an open secret. Not even an open secret. It was an open truth through all of history. You listen to anyone who's
249:01 ever had children, they will all say, "My children are the most important to me." Yet somehow that wisdom couldn't
249:07 sink in until you were in the situation yourself. I find those truths fascinating when you can't actually
249:14 relay them with words. I can tell you, "Hey, Lex, what are you doing? Get a
249:20 wife. Make some kids. Get a move on it." And these are just words. They're not communicating the
249:27 gravity of what it actually feels to go through the experience. And you can't really learn it without going through
249:33 it. Now, of course, you can be influenced and whatever, we can all help contribute and little sparks and little
249:38 seeds can grow in your your mind about it, but it still has to happen. And
249:45 now that I am in this situation and just the sheer joy on a daily basis where you
249:52 think your level of life satisfaction is on a scale of 1 to 10. Yeah.
249:57 And then the satisfaction of seeing your children understand something, accomplish something,
250:04 learn something, do something, just be, just goes like, "Oh my god, this scale
250:09 doesn't go from 1 to 10. It goes from 1 to 100." And I've been playing down here in the 1 to 10 range all this time, and
250:17 there's a there's a one to 100. That has been humbling in a way that
250:26 is impactful in and of itself. This whole idea that I thought I had a fair
250:31 understanding of like the boundaries of life in my early 30s. Like what is this about? I mean, I've been on this earth
250:37 long enough now here to know something. And he don't know. I did not know. I did
250:42 not know that the scale was much uh much broader. And I've often talked about
250:49 the joys of having kids and just seeing your own DNA, which
250:56 is remarkable to me because literally that's been the pursuit of humans since the dawn of time. I am here today
251:02 because whatever 30,000 years ago, some Neanderthal had the same realization that I should
251:09 procreate and I should continue my bloodline and that that all amounts to me sitting here here now. But
251:17 it didn't become a practical reality to me before meeting the right woman.
251:22 And I think that that's sometimes not part of the conversation enough that
251:27 there's something broken at the moment about how people pair up in the Western
251:32 world. Yeah. And it's at the source of why we're not having enough children because there's not enough couples. There's not
251:39 enough marriage. There's not a lot of these there's not enough of all these traditional values that even 50, 60, 70
251:46 years ago was just taken for granted. We're in this grand experiment of what
251:53 happens if we just remove a bunch of institutions? What happens if we no longer value marriage as a
252:01 something to aspire to? What happened if parenthood is now seen in some camps as
252:07 almost something like weird or against your own self-expression? It's a grand
252:13 experiment that I'm kind of curious how it turns out. I
252:18 I'd prefer to watch it as a movie like the children of men of like that was a good show. I kind of wish that wasn't
252:23 reality, but we're seeing that reality play out while I'm sitting here in a
252:28 very traditional two parent loving household with three children and going,
252:35 um, this is now at the top. I've done a lot of things in my life. I've built
252:42 software. I've built companies. I've raced cars. I've done all sorts of things. And I would trade all of it in a
252:48 heartbeat for my kids. That's just a really fascinating human experience that
252:54 the depth of that bond is something you can't appreciate before you have it. But
253:01 I also think there is a role to play to talk it up because we're being bombarded
253:08 constantly with reasons why not to. Oh, it's it's too expensive. Um well, you
253:15 could get divorced and then you might lose half. There's all these voices constantly articulating the case against
253:22 marriage, the case against having children that those of us who've chosen to do the
253:30 traditional thing to get married and to have children have an obligation to kind
253:35 of talk it up a little bit, which would have seemed ridiculous again 50 years ago that you'd have to talk up something
253:41 so fundamental at that. But I have become kind of obligated in that sense to do
253:48 just that. To talk it up, to say, do you know what? You can look at everything that I've done. And if you like some of
253:55 those parts, realize that to me in this situation,
254:01 the kids, the family, the wife is more important than all of it. And it sounds like a cliche because you've heard it a
254:06 thousand times before. And by becoming a cliche, maybe you start believing it's not true. that it's just something
254:12 people say, but it is reality. I know almost no
254:17 parents that I have personal relationships with that don't consider their children to be the most important
254:23 thing in their life. So there's a lot of interesting things you said. one it does seem to be I know
254:28 a lot of uh parents perhaps more interestingly I know a lot
254:34 of super successful people who are parents who
254:39 uh really love their kids and who uh say that the kids even help them to be more
254:45 successful. Now the interesting thing speaking to what you're saying is it does seem for us humans it's easier to
254:53 articulate the negatives because they're sort of concrete pragmatic you know it costs more it
254:60 takes up time you know they can be you crying all over the place they're you know tiny narcissists running around or
255:07 whatever which is all true by the way yeah pooping everywhere that kind of stuff uh but to articulate the thing you
255:14 were speaking to of there's There's this little creature that you love more than anything you've ever loved in your life.
255:20 It's hard to convert that into words. You have to really experience it. And but I've I believe it and I want to
255:27 experience it that. But I I believe it because just from a scientific method have seen a lot of people who are not
255:34 honestly not very capable of love fall completely in love with their kids.
255:39 Yes. Like you know very sort of um let's let's just call it what it is. engineers that are very like beep boop b up.
255:46 Yes. They just fall in love and it's like all right people who just like you said they don't
255:53 really want they don't really care or don't really think about having kids that kind of stuff once they do it
255:59 changes everything. So you know but it's hard to convert into words. One of the reasons I think it's also difficult is
256:07 I mean I like kids not that I actively dislike them but when I was around other
256:13 people's kids I didn't have a emotional reaction. Some women have right they see a baby and they go I never never had any
256:21 emotion of that. I mean I could appreciate I'm I'm glad for you that you have children. It did not provoke anything in me.
256:27 The emotions that are provoked in me when I look at my own children this this doesn't exist in the same universe. So
256:33 you don't have something you don't have a complete parallel or at least a lot of men or at least me I didn't have sort of
256:38 a framework to put it into what would it be like to have my own child and then you experience it you just it's like the
256:46 and it happens so quickly too this is what I found fascinating it happens before that little human is even able to
256:54 return any words to you that the love you develop to an infant happens quite
257:01 quickly not necessarily immediately. I don't know, different people have different experiences, but it took me a
257:07 little bit, but then once it hit, it just hit like kick of a horse.
257:13 And I love that it's also just such a universal experience that you can be the
257:19 most successful person in the world, you can be the poorest person in the world, you can be somewhere in the middle. and we share this experience that being a
257:27 parent for most of them turns out to be the most important thing in their life.
257:33 But you know it is really nice to do that kind of experience with the right partner. But I think because I'm such an
257:39 empath, the cost of having the wrong partner is high for me. But then I also
257:45 like realized, man, I have a friend of mine who's divorced happily and he still
257:50 loves the shit out of his kids and it's still be it's a mess, but there's still all of that love is still there and
257:57 it's, you know, you just have to make it work. It's just that I don't know that kind of like divorce would destroy me.
258:03 You should listen to uh the school of life. He has this great bit on YouTube,
258:09 you will marry the wrong person. If you accept upfront that you will marry the wrong person, that every potential
258:16 person you can marry is going to be the wrong person on some dimension. They're going to annoy you. They're going to be
258:22 not what you hoped in certain dimensions. The romantic ideal that everything is just perfect all the time
258:29 is not very conducive to the reality of hitching up and get making babies.
258:35 Because I think as you just accounted, even when it turns to shit,
258:41 I find that most of the people I personally know where things have fallen apart and have turned to shit, never in
258:48 a million years would they go like, I regret it. I would rather my children did not exist because a relationship turned sour. I
258:57 mean, I think you should try very hard. And I think this is also one of those things where we didn't fully understand
259:03 those fences and when we pulled them up and celebrated how easy it is to get
259:09 divorced, for example, that that wasn't going to have some negative consequences. I'm not saying you shouldn't have divorces. I'm not saying
259:14 return to times past. I am saying though that civilization over thousands of years
259:21 developed certain technologies for ensuring the continuation of its own
259:28 institutions and its own life that perhaps we didn't fully appreciate. I mean again this is something Jordan
259:34 Peterson and others are far more articulate to speak about and that I've learned a lot to just analyze my own
259:40 situation. Why is it that this incredible burden it is to be responsible for someone else's life that
259:47 you brought into this world is also the most rewarding part of existence? That's
259:53 just curious. Before I heard Peterson articulate the value of taking on the greatest burden
260:01 you know how to carry. I always thought about burdens as a negative things. Why would I want the burden of a child? I
260:08 might screw it up. might be a bad parent. They might have bad al right.
260:15 All the reasons why you shouldn't and so few voices articulating why you should.
260:21 Yeah. But there I should also add on top of that thing you mentioned currently perhaps in the west the matchmaking
260:27 process is broken is broken and technology made it worse. It's fascinating this whole thing that
260:34 that hasn't been solved. So hiring great teams, that's probably been solved the
260:39 best out of matchmaking. Finding great people to hire, right?
260:45 Uh second, finding great friends. That's like that's also hasn't been solved and
260:50 it's breaking down. It's breaking down. And third is matchmaking for like relationships. That's like the worst. And in fact,
260:56 technology made it even worse. Yes. It's fascinating. It is. It's a great example again of how
261:02 all the greatest intentions still led us straight to hell. I really enjoyed Louis
261:08 Perry's analysis of the sexual revolution not being an unqualified
261:14 good, which was something I hadn't thought about at all before she articulated it, that of course uh women
261:21 should be able to have freedom until termination and abortions and all of these things. And
261:28 Louise Perry is not arguing against that either, of course, but there are second order effects that we don't appreciate
261:35 at the time and we may not have readymade solutions for. That's just interesting. You make life better in a
261:42 million different ways and somehow we end up more miserable. Why is that? Why is it that humans find meaning in
261:52 hardship? And I think some of that is that it's a
261:59 difficult question to answer through science. And again, Peterson articulates well
262:06 this idea that you have to find some of it through art, some of it through authors, some of it through different
262:14 I was just about to say modes of knowing before I stopped myself because that sounds like woo bullshit. But there are
262:21 different ways to acquire those deep lessons that sort of
262:30 uh paper is not going to tell you. I mean this is really the point uh also
262:38 applies to religion for example. If you remove from society the software of religion yes
262:43 you better have a good replacement. And we've had a bunch of bad replacements, especially over the last few decades.
262:51 Religion is one of those things I've struggled with a lot because I'm not religious, but I sort of wish I was. I
262:58 can now fully appreciate the enormous value having an operating system like
263:06 that brings, not just at the individual level, but rather at a societal level.
263:12 And it's not clear at all what the answer is. I think we've tried a lot of dead ends when it came to replacements
263:18 and people have been filling that void in a million different ways that seem worse than all the religions despite
263:24 their faults in a myriad of ways have been able to deliver. Yeah. Religion is like the cobalt code.
263:33 It's just Yes. It's the institutions where we don't fully understand the rules and why they're there and what's going to happen
263:39 if we remove them. Some of them seems obvious to me are just bullshit of the
263:45 time. Oh, you shouldn't eat whatever shellfish because in that region of the world there was something something
263:50 something. Okay, fine. But there's a bunch of other things that are pivotal to keeping society functioning for the
263:57 long term and we don't fully understand which is which. What's the bullshit and what's the loadbearing pillars of
264:03 society? Can you speak to the hit on productivity that kids
264:09 have? Did they increase your productivity, decrease it, or is that even the wrong question to ask?
264:14 I think it's one of the reasons why ambitious people are often afraid of having children because they think, "I
264:19 have so much more to do, and I barely have enough time now. How would I possibly be able to accomplish the
264:25 things I want to accomplish if I add another human into the mix? Now, a
264:33 we've always worked 40 hours a week, not 80 or 100 or 120. I think that's very
264:38 beneficial. B, kids don't exist in this vacuum of just
264:44 them alone being entered into your life. Hopefully, there's a partner. And in my life, I'm married to a wonderful woman
264:52 who decided to stop working her corporate job when we got together and
264:58 have been able to carry a huge part of that responsibility. I was just about to
265:03 say burden. And I think that's exactly how it often gets presented, especially
265:09 from a feminist perspective, that caring for your own children is some sort of
265:14 unpaid labor that has to be compensated for in some specific way beyond the
265:22 compensation of what? Bringing life into this world, raising wonderful humans.
265:28 There's something screwy about that analysis that I actually think the
265:34 modern trad movement is a reply against. Whether they have all the answers, I'm
265:40 certainly not sure of either. But there's something that's just not right in the analysis that children are a
265:46 burden and that if woman chooses to stay at home with the
265:53 kids that that some sort of failure mode of feminist ambition. I think that's
265:58 actually a complete dead end. Now depends on different people, different circumstances. I can just speak to my
266:05 life being married to a wonderful woman who have decided to be home with the
266:11 kids at least at their early age and taken on a lot of those
266:17 responsibilities. Now, it doesn't mean there isn't plenty of ways that I have to be part of that and have to chip in,
266:24 but it's allowed me to continue to work the 40 hours a week that I've always
266:30 worked, but it's made the 40 hours more strict. I have a schedule where I wake
266:36 up whatever 6:30 and we have to get out of the door a little before 8. I usually
266:42 have to play at least one or two rounds of Fortnite with my youngest, sometimes middle child, then take the kids to
266:50 school, get in, start work at, I don't know, uh, 8:30, 9, then work until 5
266:57 5:30, sometimes 6:00, but then it's dinner and I have to be there for that and then I have to read to the kids and
267:04 by the time that's done, I don't want to go back to work. So my work time really
267:09 is 9 to5 9 to6 depending of whatever is going on. Sometimes there's emergencies
267:16 and you have to tend to them but it's made it more structured and I found some
267:21 some some benefit in that. I found some productivity in that that I can't goof around quite as much that the day will
267:27 end at around 5:36. That's just if I didn't accomplish what I wanted to do
267:33 today. If I get to that time it's done. I'm over. I have to try again tomorrow.
267:39 Whereas before having a family and before having kids, I could just like not do it and just make it up in the
267:45 evening. So, in that way, it's made me more structured, but it hasn't really changed my volume of work all that much. I still
267:52 work about the same amount of hours. And that's, by the way, enough. This is one of the key points we make in it doesn't
267:59 have to be crazy at work, the latest book we wrote, is that there's enough time. 40 hours a week is actually a ton
268:06 if you don't piss it away. Most people do piss it away. They piss it away in meetings. They piss it away on just
268:12 stuff that doesn't matter when even 3 hours, 4 hours of concentrated,
268:19 uninterrupted time every day would move the goals they truly care about way down
268:25 the field. I think kids do make you more productive in that way for people who need it, especially people like me. uh they
268:33 create their urgency like you have to if you have to be done by five I it's a maybe counterintuitive notion
268:40 but for people like me who like to work you can really fill the day
268:46 yes with fluff yes of work and um if you have to be done by
268:53 five you're going to have to do the deep work and get it done like really focused
268:59 singular work yes and then you're just going cut off. It keeps you honest. It keeps you honest
269:04 because you can you can squander one day, you can squander two days, but if I squander a whole week,
269:11 I feel terrible. Now, that's just some drive I have in me where I feel content and full of meaning
269:18 if I actually do stuff that matters. If I can look back upon the week and go like, that was that was a nice week.
269:24 Really, we moved forward. Maybe we didn't get done, but we moved forward. Everything got better. Um, and I think
269:29 kits really help just time box things in that way. And a lot of people need that
269:34 because I find just so much of the celebration of overwork to be so
269:42 tiresome. Oh, I I work 60 hours or 80 hours, 100 hours a week. And just like
269:48 first of all, no you don't. No, you don't. Like those 80 hours are full of all sorts of fluff that you
269:54 label work, but that I would laugh at. And that most people laugh at that you would laugh at if you actually did the
270:00 analysis of where's that time going. Most of the important stuff that have to be done is done in these uninterrupted
270:08 chunks of 2 hours here or four hours there or 5 hours there. The hard part is making sure you get them in the whole
270:13 piece. Um so don't give me don't give me that. There's time enough. And also
270:20 what's so important that it ranks above continuing your lineage? I think there's
270:27 just some ancient honor in the fact that again this DNA that's sitting on this
270:34 chair traveled 30,000 years to get here and you're going to squander all that
270:39 away just so you can send a few more emails. There is something that's also hard to convert into words of just the
270:46 kind of fun you can have just playing with your kids. I don't know what that on the surface it's like. I could have
270:53 that kind of fun just playing video games by myself. But no, it's like there's something magical about it, right?
270:58 I have a thousand hours logged in Fortnite since 19, I think,
271:06 all of it with my kids. I'd never be playing Fortnite. Well, I don't know if I never would be. I wouldn't be playing
271:11 a thousand hours of Fortnite if it wasn't for my kids. The enjoyment for me is to do something with them that I also
271:19 happen to enjoy. I really love Fortnite. It's a phenomenal game. I don't have to force myself to play that with them. I
271:25 often ask like, "Hey, uh, do you want to play Fortnite?" But still, it's an activity that I get
271:31 to share with them. It's a passion that I get to share with them. I've started, uh, doing go-karting with my oldest.
271:37 I've been driving race cars for a long time and now they're getting into go-karting. And just being at the go-kart track, seeing them go around,
271:43 seeing them get faster, seeing them learn that skill, you just go look at like what else would
271:50 I be doing with my life at my age, 45, I'm standing here truly enjoying life I
271:58 brought into this world. What else is it was so important at this stage that I would otherwise be spending my time on?
272:04 All right. Like you mentioned, you like to race cars and you do it at a world class competitive level, which is
272:11 incredible. So, uh, how'd you get into it? What attracts you to racing? What do
272:16 you love about it? The funny thing about getting into racing is I did not get my driver's
272:21 license until I was 25. I grew up in Copenhagen, Denmark,
272:26 where the tax on cars is basically over
272:31 200%. So you pay for three cars and you get one. And I didn't even have the
272:37 money for one car, let alone three. So I could not afford a car growing up. We did not have a car growing up. But
272:44 Copenhagen is a nice city to be able to get around on a bike or with a bus or as
272:49 I did for a long period of time on roller blades. But
272:55 when I was 25, I realized I wanted to spend more time in the US. I wasn't sure
273:00 yet that I was going to move there. That turned out later to be true, but I knew that if I wanted to spend time in the US, I needed to have a driver's license.
273:06 I was not going to get around very well if I didn't know how to drive a car. So, I got a driver's license at 25. Then
273:13 ended up moving to the US later that year. And I'd always been into video
273:19 games, racing video games. Metropolitan Street Racer on the Dreamcast was one of
273:26 those games that really sucked me into it was the precursor to Project Gotham,
273:32 which was the precursor to essentially Forsa Horizon, I think. Oh, okay.
273:37 I think that's what how the lineage goes. Just a great game. I actually just fired it up on an emulator um a few
273:44 weeks ago and still sort of kind of holds up because it has enough real car dynamics that it smells a little bit
273:50 like driving a real car. It's not just like an arcade racer like Sega Rally or something like that. But I'd always been
273:56 into that. Then I got my driver's license at 25 and moved to the US. And then two years later, a friend that I'd
274:03 met in Chicago took me to the Chicago Autobon Country Club, which is this
274:08 great track about 45 minutes from Chicago. And I sat in a race car and I drove a race car for the first time. And
274:16 I had the same kind of pseudo religious experience I did as when I started
274:23 working on Ruby where I did maybe 20 laps in this
274:30 basically a Mazda race car from I think like the '9s or something like a pretty cheap race car but a real race car.
274:36 Single seater manual gearbox but exposed slick wheels all the stuff. And after
274:43 having had that experience, first of all, it was just the most amazing thing ever. Like the physical sensation of
274:49 driving a race car is really unique. And I think if if you're in a car fast, you
274:56 have a maybe a 2% taste of it. the exposure to the elements that you
275:02 get in a single seat race car, especially one like that where your head is actually out in the elements. You can see the individual wheels and you
275:09 sensation of speed is just so much higher is at a completely different level. So, can you actually speak to that? So,
275:15 even at that even in that Mazda, so you can feel what can you feel like the
275:21 track reverberating? You feel the grip? you not only can you see the bumps because you're literally looking
275:27 straight at the wheel, you can feel all the bumps because you're running a slick tire. It's a really stiff setup. It's
275:34 nothing like taking a fast street car out on a racetrack and try to driving a little bit around. So, can you feel like the slipping?
275:41 That's a that's a huge part of the satisfaction of driving a race car is driving it at the edge of adhesion as we
275:48 call it where the car is actually sliding a little bit. Couple of percent slip angle is the fastest way to drive a
275:54 race car. You don't want to slide too much. That looks great. Lots of smoke, but it's not fast. How you want to drive
276:00 it is just at the limit of adhesion where you're rotating the car as much as your tires can manage and then slightly
276:08 more than that and playing at it, keeping it just at that level because
276:14 when you're at the level of or at the limit of adhesion, you're essentially just a tiny movement away from spinning
276:19 out. I mean, it doesn't take much. Then the car starts rotating. Once it starts rotating, you lose grip and you're going
276:26 for the wall. That balance of danger and
276:32 skill is what's so intoxicating. And it's so much better than racing video
276:37 games, too, because the criticality is taking up two notches. I often think about people really like gambling where
276:44 I think like, aren't you just playing poker? Like, and like, no, the point is not poker. Poker may be part of it, but
276:50 the point is that I could lose my house, right? Like that's the addiction that some people get to gambling, that
276:56 there's something real on the line. When you're in a race car, there's something very real on the line. If you get it
277:03 wrong, at the very least, you're going to spin out and probably hit a wall and
277:08 it's going to be expensive. At the very worst, you're not getting out alive. And
277:13 even if modern race cars have gotten way safer than they used to be, there is that element of danger that's real. That
277:20 there are people who still get seriously hurt or even killed in a race car. It's
277:26 mercifully rare compared to what it used to be when those maniacs in the 60s
277:31 would do Formula 1 and whatever 13% of the grid wouldn't make it to the end of the year because they just die in a
277:38 fiery flaming fireball. But there's still some of it there. And I think that
277:46 sense that there's something on the line really contributes to it. But it's more than that. There's al just a physical sensation. There's activation of all
277:52 your forces. There's the flow. And I think that really cements like why
277:58 I got addicted because I always I love that flow I got out of programming. But
278:03 getting flow out of programming is a very inconsistent process. I can't just sit down in front of a keyboard and go
278:09 like, "All right, let's get the flow going." It doesn't happen like that. The problem has to be just right. It has to
278:15 meet my skills in just the right moment. It's a bit of a lottery. In a race car is not a lottery at all. You sit down in
278:22 that car, you turn the ignition, you go out on track, and I get flow virtually
278:27 guaranteed because you need or I need at least 100% of my brain processing power to be able
278:34 to go at the speed I go without crashing. So there's no time to think
278:40 about dinner tonight or the meeting next week or product launch. It just it's
278:45 completely zen in actually the literal sense of the word. I think of someone who's really good at meditation. That's
278:52 probably kind of state they get into where it's just clear you're in the now. There's nothing but you and the next
278:58 corner. That's a really addictive experience. So after I've had that, I
279:03 couldn't get enough. I just I kept going to the track. Every opportunity I got every single weekend for about four
279:09 years, I would go to the track. And by the end of that time, I finally worked up enough skill and enough success with
279:16 the company that I could afford to go quote unquote real racing. So, I started doing that. I started
279:21 driving these Porsches. And then as soon as I got into that, as soon as I got into quote unquote real competition, I was like, I wonder how far you can take
279:28 this. And it didn't take that long before I decided, you know what? I can take this
279:34 all the way. My great hero in racing is Tom Christensen. Fellow Dne, the Mr.
279:41 Lama, as they call him, the greatest endurance race in the world, the 24 hours of Lama, has been won more times
279:46 than any other by Tom Christensen. He won the race nine times.
279:52 So Tom just really turned me on to Lama. I've been watching Lama since I think the
279:59 80s. I have my earliest memories of watching that on TV. The race has been going since I think uh 20s, but in the
280:06 80s I got kind of into it. And then in the late 90s, early 2000s when Tom
280:11 started winning, I like pretty much every other Dane started watching the race almost religiously. So I thought,
280:17 you know what? I want to get to Lal. And this is the magic thing about racing that if I get into basketball, like I
280:23 can't set a realistic expectation that I'm going to play in the NBA, that I'm going to go to the finals, or I get into
280:29 tennis and I'm going to play at Wimbledon. That just doesn't happen. But racing is special in this way because it requires a fair amount of money to keep
280:36 these cars running. It's really expensive. It's like having a small startup. You need to fly a bunch of people around the world and buy
280:42 expensive equipment so forth. So you need a bunch of capital and I had some through the success of the company. So I
280:48 could do it which meant that I could get to Lal. So I set that as my goal. I want to get to Lal and I started racing in
280:56 real competition 2009 and three years later in 2012 I was at the grid of LA
281:02 for the first time. We should say so lemon 24-hour race endurance.
281:08 I mean this is insane. There are three drivers mind you. So it's not like one guy just driving for
281:14 20 hours 24 hours straight. Still, it's a pretty tough race both physically and mentally, especially mentally when
281:21 you've been up for 24 plus hours. You're not quite as sharp as uh when you first
281:27 wake up. And this is funny about Lama, too. It starts at around 4:00 in the afternoon. So, you've already been up
281:33 for half a day by the time the race starts. And then there's 24 hours to go before you're done. And you'll be in the
281:38 car for anywhere from usually an hour and a half to a maximum of 4 hours. The
281:44 regulations say four out of six is the max you can do. I've spent perhaps two and a half hours in a single stint at
281:50 Lama. It's pretty taxing. You're going 200 miles an hour into some of these
281:56 turns. And there's another 60 cars on track. Whenever I'm in my normal
282:03 category, which is the LMP2 category, I have GT cars, which are more like a Ferrari and a Porsche that I have to
282:10 overtake. And then I have these hypercars, which is the top class that are overtaking me. So you got a lot
282:15 going on and you got to stay sharp for two and a half hours straight to do that. That is just a guaranteed way to
282:21 get incredible flow for long stretches of time. That's why you get addicted to
282:26 it. That was why I got You got to talk me through this video. This video of you in these LM2s. This is
282:32 such a cool This is so cool. And this was probably my favorite battle of my career.
282:38 Sure. and Hanar Hansen has beat past and fights. Yeah. So, this is me driving against
282:44 Nico Miller at the Shanghai International Circuit. You're on the outside here. I'm on the outside in the blue and
282:51 white. And we go a whole track around with basically a piece of paper between us. See down this back straight. I get so
282:57 close to him because I want to force him over on the other side of the track such that he can't just box me in. And we've
283:03 been fighting already at this point for basically 40 minutes straight. I've been man managing to keep this professional
283:09 driver behind me for 40 minutes and he finally passes me but we just keep the battle on for the whole time and it
283:14 really just shows both these kinds of cars the lemon prototypes we don't actually ever touch we get within about
283:21 an inch and um and keep going around Shanghai circuit to
283:26 how did you get so good like what I mean that's a fascinating story right that you were able to get so
283:34 good I'm pretty good for the kind of driver I am, which is called the gentleman driver, which means I'm not a
283:39 professional driver. And like many good gentleman drivers, when we're at our
283:45 really best, we can be quite competitive with even professional drivers who've been doing this their whole life. The
283:50 difference between us and the professionals is the professionals can do it every time or more or less every time. So I can't be this good all the
283:57 time. When everything is just right, I can be competitive with professional drivers, but that's not how you win
284:03 championships. That's not how you get paid by factories to drive. You got to be good every time you go out. So, that's a huge difference. But some of it
284:10 was also just I really put my mind to it. By the time I realized race cars is
284:15 what I want to do as my serious hobby, I put in thousands of hours. Have you
284:21 crashed? What's the worst crash? I've had a lot of crashes, but thankfully, knock on wood, I haven't had
284:27 any crashes where I've gotten really seriously hurt. Have you like wrecked the car? Oh, yes. Oh, yes. I've wrecked many a
284:34 car. So, what what's that feel like? Just you wreck a car. Like, how do you get It feels like total shit if you're in a
284:41 real race and other people depend on you. It's not even so much the car. Although, it's also sometimes that these
284:46 cars are expensive to repair and that sucks and it feels so wasteful in a way when you crash some of these cars, but
284:53 the sense that you're letting a team down. Endurance racing is a team sport. Not only do you have your mechanics, you
284:59 usually have co-drivers. So when I crash, I just feel like, damn it, I could have avoided this.
285:06 Yeah, but also you could have died. Do you know what's funny? I never think about that. I don't think you can
285:12 because I think the moment you start thinking about being able to die, you can't do it. You can't go fast.
285:18 Well, I'm sure, not not to go all Carl Carl Young and Freud here, but I'm sure
285:26 that's always present in the back of your mind somewhere. You're not just bringing it to the surface.
285:32 It is in the sense that it's part of the appeal. It's part of the sense that
285:37 there's something on the line that this isn't just virtual. I can't just hit reset, restart, reboot. If I crash this
285:44 car, we're going to be out or we're going to be disadvantaged or it's going to get destroyed or I might get hurt.
285:50 I've gotten lightly hurt a few times. I actually had the year we won the 24
285:56 hours of Lama in our class. I'd been training in this Formula 3.5
286:03 car. It's a really fast car. It's a really nice exercise to do, but it's also it doesn't have power steering. So,
286:10 some of these race cars, especially the open seaters, they don't have power steering, which means that the steering wheel is basically directly connected to
286:18 the front wheels. So, if you crash one of those cars and the front wheels suddenly turn, you're really going to
286:24 hurt your hands if you don't get your hands off the wheel. I hadn't raced enough of those cars to know that I had to get or to have to instinct to have
286:30 developed the instinct that I had to get my hands off the wheel. So, I didn't and I really hurt my hand and this was
286:37 just I think a month before the 24 hours of LA. So, I thought, "Oh man, I'm gonna have to miss it this year." I had like a
286:43 not a cast, it was just seriously sprained. And then somehow miraculously like a week before the event I was like
286:49 ah yeah actually it's okay now. So got to do it and that would have been grave regret if I would have seen my team go
286:56 to on to win the race and I would had to sit on the sidelines but I really have been quite fortunate in the sense that
287:02 most of my crashes have just been expensive or sporting inconvenient.
287:08 They've never been something where I got seriously hurt but I've seen plenty of people who have. In fact, my co-driver
287:15 this year and for several years, Petro Fidipali drove a race car at Spa. Spa is
287:22 one of the great race tracks of all time. And it has this iconic corner called Arouge, which is probably the
287:28 most famous corner in all of motorsports. It has a great compression before you climb uphill. It's extremely
287:35 fast, very difficult corner. And just as he does the compression, his car
287:40 basically sets out and he loses his power steering and he drives straight into the wall and breaks both his legs
287:46 and basically face the prospect that maybe his career was over. I've had other teammates and people I know have
287:53 serious injuries that's really hurt them. And yet, what's funny is you say, you'd
287:60 think that would sink in. The year before we won in 2014, that same car had
288:09 a Danish driver in it at Lama at the race I was driving who died. He
288:15 lost control of the car when there was a bit of rain on the track and the track
288:21 went unfortunately designed in such a poor way that there was a very big tree right behind the railing and he hit that
288:30 tree at full speed, pulled 90 gs and was
288:35 dead on the spot which was just such an extremely awful experience to go
288:41 through. I finished second that year, which should have been cause for a bunch of celebration, but it was just tainted
288:48 by the fact that not only did a driver die, a fellow Dane
288:54 died, a guy I knew died. That was that was pretty tough. So that
289:03 uh throw that into the pile of the the the things that have to be considered is the weather conditions that you
289:08 mentioned of the track, the whether it's dry or wet. It's a huge
289:13 part of it. Even just last year at Lama, it was raining and I was out and I
289:21 hadn't made a serious mistake at the 24 hours of Lama since I did the first race
289:28 in 2012 where I put it in the sand trap with like 4 hours to go and we lost a
289:34 couple of laps getting pulled out, but it didn't actually change anything for our result because that was just how the
289:40 field was spread out. I'd made minor mistakes over the years, but nothing that really set us out. And at the race
289:45 last year when it was raining, I first clobbered a Ford Mustang when I made an
289:52 over ambitious pass on a damp part of the track and couldn't stop in time. And
289:58 then felt absolutely awful as I sat in the gravel pit for two laps and knew
290:04 that our race was over. A race where we were highly competitive. You're not blessed with a competitive car, a
290:09 competitive team and competitive setup every year. I know how rare that is. So to know that we had had a chance that
290:16 year and I sort of squandered it. Felt really bad, but that got compounded. I
290:22 got back on track, barely made it another stint and then put it in the gravel trap again when it started
290:28 raining on the entrance into Porsche. So this is part of why racing is so addicting, too, because the highs are
290:34 very, very high. When you win a race like the 24 hours mod, it feels just
290:39 incredible. There's so much emotion, but if you fuck it up, the lows are very, very low. What are the things you're
290:46 paying attention to when you're driving? What's what what is the what are the parameters? What are you loading in? Are
290:53 you feeling the grip? Are you basically
290:58 increasing the speed and seeing what like a constant feedback system effect it has on the grip? You're trying to
291:06 manage that. Trying to find that optimal slip angle. Are you looking around using your eyes?
291:12 Are you smelling things? Are you listening? He's feeling the wind. Are you Are you Oh, you looking at the
291:18 field, too? Like, how how did you not hit that guy at all? You get close
291:24 within inches, right? So, you have to pay attention to that, too. It's really interesting about that specific battle where we're literally a
291:30 few inches apart. I can't fully explain it, but humans can develop an incredible
291:36 sense of space where I can't see the edge of the back of my car, but I can
291:42 know exactly where it is. I can have a mental model in my head that gives me
291:47 the exact dimensions of this car such that I can run within a few inches of a competitor car or within a few inches of
291:53 the wall and not hit either when things go well. The car is about 2 m wide and
291:60 it's quite long, 5 m, and you can't see everything. The mirrors are actually kind of shit. There's no rear view
292:06 mirror in these cars. You can't see out the back. You can only see through your two side mirrors. But you form this
292:12 intuitive mental model when you get good enough at this. But what I actually pay attention to most is I run a program.
292:20 What I try to do when I go to a racetrack is I try to load up the best program I know how for every single
292:26 corner. What's my break point? What's my acceleration point? What's my brake
292:32 trailing curve? And I try to pick up that program in part just by finding it
292:37 myself and how fast I can go. But even more so than that, by copying my professional competitors or not
292:43 competitors, co-drivers. So, I usually always race with a pro and modern race
292:49 cars produce an absolute enormous amount of data and you can analyze all that data after each outing. You can see an
292:56 exact trace of how much you pushed the brake pedal, how much you did in terms of steering inputs, how when you got on
293:03 the gas, you can see every millisecond you're losing is evident in those
293:08 charts. So what I try to do is I try to look at the chart and then I try to load that in and like that's what I got to
293:15 do. Oh, in this corner 17 I actually I have to be 10 bar lighter on the brake.
293:21 So I try to load that program in and then I try to repeat it. Now then there are all the things that changes. Your
293:27 tires change quite a lot. These tires are made to only last 40 minutes in many
293:32 cases. Sometimes at least tracks they'll last as little as 40 minutes before they really fall off. So
293:40 you got to manage that that the grip is constantly changing. So your program have to suddenly fit those changing
293:45 circumstances. And then in endurance racing you're constantly interacting with other cars because you're passing
293:50 slower classes or you're getting passed by a faster class. So that's part of the equation. And then you're trying to
293:56 dance the car around the limit of adhesion. So you got all those factors playing at the same time. But above all
294:02 else for me is to try to become a robot. Like how can I repeat this set of steps
294:10 exactly as I'm supposed to for 2 and 1 half hours straight without making 100
294:16 milliseconds worth of mistakes. Yeah. Low latency algorithm. That's really a huge part of it
294:22 actually. Your latency is enormously important in terms of being able to
294:28 catch when the car starts slipping. You get this sensation in your body that the
294:33 G-forces are a little off, the slip angle is a little off, and then you have to counter steer. And obviously the best
294:39 race car drivers just feel like an intuition. I have some intuition. I don't have all of it. So I do
294:45 occasionally spin my uh car, but that's the challenge. From everything you've
294:50 studied and understand, what what does it take to achieve mastery in racing? Like what does it take to become the
294:56 best race car driver in the world? Obsession is part of it. When I read and
295:02 hear about Senna and the other greats, they were just singularly focused. Max
295:08 Vstappen is the current champion of the world and he is the same kind. Max has
295:15 been fascinating to watch. I mean, he's a phenomenal race car driver, but he also literally does nothing else. When
295:21 he's not at the racetrack, he's driving sim racing. like he's literally in video
295:26 games doing more racing when he's not doing all the racing he's already doing. Is there a specific skill they have that
295:33 like stands out to you as supernatural through all that obsession? Like what uh
295:38 is it a bunch of factors or are they actually able to you like you said develop a sense? Is it is it that
295:43 they're able to get to the very edge of the slip? They're able to develop very fine-tuned
295:49 sensibilities for when the car is sliding. They can feel just these tiny moments or movements in the chassis that
295:55 transports up usually through their ass. That's why you call it like a a butt meter that goes up and you feel like the
296:02 car is loose or you feel like you're just about to lock up, you can really
296:09 hone that tuning. Then the other thing is you have to have really good reaction time. And when you look at great Formula
296:16 1 drivers, they can generally have a reaction time of just under 200 milliseconds, which is awesome. And even
296:23 10 milliseconds difference makes a huge difference. You'll see it when the Formula 1 grid, for example, they do a
296:29 standing start and you see the five red lights come on. And when the last light goes out, they're supposed to release
296:35 the clutch and get going. And they can time this so you can see exactly who has the reaction time. And even being off by
296:43 20 milliseconds can make the difference of whether you're in front or behind at the first corner. How much of winning is also just this
296:50 the strategy of jostling for position? There's some of that and some of it is also just nerve. Who wants it more?
296:57 That's exactly when that sense of danger comes in. There's a great quote from uh
297:03 Fernando Alonso when he was driving at Suzuka against Schumarker. I think
297:09 they're coming up to this incredibly fast corner. It's very dangerous. And
297:16 Alonzo basically accounts. I was going to make the pass because I knew he had a wife and kids at home.
297:22 That's so gangster. Just absolutely rude. Right. Wow. That I knew he valued life more than I
297:28 did. So there's a bit of poker sometimes in that. Who's going to yield? There's a
297:34 bit of chicken race in that regard. And sometimes it doesn't work. No one yields and you both crash. But very often one
297:41 person will blink first. Can the pass be both on the inside and the outside or is you can pass wherever you want as long
297:46 as you have just a slight part of the car on the racetrack and then you just improvise and take
297:53 risks. What a what a sport. What and then Santa of course is like a legendary
297:59 risk taker. Yes. And even before him, by the time I mean,
298:04 he died in the 90s, but by the time we got to the 90s, racing was already a lot
298:10 safer than it was when Nikauder raced in the 60s. That level of danger is no longer there.
298:17 There's still just a remnant of it. And it is still dangerous, but nothing like that. And it's a little hard to compare
298:23 through the ages like who's the greatest driver of all time. I think there's a fair argument that Senna is, but we
298:30 don't have the data. We don't know who he was up against. Like, how would he fair if we pitted him against Max Vstappen today? I do think sometimes
298:36 that you can have a bit of a nostalgia for the all-time greats, but the world
298:41 moves forward and new records are being set all the time. And the professionalism keeps improving sometimes to the detriment of the sport.
298:48 I think there's a lot of professional drivers who are not only just very good at driving, but are very good at being
298:53 corporate spokespeople. And it used to be quite different. There used to be more characters in racing that had a bit
298:59 more personality that they were allowed to shine because there weren't a billion sponsorships on the line that they were
299:05 afraid to lose. Ridiculous question. What's the greatest car ever made? Or maybe uh what's the funnest one to drive?
299:12 The greatest car for me of all time is the Pagani S. Okay, I'm looking this up. Pagani sand.
299:18 So, the Pagani S was made by this wonderful Argentinian called Horashio
299:24 Pagani. My god, that's a beautiful car. Wow. It's a gorgeous car. You can look up mine. It's the Pagani Zonda HH. Yep. So,
299:34 that's um a car I had made in 2010 after
299:40 we visited the factory in Modernum and by sheer accident ended up with this
299:49 car. But it became my favorite car in the world basically when I watched an episode of Top Gear I think in 2005
299:58 where one of the presenters was driving the Pagani F around and I just thought that's the most beautiful car in the
300:04 world. It is the most incredibly sounding car in the world.
300:10 If I one day have the option, this is what I want. And then I had the option
300:16 in 2010. I've had the car ever since. I'm never ever going to sell it. It's
300:21 truly a masterpiece that stood the test of time. There's some great cars from
300:26 history that are recognized as being great in their time. This car is still great. Have you taken on the racetrack?
300:32 I have. It's terrible at that, but I I don't want to say it's terrible at that. That's not what it's designed for. It's
300:37 designed for the road, and that's why it's great. There are a lot of fast cars
300:42 that are straddling their race car for the road. You don't actually want a race
300:48 car for the world. A race car for the world is a pain in the ass. It's way too stiff. It's way too loud. It's way too uncomfortable. You can't actually take
300:54 it on a road trip. So, this actually feels good driving. Totally. And you of course always go to speed
300:60 limit. Always. This is why I love having this car in Spain cuz they're uh a little
301:05 more relaxed. Not entirely relaxed, but more relaxed than they are in a lot of places. In Denmark, I kid you not, if
301:12 you are on the highway and you go more than twice the speed limit, they confiscate your car and keep it.
301:18 You're not getting it back. They don't even care if it's your car or not. Like, if if you were boring my car and you
301:23 went twice the speed limit, it's gone. So, they don't do that in Spain. I mean, they in most places, except for the
301:30 German Autobon, they get pissy. If you go twice the speed limit for all sorts of fair reasons. I'm not advocating that
301:36 you should be going much more than that. But there are certain special roads where you can't open things up and no
301:42 one's in harm's way. And that's an incredible sensation. And I do think that some of those speed limits actually
301:47 are kind of silly. And I'm not just saying that in the in a vacuum. In Germany, they have the glorious Autobon.
301:53 And on the Autobon, there is no speed limit in a bunch of segments. And they're so committed to their speed
302:00 limitless Autobon, which is, by the way, very weird of Germans. They usually love rules. They usually very precise about.
302:07 And then they have this glorious thing called the Ottabban. There was a great case a couple of years ago where a guy
302:13 took out a a Bugatti Vash Chiron went 400 km an hour on the Autobon and he
302:18 filmed it and put it on YouTube and a case was brought against him because even though they don't have a speed
302:24 limit, they do have rules that you can't drive recklessly and he won the case. He wasn't driving recklessly. He was just
302:29 going very very fast. I've done the Autobon a couple of times. Uh my wife
302:35 and I went on a road trip in Europe in 2009 and I got the Lamborghini Giata we were
302:41 driving up to 200 miles an hour and it I'd driven 200 miles an hour or close to
302:47 it on a racetrack before. That feels like one thing driving on a public road 200 mph feels really really fast.
302:53 Scary. Actually a little scary. Yes. Because you constantly think like on a racetrack
302:59 you know the road you know the surface. You can walk the track most of the time. You can know if there's a dip on a public road. You can't know if there's
303:05 suddenly a pothole. Presumably, there's not going to be a pothole on the German autobon, but it does feel a little
303:11 scary, but also exhilarating. Speed is just intrinsically really fun. I don't
303:17 know anyone I've taken out in a fast car. Well, actually, I do know a few people. Most people that take out in a
303:23 fast car, they grin. Just it's a human reaction to grin when you go really
303:28 fast. Do you know what the fastest you've ever gone? I was probably at Lamar. I think when
303:33 the LMP2s were at their maximum power and had 600 horsepower and really sticky tires, we were going 340 km an hour,
303:41 which is just over 200 mph. A bit over 200 mph. That's that does feel fast. And
303:47 it's really interesting with speed is that the difference between going let's say 150 and 160
303:54 doesn't feel that much. actually those 10 uh mph, but the difference between going 190 and 200 feels crazy faster,
304:03 which as a percentage change is actually less than going from 150 to 160. But
304:09 there's some sense of exponentiality once you get up to those limits. Um
304:14 where it's just on a complete different level. Yeah, cuz to me like 110
304:19 120 feels fast. 200 that's that's crazy. It really is crazy.
304:26 I got to ask you about the the the details of your programming
304:32 setup, the IDE, all that kind of stuff. Let's paint the picture of the perfect
304:38 uh programming setup. Do you have a a programming setup that you enjoy? Are you very flexible? Like how many
304:44 monitors, what kind of keyboard, what kind of chair, what kind of desk? It's funny
304:52 because if you'd asked me, let's see, a year and a half ago, I would have given you the same answer as I would given
304:58 anyone for basically 20 years. I want a Mac. I like the Magic Keyboard.
305:07 I like the single monitor. Apple makes an awesome 6K 32-in XDR screen that I've
305:14 still haven't found anyone who beaten that I still use. Even though I switched away from Apple computers, I still use
305:20 their monitor because it's just fantastic. But I've always been a single screen kind of guy. I do like a big
305:26 screen, but I don't want multiple screens. I've never found that that really works with my p perception. I
305:32 want to be able to just focus on a single thing. I don't want all of it all over the place. And I've always used multiple virtual desktops and being able
305:39 to switch back and forth between those things. But the setup I have today is
305:44 Linux. that I switched to a little over a year ago after I finally got fed up with Apple enough that I couldn't do
305:52 that anymore. And then I use this lowprofile mechanical keyboard called
305:58 the low free flow 84 which is just the most glorious sounding
306:06 keyboard I've ever heard. I know there are a lot of connoisseurs of mechanical keyboards that'll probably contest me on
306:13 this. this is too thcky or too clicky or too clacky or whatever. But for me, the
306:19 Lowree Flow 84 is just a delight that I
306:24 did not even know existed, which is so funny because I mean, I've been programming for a long time. Mechanical keyboards have been a thing for a long
306:31 time. And the keyboard when you look at it like this, it just kind of it looks plain. It doesn't look extravagant, but
306:37 the tactile sensation you get out of pushing those keys, the the talky sound
306:43 that you hear when the keys hit the board, it's just sublime. And I'm kicking myself that I was in this Mac
306:52 bubble for so long that I wasn't even in the market to find this. I didn't I knew
306:58 mechanical keyboards existed, but I to be blunt, I thought it was a bit of a nerd thing that only real nerds that
307:04 were much more nerdy than me would ever care about. And then I got out of the Apple bubble and suddenly I had to find everything
307:11 again. I had to find a new mouse. I had to find a new keyboard. I had to find everything. And I thought like, all right, let me give mechanical keyboards
307:17 a try. And I gave quite a few of them a try. The Keyron is one of the big brands in that. I didn't like that at all. I
307:23 tried a bunch of other keyboards and then I finally found this keyboard and I just went like angels are singing. Where
307:30 have you been my whole life? We spent as programmers so much of our time interacting with those keys. It really
307:35 kind of matters in a way I didn't fully appreciate. I used to defend the Apple
307:41 Magic Keyboard. Like it's it's great. It's actually a great keyboard. And I think for what it is, this ultra low profile, ultra low travel is actually a
307:48 really nice keyboard. But once you've tried a longer travel mechanical keyboard, there's no going back.
307:54 Uh you do have to remember in in many ways both on the software side and the hardware side that you do spend a lot of
308:01 hours. Yes. Behind the computer. It's worth it's worth investing in. And also worth exploring until you find
308:07 the thing where the angel starts singing or whatever. That's exactly right. And I I'm I actually do regret that a little bit.
308:13 Especially with this damn keyboard. I I could have been listening to these beautiful thoughty keys for years and
308:19 years, but uh sometimes you have to get really pissed off before you open your
308:25 eyes and see that something else exists. I feel the same way about Linux. So, I've been using Linux on the server
308:31 since late '9s probably. We ran servers on Linux back then. I never seriously
308:37 considered it as a desktop option. I never ran Linux before directly myself.
308:43 I always thought, you know what, I just I want to focus on programming. I don't have time for all these configuration
308:48 files and all this setup bullshit and and whatnot. And Apple is close enough. It's built on Unix underpinnings. Why do
308:54 why do I need to bother with Linux? And again, it was one of those things I needed to try new things and try
309:03 something else to realize that there is other things other than Apple. And again, it's not because
309:09 I hate Apple. I think they still make good computers. I think a lot of the software is still also pretty okay, but
309:16 I have come to realize that as a web developer, Linux is just better. Yeah, Linux is just better. It's closer to
309:22 what I deploy on. The tooling is actually phenomenal. And if you spend a bit of time setting it up, you can
309:29 record a reproducible environment that I've now done with this cube concept or
309:36 project that I've done that I can set up a new Linux machine in less than 30 minutes and it's perfect. It's not
309:42 pretty good. It's not like I still need to spend two hours on. It's perfect because you can encode all aspects of
309:48 the development environment into this. And I didn't know I I didn't even know
309:53 to be fair that Linux could look as good as it can. If you look at a stock Ubuntu
309:59 or Fedora or Boot I mean not that it's ugly but I'd pick the Mac in day of the
310:04 week. You look at a you look at I mean I'm biased here of course because I built it with my own sensibilities but I
310:10 look at that and go like this is better. This is beautiful. And then you look at some of those true Linux rising setups
310:17 where people go nuts with everything and you go, "Oh yeah, I remember when computers used to be fun in this way,
310:24 when there was this individuality and this setup and it wasn't just all bland the sameness."
310:31 And I think that's a flip side sometimes of something like Apple where they have really strong opinions and they have really good opinions. They have very
310:37 good taste and it looks very nice and it also looks totally the same. And Linux has far more variety and far more
310:43 texture and flavor. Sometimes also annoyances and bugs and whatever. But I
310:48 run Linux now. It's Auntu based with the Yamakoup stuff on top. The low free
310:54 keyboard. I use a uh Logitech uh what's it called? The MS3 mouse which I love
311:01 how it feels in my hand. I don't love how it looks. I actually was a magic mouse stand for the longest time. I
311:08 thought it was genius that Apple integrated the trackpad into a mouse and I I used that and I always thought it
311:15 was ridiculous that people would slag it just because you had to charge it by flipping it over cuz the battery would
311:21 last for 3 months and then you charge it for half an hour. I thought like that's a perfect compatibility with my
311:27 sensibilities. I don't mind giving up a little inconvenience if something is beautiful and that magic mouse is beautiful but it wasn't going to work on
311:34 Linux. So I found something else. the the MS3 is is is nice, but I sometimes do wish like uh the magic mouse is
311:40 pretty good. Yeah, Linux is really great for customizing everything for for tiling, for macros, for all of that. I also do
311:46 the same in Windows with auto hotkey or just customize the whole thing to your
311:52 to your preferences. If you're a developer, you should learn how to control your environment with the keyboard.
311:58 It's just it's faster. It's more fluid. I think one of those silly things I've come to truly appreciate about my alma
312:06 setup is that I can in whatever time it takes to refresh the screen, probably 5
312:11 milliseconds, switch from one virtual desktop to another. Even on Windows, can't get it that
312:18 smooth. You can get close, can't get it that smooth. on Mac OS. For whatever reason,
312:24 Apple insists on having this infuriating animation when you switch between
312:29 virtual desktops, which makes it you don't want to. You don't want to run full screen apps because it's too
312:34 cumbersome to switch between the virtual desktops. The kind of immediacy that you can get from a wonderful Linux setup in
312:42 that regard is just next level. Yeah. And it seems like a subtle thing but you know difference in milliseconds
312:47 and latency between switching the virtual desktops for example. I don't know it changes
312:53 it changes how you use the computer. It really does. Similar thing with VR right there. If there's some kind of latency or
312:59 like it just completely takes you out of it. And it's funny, I actually had to watch I think it was the priming
313:11 between those virtual desktops. And I'd always been using virtual desktops, but I didn't like switching too much because
313:16 just of that latency, and it's like, oh, you can do that on Linux? Oh, that's pretty cool. Yeah. So, I run that and then my editor of
313:23 choice now is Neoim. Oh, good. All right. Well, we're out of time. No. All right. You did for many,
313:29 many years you used what is it? Textmate. Yes, Textmate. That was actually that was the main blocker of moving away from
313:36 Apple. Everything else I thought, do you know what? I can swing it. But textmate was and is a wonderful
313:43 editor. One I helped birth into this world. The programmer Alan Uggo is a
313:51 good friend of mine all the way back from those the party days when we were lugging our computers around and he was
313:56 a big uh Mac guy and in in 2005 he was writing this editor um
314:02 and I helped him with the project management of kind of keeping him on track, keeping him focused on getting
314:07 something released because I really wanted it for myself and I thought this was the last editor. I thought I was
314:14 never going to switch. Forgive me for not knowing, but how featureful is this editor? Is this It's quite featureful,
314:21 but it's it's it's um a guey driven editor in some regards. It
314:27 was really early on with u ways of recording macros and having sort of
314:34 sophisticated syntax highlighting and it did a bunch of first and it was just a really pleasant editing experience. I
314:40 think these days a lot of people would just use VS Code. VS codes exist in the same universe as Textmate in some ways
314:48 and actually I think is compatible with the original Textmate bundles, the original Textmate format. So it really
314:54 trailed a path there, but it also just didn't evolve. Now a lot of people saw a huge problem
315:00 with that. They were like, "Oh, it needs to have more features. It needs to have all these things." I was like, "I'm happy with this text editor that hasn't
315:06 changed at all." basically when Allan stopped working on it for a decade or more. I don't need anything else because
315:13 as our original discussion went, I don't want an IDE. I don't want the editor to
315:18 write code for me. I want a text editor. I want to interact with characters
315:24 directly. And Neoim allows me to do that in some ways that
315:29 are even better than Text. And I love Textmate. But BI, as you know, once you
315:35 learn the commands, and it sounds I sometimes feel like BI fans overplay how difficult it is to learn because it
315:41 makes them perhaps seem kind of more awesome that they were able to do it. It's not that difficult and it doesn't
315:48 take that long in my opinion to learn just enough combo moves to get that high
315:54 of holy shit, I could not do this in any other edit. How long did it take you? And by the way, I don't know. I'm still I haven't
315:60 yet. Well, I know intellectually, but just like with kids, I haven't You haven't
316:05 I haven't uh gone in all the way in. I haven't used them. You You have a You have a treat in in
316:10 mind? Well, I switched in about I had three day when I switched here about a
316:15 year ago. I had three days of cursing where I thought it was absolutely terrible and it was never going to
316:20 happen. And I had three days of annoyance and already the next week I was like, "This is sweet. I'm not going
316:25 anywhere." Oh, wow. But I also had a bit of a head start about 20 years ago in the early
316:31 2000s. I tried Vim for like a summer and it didn't stick. I didn't for
316:37 whatever reason love it at the time. But Neovim is really good. The key to Neoim is to realize that you don't have to
316:43 build the whole damn editor yourself. So a lot of Neovim stands are like here's how to write the confict from scratch
316:49 over 17 episodes. It's going to take you three weeks. I I don't care that much. I
316:55 love a great editor. I love to tailor it a little bit, but not that much. So, you have to pair Neoim with this thing
317:01 called Lazy Vim. LazyVim.org is a distribution for Neoim that takes
317:08 all the drudgery out of getting an amazing editor experience right out of the box.
317:14 Ridiculous question. We talked about a bunch of programming languages. Uh, you told us how much you love JavaScript.
317:20 It's your second favorite programming language. Um, would Typescript be the third? Then
317:26 Typescript wouldn't even be in this universe. I hate TypeScript as much as I like
317:32 JavaScript. So, what you hate? Oh, man. I'm not smart enough to understand the math of
317:37 that. Okay. Before I ask about other programming languages, what's if you can
317:43 encapsulate your hatred of Typescript into something that could be human
317:48 interpretable, what would be the reasoning? that JavaScript smells a lot like Ruby when it comes to some aspects
317:56 of its meta programming and TypeScript just complicates that to an infuriating
318:01 degree when you're trying to write that kind of code and even when you're trying to write the normal kind of code none of
318:07 the benefits that acrew to people who like it like autocomp completion is something I care about I don't care
318:13 about autocomp completion because I'm not using an IDE now I understand that that is part of what separates it and
318:19 why I don't see the benefits. I only see the costs. I see the extra typing. I see the
318:25 type gymnastics that you sometimes have to do and where a bunch of people give up and just do any instead, right? Like
318:32 that they don't actually use the type system because it's just too frustrating to use. So, I've ever only felt the
318:38 frustration of Typescript and the obfuscation of Typescript in the code
318:44 that gave me no payoff. Again, I understand that there is a payoff. I don't want the payoff. So for my
318:51 situation, I'm not willing to make the trade and I'm not willing to take a
318:56 language that underneath is as dynamic of a language as Rubious and then turn
319:03 it into this pretend statically type language. I find that just intellectually insulting.
319:08 Do you think it will and do you think it should die Typescript? I don't want to take something away from
319:13 people who enjoy it. So if you like Typescript, all the most part of you, if you're using TypeScript because you
319:19 think that's what a professional programmer is supposed to do, here's my permission. You don't have to use TypeScript. There's something deeply
319:26 enjoy enjoyable about a brilliant programmer such as yourself, a DHA
319:32 talking shit. It's just it's like one of my favorite things in life. Uh what are the top three programming languages
319:39 everyone should learn? If you're talking to a beginner, I would 100% start with Ruby. It is
319:45 magic for beginners in terms of just understanding the core concepts of conditionals and loops and whatever
319:51 because it makes it so easy. Even if you're just making a shell program that's outputting to the terminal,
319:58 getting hello world running in Ruby is basically puts ps space start quote
320:06 hello world end quote. You're done, right? There's no fluff. There's nothing to rabbit into. There are other
320:11 languages that does that especially in the pearl or python would be rather similar but go would not java would not.
320:19 There's a lot of other languages that have a lot more ceremony and boilerplate. Ruby has none of it. So
320:24 it's a wonderful starting language. There's a book called learn to program
320:29 by pine that uses Ruby essentially to just teach basic programming principles
320:35 that I've seen heavily recommended. So that's a great language. How quickly would you go to Rails? It depends on what you want to do. If you
320:41 want to build web applications, go to Rails right away. Learn Ruby along with Rails because I think what really helps
320:48 power through learning programming is to build programs that you want. Right? If you're just learning it in the abstract,
320:54 it's difficult to motivate yourself to actually do it well. Some people learn languages just for the fun of them. Most
321:00 people do not. Most people learn it because they have a mission. They want to build a program. They want to become
321:06 a programmer. So, you got to use it for something real. And I actually find that it's easier to learn programming that way too because it drives your learning
321:12 process. You can't just learn the whole thing up front. You can't just sit down and read the language specification then
321:18 go like oo like neo now I know kung fu now I know Ruby. It doesn't download
321:24 that way. You actually have to type it out in anger on a real program. Yeah. Yeah. For sure.
321:30 So I would start there. But then number two, I probably would be JavaScript because JavaScript just is the language
321:36 you need to know if you want to work with the web. And the web is the greatest application platform of all
321:42 time. If you're making business software, collaboration software, all this kind of stuff. If you're making
321:48 video games, you should probably go off learn C++ or C or something else like that. But if you're in the realm of web
321:54 applications, you got to learn JavaScript. Regardless of what else you learn, you got to learn JavaScript. So if you're learning Ruby, what does Ruby
322:02 not have in terms of programming concepts that you would need other languages for?
322:09 I don't know if there's any concepts missing, but it doesn't have the speed or the low-level access of memory
322:16 manipulation that you would need to build a 3D gaming engine, for example. No one's going to build that in Ruby.
322:22 You can build quite low-level stuff when it comes to web technologies in Ruby,
322:28 but at some point you're going to hit the limit and you should use something else. I'm not someone who prescribed
322:34 just Ruby for everything. Just once you reach the level of abstraction that's involved with web applications, Ruby is
322:41 superb. But if you're writing, for example, a um HTTP proxy, Go is great
322:47 for that. We've written quite a few HTTP proxies lately at the company for various reasons, including our cloud
322:53 exit and so forth. And Kevin, one of the programs I'm working with, he writes all of that in Go. Go. Just have the
322:59 primitives and it has the pace and the speed to do that really well. I highly
323:05 recommend it. If you're writing an HTTP general proxy, do it in Go. Great language for that. Don't write your
323:11 business logic in Go. I know people do, but I don't see the point in that. So, what would you say the three? So go
323:16 Ruby plus Rails JavaScript. Yeah, if you're willing or interested in
323:21 working with the web, I'd probably pick those three. Go, Ruby and JavaScript. Go Ruby and JavaScript. Okay. Functional
323:27 languages. Someone's talking about Okamel. There's always they are always going to show up. They're always I it must be
323:34 some kind of um OAML industrial complex or something like this. But they always say mention O
323:40 camel. I love that there are people who love functional languages to that
323:46 degree. Those people are not me. I don't care at all. Like I care about functional principles when they help me
323:53 in these isolated cases where that's just better than everything else. But at heart, I'm an object-oriented
323:59 guy. That's just how I think about programs. That's how I like to think about programs. That's how I carve up a
324:04 big problem space into a domain language. Objects are my gem.
324:10 Yeah. Yeah, me too. So I I programmed a list a bunch for like AI applications for uh basic so chess engines that kind
324:19 of stuff and I did try just to force myself to program just a very basic game
324:24 of life simulation and it's it's not it's it's much you know lisp is just
324:31 parenthesis everywhere. It's actually not readable at all. That's my bad with uh okamel is very
324:38 very intuitive very readable. this I really should pick up a language like that at some point. I've been
324:43 programming long enough that it's a little embarrassing that I haven't actually done anything real in anger in a fully functional programming language.
324:50 Yeah, but like I I have to figure out I'm sure there's an answer to this. What can I do that would be useful for me
324:57 like that I actually want to build? That's my problem. That a functional language is better suited for.
325:03 That's right. Because I really want to experience the language properly. That's right. Yeah. Cuz I'm still Yeah. I'm very ob at
325:09 this point I'm very object-oriented. Yes. And that's my problem too. I just I
325:14 don't care as much about these low-level problems in computer science. I care about the high level. I care about
325:20 writing software. I care about the abstraction layer that really floats
325:27 well with web applications and business logic. And I just I've come to accept that about myself. Even though as we
325:33 talked about when I was a kid, I really wanted to become a games programmer. And then I saw what it took to write a
325:39 collision detection engine and I go like, "Yeah, that's not me at all. I'm never going to be into vector matrix
325:44 manipulation or any of that stuff. It's way too much math. And I'm more of a
325:52 writing person than I am of a math person." I mean, just in the way you were speaking today, you have like a
325:58 poetic literary approach to programming. Yes.
326:04 Yeah. That's actually exactly right. So I did actually a keynote at Railscom 10 years
326:09 ago where I called myself a software writer. I mean I'm not the first person to say that software writer has been in
326:15 the vernacular for a long time. But the modern identity that most programmers adopt
326:22 when they're trying to be serious is software engineer. And I reject that label. I'm not an engineer. Occasionally
326:28 I dabble in some engineering but the vast majority of time I'm a software writer. I write software for human
326:37 consumption and for my own delight. I can get away with that because I'm
326:42 working in a high level language like Ruby, working on collaboration software and to-do lists and all the other stuff.
326:49 Again, if I was trying to apply my talent to writing 3D game engines,
326:55 no, that's not the right mindset. That's not the right identity. But I find that the software engineering identity
327:02 flattens thing a little bit. I'd like to think that we have software writers and software mathematicians for example and
327:09 then those are actually richer ways of describing the abstraction level that you're working at than engineer.
327:16 Yeah. And I think if AI becomes more and more successful,
327:22 I think we'll need software writer skill more and more because it feels like
327:28 that's the realm of which cuz it's not writer. You're going to have to do the software.
327:35 You're going to have to be a computer person. But there had there's a more I
327:40 don't know uh I don't want to romanticize it, but it's more poetic. It's more literary. It's more feels like
327:46 writing a a good blog post than um I actually wish that AI had a bit higher
327:51 standards for writing. I find the fact that it accepts my slobby incomplete
327:57 sentences a little offensive. I wish there was like a strict mode for AI where it would snap my fingers if I was
328:03 just feeding it keywords and like speak proper, do pronunciation, do
328:09 punctuation. Uh because I love that. I love crafting
328:15 a just right sentence that hasn't been boiled down that it has no meat on it.
328:20 It has no character in it. It's succinct. It's not overly flowery. It's
328:26 just right. That writing phase to me is just addictive. And I find that when
328:34 programming is the best, it's almost equivalent exactly to that. You also have to solve a problem. You're not just
328:40 communicating a solution. and you have to actually figure out what are you trying to say but even writing has that
328:45 half the time when I start writing a blog post I don't know exactly which arguments I'm going to use they develop
328:52 as part of the writing process and that's how writing software happens too you know roughly the kind of problem
328:58 you're trying to solve you know ex don't know exactly how you're going to solve it and as you start typing the solution
329:04 emerges and actually as far as I understand you and Jason working on a new book it's in the early days of that
329:11 kind of topic. I I think he said it's some he tweeted that it's going to be titled something like we don't know what
329:18 we're doing upfront or something like that. That kind of topic and you figure out along the way. That's a big part of it. trying to give
329:25 more people the permission to trust your own instincts and their own gut and realizing that developing
329:34 that supercomputer in your stomach is actually the work of a career and that
329:39 you should not discard those feelings in preference to over
329:47 comp or not even complicated to analytics to intellectualism. Very often when we look at the big decisions we've
329:54 had to make, they've come from the gut where you cannot fully articulate like why do I think this is the right thing?
329:59 Well, because I've been in this business for 20 years and I've seen a bunch of things. I've talked to a bunch of people and that is percolating into this being
330:06 the right answer. A lot of people are very skeptical about that in business or unable to trust it
330:12 because it feels like they can't rationalize. Why are we doing something? Well, because I feel like it. Damn it.
330:18 That's a great privilege of being a bootstrapped independent founder who don't owe their business to someone else
330:24 and doesn't have to produce a return because I feel like a lot of the bullshit really creeps in when you're trying to rationalize to other people
330:31 why you do the things you do and why you take the decisions that you do. If you don't have anyone to answer to, you're
330:38 free to follow your gut. And that's hell of enjoyable way to work. And it's
330:46 also in very often uh the correct way to work. Your gut knows a lot. Like you can't articulate it, but it's spot-on
330:53 more times than not. Yeah. Having to make a plan can be a paralyzing thing. I've often I mean I suppose there's
330:59 different kinds of brains. And first of all, I can't wait to read that book if it materializes.
331:05 Uh they I often feel like in the more in the more interesting things I do in my
331:11 life, I really don't know what I'm doing up up front. And I think there's a lot of people around me that care for me
331:18 that really want me to know what I'm doing. They're like, "What's the plan? What's the why are you doing this crazy
331:24 thing?" And I if if I had to wait until I have a plan, I'm not going to do it. People are they have different brains on
331:31 this kind of stuff. Some people really are planners and it maybe energizes them. But I think most creative
331:37 pursuits, most really interesting, most novel pursuits are like you kind of have
331:43 to just take the leap and then just figure out as you go. My favorite essay in rework is the last
331:49 one and it's entitled inspiration is perishable. And I think that captures a
331:55 lot of it that if you take the time to do a detailed plan, you may very well
332:00 have lost the inspiration by the time you're done. If you follow the inspiration in that moment and trust
332:06 your gut, trust your own competence that you will figure it out, you're going to
332:11 get so much more back. You're going to go on the adventure you otherwise wouldn't have. Whether that's just a business decisions or a life decision,
332:18 you have to seize that inspiration. There's a great set of children's books
332:24 written by this Japanese author about chasing an idea and trying to get a hold
332:30 of it. And it's beautifully illustrated as an idea, something that's floating around as something you have to catch
332:36 and latch onto that I really feel captures this notion that inspiration is perishable. It'll disappear. If you just
332:43 put it back on the shelf and say like, well, I got to be diligent about this. I got to line up a plan. you may run out
332:49 and then there's no there's no steam to keep going. I have to ask you about open source.
332:57 What does it take uh to run a successful open source project? You've uh spoken
333:02 about that it's a misconception that uh open source is democratic. It's actually
333:07 meritocratic. I thought that's a beautiful way to put it. So there's often is a kind of a
333:14 benevolent dictator at top often. So, can you just speak to that having run
333:20 successful open source projects yourself and and being a benevolent dictator yourself,
333:26 which is going to be a bit of a biased uh piece of evidence here, but
333:31 I you should definitely have dictators and they should control everything, especially when the dictator is me now.
333:38 Well, I think I learned very early on that a quick way to burn out in open
333:44 source is to treat it as a business, as though your users are customers, as
333:50 though they have claims of legitimacy on your time and your attention and your
333:55 direction. Because I faced this almost immediately with Ruby and Rails as soon as it was
334:01 released. There were a million peoples who had all sorts of opinions about where I ought to take it. and not just
334:07 opinions, but actually demands. Unless you implement an Oracle database adapter, this is always going to be a
334:14 toy. It was actually more or less that exact demand that prompted me to have a slide
334:21 at one of the early Rails conferences that just said, "Fuck you."
334:26 Yeah, I saw that. I'm not going to do what you tell me to. I'm here as a bringer of gift. I am
334:32 sharing code that I wrote on my own time on my own valition and you don't have to
334:40 say thank you. I mean be nice if you did. You can take the code and do whatever you want with it. You can
334:45 contribute back if you want but you can't tell me what to do or where to go or how to act. I'm not a vendor. This is
334:54 a fundamental misconception that users of open source occasionally step into because they're used to buying software
335:00 from companies who really care about their business. I care about people
335:06 using my software. I think it's great, but we don't have a transactional relationship. I don't get something back
335:13 when you tell me what to do except grief and I don't want it. So you can keep it.
335:19 So my open-source philosophy from the start has been I got to do this
335:24 primarily for me. I love when other people find use in my open source. It's not my primary motivation. I'm not
335:31 primarily doing it for other people. I'm primarily doing it for me and my own objectives because um as Adam Smith
335:39 said, it's not for the benevolence of the butcher that we expect our daily meat. It's for his self-interest. And I
335:46 actually find that to be a beautiful thought that our comments increase in
335:52 value when we all pursue our self-interest certainly in the realm of open source. This is also why I reject
335:58 this notion that open source is in some sort of crisis that there's a funding crisis that we have to spend more. No,
336:05 we don't. Open source has never been doing better. Open source has never controlled more domains in software than
336:11 it has right now. There is no crisis. There's a misconception from some people
336:17 making open source and from a lot of people using open source that open source is primarily like commercial
336:23 software something you buy and something where you can then make demands as a customer and that the customer is always
336:30 right. Customer is not always right. Not even in business but certainly not in open source. In open source the customer
336:37 as it is is a receiver of gifts. We are having a gift exchange. I show up and
336:43 give you my code. If you like it, you can use it. And if you have some code that fits in with where I'm going with
336:50 this, I would love to get those gifts back. And we can keep trading like that. I give you more gifts, you give me some
336:56 of your gifts. Together, we pull all the gifts such that someone showing up brand new just get a mountain of gifts. This
337:03 is the magic thing of open source is it increases the total sum value of what's in the comments when we all pursue our
337:10 own self-interest. So, I'm building things for Rails that I need. And you know what? You want me to do that. You
337:16 do not want me to build things that I don't need on behalf of other people because I'll do a crap job. I do I build
337:22 much better software when I can evaluate the quality of that software by my own
337:28 use. I have to I need this feature. I'm going to build a good version of that feature and I'm going to build just
337:34 enough just for me. So, I'm not going to bloat it. I'm not trying to attract a customer here. I'm not trying to see
337:39 some angle. I'm just building what I need. And if you go into open source
337:45 with that mentality that you're building for you and everything else is a bonus,
337:51 I think you have all the ingredients to go the distance. I think the people who burn out in open source is when they go
337:57 in thinking, I'm making all these gifts. I don't really need them myself, but I'm like hoping someone else does and maybe
338:03 they'll also give me some money. That's a losing proposition. It never basically works. If you want money for your
338:10 software, you should just sell it. We have a perfectly fine model of commercial software that people can make
338:16 that kind and then they can sell it. But I find a lot of confusion, let's just call it that
338:22 politely, in open source contributors who want to have their cake and eat it too. They like the mode of working with
338:29 open source. They maybe even like the status that comes from open source, but they also would like to earn a living from making that open source. And
338:36 therefore they occasionally end up with the kind of grievances that someone who
338:41 feels underappreciated at work will develop when others aren't doing enough to recognize their great gifts and and
338:47 then they might walk away. I wish I had one of the I wish I had more insight
338:52 into their mind state of the individual people that are running these projects
338:58 like if they're feeling sad or they need more money or they're burn like it's just such a dark box. It can be.
339:05 I mean, of course, there's some communication, but I just I just sadly see too often they just kind of walk
339:11 away, right? And I think that's actually also part of the beauty of open source. You
339:17 are not obligated to do this code forever. You're obligated to do this for as long as you want to do it.
339:23 That's basically your own obligation. But there is a I know. Okay, you might criticize this and push back. You did
339:29 write a blog post on forever until the end of the internet with Tadalist. There is a beautiful aspect and you
339:37 found a good balance there. But I don't know, you're bringing so much joy to people with this thing you
339:43 created. It's not an obligation, but there's a real beauty to taking care of this thing you've created and not
339:50 forgetting. I think we what I think what the open-source creator is not seeing
339:55 enough I mean there's like how how many lives you're making better.
340:02 There's certain pieces of software that I just quietly use a lot. Yes. And like they bring my life joy and I
340:09 wish I could communicate that. Well, there's ways to donate, but it's inefficient. It's usually hard to
340:15 donate. It is there's some ways for some people that made it easier. GitHub
340:21 donations is one way of doing it. I donate to a few people even though I don't love the paradigm. I also accept
340:27 that we can have multiple paradigms. except that I can do open source for one set of motivations and other people can do open source for other motivations. We
340:34 don't all have to do it the same way. But I do want to counter the misconception that open source is
340:40 somehow in a crisis unless we all start paying for open source. That model already exists. It's commercial
340:46 software. It works very well and plenty of great companies have been built off the back of it and the expectations are
340:52 very clear. I pay you this amount and I get this software. Open source once you
340:57 start mixing money into it gets real muddy real fast. And a lot of it is just from those misaligned expectations that
341:04 if you feel like you're starving artists as an open source developer and you are
341:09 owed x amount of money because your software is popular, you're delusional
341:15 and you need to knock that off. Just get back on track where you realize that you're putting gifts into the world. And
341:22 if you get something back in terms of monetary compensation, okay, that's a bonus. But if you need that money back
341:28 in terms of monetary compensation, you should just charge for software or go work for a software company that will
341:33 employ you to do open source. There's tons of that. That is probably actually the primary mode that open source
341:39 software is being developed in the world today. Commercial companies making open source that they need
341:44 themselves and then contributing it back. So I'm glad you brought sort of like drew some hard lines here. is a good
341:50 moment to bring up uh what I think is the maybe one of the greatest
341:57 open-source projects ever, WordPress, and uh you spoke up in October
342:06 24 uh about some of the stuff that's been going on with WordPress's founder, Matt
342:12 Mullig, in a blog post, Open Source Royalty and Mad Kings. It's a really
342:17 good blog post on sort of just the idea of benevolent dictators for life, this model for open source projects. And then
342:25 the basic implication was that Matt as the BDFL of WordPress has lost
342:30 his way a bit with his battle with WP Engine.
342:35 Uh so I should also say that I really love WordPress. It brings me joy. I think it's a really it's a beacon of
342:43 what open source could be. as he has made the internet better. It allowed a
342:50 lot of people to create wonderful websites. And I also think, now you might disagree with this, but from everything I've
342:56 seen, WP Engine just gives me bad vibes.
343:04 I I think they're not a good the good guy in this. I don't like it. I understand the frustration. I understand
343:11 all of it, but I don't think that excuses the behavior. There is a bit of see this kind of counter to a little bit
343:18 what you said which is when you have a open source project of that size there
343:24 is a bit of a like when you're the king that for of a project
343:30 of a kingdom that large there's a bit of responsibility anyway could you speak to your uh maybe to your empathy of Matt
343:40 and uh to your criticism and but and maybe uh paint a path of how
343:50 he and WordPress can be winning again. First, I echo what you said about what a
343:56 wonderful thing it is that WordPress exists. There are not many projects in the open source world or in the world at
344:02 large that has had as big of an impact on the internet as WordPress has. He
344:08 deserves a ton of accolades for that work. So that was my engagement
344:14 essentially my premise. Do you know what I had tremendous respect for what Matt has built with WordPress, what that
344:21 entire ecosystem has built around itself. It's a true marvel, but there's
344:27 some principles that are larger than my personal sympathies to the characters involved. I agree. The Silver Lake
344:35 private equity company that's involved with WP Engine is not my natural ally.
344:41 I'm not the natural ally of private equity doing some game with VP Engine.
344:48 That's not my interest in the case. My interest is essentially a set of
344:55 principles. And the principles are if you release something as open source,
345:00 people are free to use it as they see fit and they are free to donate code or
345:06 resources or money back to the community as they see fit. You may disagree about
345:13 whether they've done enough, whether they should do more, but you can't show up after you've given the gift of free
345:22 software to the world and then say, "Now that you've used that gift, you actually owe me a huge slide of your business
345:28 because you got too successful using the thing I gave you for free." You don't
345:33 get to take a gift back. That's why we have open source licenses. They
345:38 stipulate exactly what the obligations are on both sides of the equation. The users of open source don't get to demand
345:46 what the makers of open source do and how they act. And the makers of open source don't get to suddenly show up
345:53 with a ransom note to the users and say actually you owe me for all sorts of use. I'm 100% allergic to that kind of
346:02 interaction. And I think Matt, unfortunately, for whatever reason,
346:07 got so wrapped up in what he was owed
346:12 that he failed to realize what he was destroying. WordPress and automatic
346:17 already makes a ton of money. This is part of the wonder of WordPress. This is a project that generates hundreds of
346:24 millions of dollars and Matt didn't feel like he was getting enough of that.
346:31 That's not a good argument, bro. You can't just violate the spirit and the letter of these open source licences and
346:38 just start showing up with demand letters even to characters that are not particularly sympathetic. This goes to
346:45 the root of my interpretation of open source in general. The GPL
346:51 is a particular license that actually demands code from people who use it
346:57 under certain circumstances. I've never liked the GPL. I don't want your shitty code if you don't want to give it to me.
347:04 What am I going to do with that? Some code dump that you've I I'm not on board
347:09 with that part of Stallman's vision at all. I love the MIT license. To me, that is the perfect license cuz it is
347:16 mercifully short. I think it's two paragraphs, three paragraphs, really short. And it basically says, "Here's
347:23 some software. It comes with no warranty. You can't sue me. You can't demand anything. But you can do whatever
347:30 the hell you want with it. Have a nice life. That's a perfect open source
347:35 interaction in my opinion. And that license needs to be upheld. These
347:40 licenses in general, even the GPL, even if I don't like it, we have to abide by them because if we just set aside those
347:47 licenses when we in a moment's notice feel like something's slightly unfair, we've lost everything. We've lost the
347:53 entire framework that allowed open source to prosper and allowed open source to become such an integral part
348:00 of commerce too. I mean back when open source was initially finding its feet,
348:05 it was at war with commercial software. Stallman is at war with commercial software and always has been. Bill Gates
348:12 was in return at war with open source for the longest time.
348:17 The open source licences and the clarity that they provide allowed us to end that war. Today, commercial software and open
348:24 source software can peacefully coexist. I make commercial software. I sell base camp. I sell Hey, and then I also make a
348:30 bunch of open source software that I give away for free as gifts. That can't happen if we start violating
348:37 these contracts. No commercial company is going to go, "Let me base my next project off this piece of open source."
348:43 If I'm also running the liability that some mad maker is going to show up seven
348:49 years in and demand I give them $50 million. That's not an environment
348:55 conducive to commerce collaboration or anything else. And it's just basically wrong. I think there's one analysis
349:01 that's all about kind of the practical outcomes of this which I think are bad. There's also some an argument that's
349:07 simply about ethics. This is not right. You can't just show up afterwards and
349:13 demand something. This is not too dissimilar in my opinion to the whole Apple thing we talked about earlier.
349:18 Apple just showing up and feeling like they're entitled to 30% of everyone's business. No, that's that's not right.
349:26 That's not fair. So, I think Matt unfortunately
349:31 kind of stared himself blind on the indignity he thought was being
349:37 perpetrated against him because there was all this money being made by VP Engine making a good product and not
349:43 giving quite enough back in Matt's opinion. Tough tough cookie. I I think they're
349:50 maybe I'm reading too much into it, but there might be some personal stuff too, which they weren't not only not giving
349:56 enough, but probably implicitly promising that they will give
350:02 and then taking advantage of him in that way in his mind. Just like interpersonal interaction and then and then you get
350:09 like interpersonally frustrated. You forget like the bigger picture ethics of it. It's like when a guy keeps saying,
350:16 you know, promising he'll do something. Sure. And then you and then you realize you wake up one day like a year or two
350:22 later. Wait a minute. I was being lied to this whole time. And then that I
350:27 don't even know if it's about money. I I'd get mad, too. It's totally fine to get mad when people disappoint you.
350:33 That's not justification for upending decades of open- source licences and the
350:41 essential de facto case law we've established around it. This is why I chose to even weigh in on this cuz I
350:48 like WordPress. I don't use WordPress. I'm not a part of that community. I don't actually have a dog in this fight.
350:54 I'm biased if anything towards Matt just as a fellow BDFL.
350:60 I would like to see him do well with this, but I also think there's some principles at stake here that ring much
351:05 louder. I don't want Rails to suddenly be tainted by the fact that it's open
351:11 source and whether companies can rely on it and build businesses on it because wait, maybe one day I'm going to turn
351:16 Matt and I'm going to turn Matt King and I'm going to show up with a demand ransom letter. No, screw that. We We
351:22 have way more to protect here. There's way more at stake than your personal beef with someone or your perceived
351:30 grievance over what you're owed. What would you recommend? What do you think you should do, can do to walk it
351:35 back to to to heal?
351:40 Decide. This is the curious thing. He could decide to give this up. That's
351:46 very, very difficult for driven, ambitious people to do, to accept that they're wrong and to give up and lay
351:52 down their sword. So, I had a hope earlier on in this that that was possible. I haven't seen any evidence
351:59 that Matt is interested in that. And I find that deeply regretful, but that's her his prerogative. I continue to speak
352:06 out when he's violating the spirit and ethics of open source. But I wish he
352:12 would just accept that this was a really bad idea. He just he made a bad bet and
352:17 I thought I think he thought he'd just get away with it, that they just pay up and that he could put pressure. I mean,
352:24 I know that temptation when you sit as the head of a very important project.
352:30 You know that that comes with a great degree of power and you really need a
352:36 great degree of discipline to rein that in and not exercise that power at every
352:41 step where you feel agrieved. I've felt agrieved a million times over in the 20
352:46 plus years of Ruby Rails. I've really tried very hard not to let those
352:52 sometimes petty, sometimes substantial grieviances over time
352:57 seep in to the foundation of the ecosystem and risk ruining everything
353:03 as the king of the rails kingdom. Has the power gotten to your head over the years? I'm sure it has. I mean, who wouldn't?
353:10 Do you pace around in your chamber? I do occasionally
353:16 and I I do marvel at both what's been built, what's been possible. Over a million applications have been made with
353:22 Ruby and Rails by one estimate that I've seen. Businesses like Shopify and GitHub and a million others have been built on
353:30 top of something that I started. That's very gratifying, but you really have to be careful not to
353:37 smell your own exhaust too much. And you have to be just as careful not to listen too much to the haters
353:44 and not to listen too much to the super fans either that you assess the value
353:51 and the sort of principles of what you're working towards on its own merits
353:57 on your own scoreboard. I try to block that out and then just go well I'm
354:04 working on Rails because I love to write Ruby. I love to use Ruby to make web
354:10 applications. That's my north star. And I'll continue to do that. And I'll continue to share all of the open source
354:16 gifts that I uncover along the ways. And and that's it. That's enough, too. I
354:23 don't have to get all of it out of it. This is sometimes just as with the guy
354:28 who thought I'd given up on being Jira or something instead of doing base cam. There are people over the years who've
354:35 asked like, "Why didn't you charge for Rails?" Like, "Don't you know how much money I've been made off Rails? If we
354:40 just look at something like Shopify, it's worth billions of dollars. I'm not a billionaire." And so freaking what? I
354:47 got more than enough. I got plenty of my share. I will say though, I'm also
354:54 introspective enough to realize that if it hadn't panned out as well as it did for me on my own business, maybe I would
355:01 have been more tempted. Maybe if you see other people build huge successful companies off the back of your work and
355:08 you really don't have a pot to piss in, you might be tempted to get a little
355:14 upset about that. I've seen that in the Rails world as well where there are people who contributed substantial
355:20 bodies of work and then got really miffed when they didn't feel like they got enough back. I was fortunate enough
355:27 that the business that Jason and I built with Ruby and Rails was as successful as it was and I I made the money I needed
355:33 to make that I didn't need to chase the rest of it. But we should also just make
355:39 explicit that many people in your position chase
355:45 uh chase the money. It's not that difficult to chase. Basically, you turned away money. You made a lot of
355:50 decisions that just turn away money. Maybe I also think of
355:57 this example with Matt. He probably thought there was easy money for the taking. And it wasn't so easy, was it?
356:02 It looked like lowhanging dollar bills and they turned out to be some really sour grapes. It turned out he turned he
356:09 probably destroyed vast sums of money by undermining the whole WordPress trust
356:16 and the ecosystem and putting question marks in the heads of folks who would choose to use WordPress or something
356:22 else going forward. So, I often think when people think like, "Oh, you left money on the table." First of all, so
356:29 what? I don't have to have all the money, but second of all, maybe the money wasn't on the table at all. And maybe the cost, even if you got the
356:36 money, maybe the cost in other ways, like we've talked about, yes, would outweigh all the money that you
356:42 could have possibly gotten. Meaning like I think you said that the thing that makes you happy
356:48 is flow and tranquility. Those two things beautifully really beautifully put
356:53 and it you know m gaining money might assign to your responsibility of running
356:59 a larger thing that takes away the flow that you gain from being from
357:06 from fundamentally for you what flow means is programming and then tranquility is like I think you also
357:13 have a beautiful post of like nirvana is an empty schedule when I look at a upcoming week and I see
357:20 that I have no scheduled meetings at all, which is quite common. Or maybe I just have one thing for one hour on one
357:26 day. I think to myself, do you know what? This could very easily have been very different. We could have been
357:31 running a company of hundreds of people or thousands of people and my entire calendar would have been packed solid
357:37 with little Tetris blocks of other people's demands on my attention and time and I would have been miserable as
357:44 fuck. Yep. And I look at that and go like that. What more can I ask for? Which is
357:51 a really nice state of being. I'd actually say I didn't have this always. I did have early on in my career some
357:59 sense of like I need a little more a little more security. And I remember
358:04 this really interesting study where a bunch of researchers asked people who had made certain amounts of money, how
358:11 much money would it take for you to feel secure? They'd ask people who had a million dollars net worth. How much
358:17 money do you need? Probably need two million. 2 million. Then it'd be good. Then they ask people with a net worth of
358:23 five million. How much do you need? Ah, 10. I need 10. Ask people with 10 million. What do you need? 20. Every
358:30 single time people would need double of what they did. I did that for a couple of doublings until I realized, you know
358:35 what? This is silly. I am already where I wished I would be and a million times over. So what less is there to pursue?
358:44 Now that doesn't mean that if more money is coming my way, I'm going to say no to it. Of course not. But it does mean that
358:51 I'm free to set other things higher. And I also do think you realize, as Jim
358:56 Carrey would say, I wish everyone would get all the money that they wished for and they'd realize it wasn't the answer.
359:01 That money solves a whole host of problems and anxieties and then it
359:07 creates a bunch of new ones. And then it also doesn't touch a huge swath of the
359:13 human experience at all. The world is full of miserable, anxious, hurt rich
359:19 people. It's also full of miserable, anxious, poor people. And I'd rather be a
359:24 miserable, anxious, rich person than a poor person. But it isn't this magic wand that make everything go away. And
359:30 that's again one of those insights just like having children that you cannot communicate in words. I've
359:37 never been able to persuade a person who's not wealthy that wealth wasn't going to solve all their problems.
359:43 One quote you've returned to often that I enjoy a lot is the Coco Chanel quote of the best things in in life are free
359:51 and uh the second best things are very very expensive. And I guess the task is
359:58 to uh focus on uh surrounding yourself with the best things in life like family and all of
360:04 this and not caring about the other stuff. I would even say you can care about the other stuff. Just know the order of
360:11 priority. Yeah. If you are blessed with a partner that you love, some children
360:18 that you adore, you've already won the greatest prize that most humans are able
360:25 to achieve. Most humans in this world, if they are of marital age and they have
360:31 children, if you ask them what's the most important thing, they would all say that. They would all say that. no matter
360:37 whether they're rich or poor. It's easy to lose sight of that when you're chasing the second best things because
360:43 do you know what? They're also very nice. Mhm. I I really like that Pagani Sonda. It
360:48 was a very expensive car and I would had no chance of acquiring it if I hadn't become rather
360:54 successful in business. So, I don't want to dismiss it either. It's great fun to
361:00 have money. It's just not as fun for quite as long or as deep
361:07 as you think it is. And these other things, having an occupation and a pursuit that you enjoy, being able to
361:14 carry burdens with a stiff up lip and with again a
361:21 sense of meaning is incredible. to have family, to have friends, to have
361:27 hobbies, to have all these things that are actually available to most people around the world. That's
361:34 winning. And it doesn't mean you have to discount your ambitions. It doesn't mean you can't reach for more. But it does
361:43 mean it's pretty dumb if you don't realize that it's not going to complete you in some
361:50 hocus pocus woo sense to make more. It It really isn't. What gives you hope
361:58 about the future of this whole thing we have going on here, human civilization?
362:05 I find it easier to be optimistic optimistic than pessimistic because I
362:12 don't know either way. So if I get to choose, why not just choose to believe it's going to pan out?
362:17 Yeah. Like we suffer more in our imagination than we do in reality. That's one of the
362:23 quotes out of stoicism. And I also think we have a tendency, a lot of humans have
362:29 a tendency to be pessimistic in advance for things they don't know how it's
362:34 going to pan out. Climate change, for example, is making a lot of people very anxious and very pessimistic about the
362:41 future. You know, nothing. 40 years ago, we thought the problem was that the planet was going to be too cool. I
362:47 happen to believe that it's probably correct that the planet is getting too hot and that CO2 has something to do
362:53 with it. Whether we have the right measures to fix it in time, if that's even possible or not, is completely up
363:01 in the air. And we don't know. If you convince yourself with such certainty that the world is going to turn to shit,
363:08 it is right up here in your head today. Climate change might wipe out this
363:13 entire species in 200 years. It's not next year. It's not 10 years from now.
363:21 you life might become more unpleasant and there might be more negative effects and so on. Yes. Okay. But then deal with
363:26 that hardship when it arrives. Don't take that in advance. How are you helping earth by just walking around
363:34 being depressed? I think our whole conversation today is
363:39 also an indication there. It's just two humans talking. There's billions of us
363:44 and there is something about us that wants to solve problems and build cool stuff. Yes. And so we're going to build
363:51 our way out of whatever shit we get ourselves into. This is what humans do. We create problems for ourselves and and
363:58 come up figure out how to build rocket ships to uh to get out of those
364:04 problems. And sometimes the rocket ships create other problems like nuclear warheads. And then we'll I'm sure
364:11 I hope figure out ways how to avoid those problems. And then there'll be nanobots. And then the aliens will come
364:17 and it'll be a massive war between the nanobots and the aliens and and that will bring also all of us humans
364:23 together. The funny thing just to pick on one of the points you mentioned the atom bomb
364:29 for example when that was first invented a lot of people thought we have essentially ended life on earth right
364:36 or maybe we prevented World War II from happening in the past 80 years because
364:42 assured mutual annihilation kept the superpowers from attacking each other at
364:48 least head on and kept their fighting to proxy wars. You know what? Proxy wars
364:53 are not great, but they're probably better than World War II with nuclear weapons. So, it's quite difficult in the
365:00 moment to tell what's actually benefit and what's not. And I think we should be
365:05 a bit more humble. I've certainly become more humble over time of thinking I know
365:11 which way it's going to turn. I think the pandemic was a huge moment for a lot of people where there was so much
365:17 certainty about whether this intervention worked or that intervention didn't work and most people were wrong.
365:26 Certainly a lot of very smart people very qualified people got that just
365:31 utterly and catastrophyingly wrong. So just a little intellectual
365:37 humility. I think back upon that and go like you know what I'm not a PhD in viology.
365:44 Um and I don't claim that like I somehow saw how it all was going to play out but the people who were really experts and
365:49 that they got a bunch of it wrong. Nobody knows anything. I keep reminding myself of that every day. No one knows
365:56 anything. We can't predict the economy a month out. We can't predict world
366:01 affairs a month. The world is just too complicated. Yeah. I when I watched the Netflix documentary Chimp Empire
366:08 and how, you know, there's a hierarchy of chimps, all of that looks eerily similar to us
366:14 humans. We're recent descendants. So, these experts, some of the chimps are
366:21 got a PhD, others don't. Uh, others are really muscular, others are like beta
366:27 male kind. They're sucking up to the alpha. There's a lot of interesting dynamics going on that really maps
366:32 cleanly to the geopolitics of the day. They don't have nuclear weapons, but the nature of their behavior is similar to
366:38 ours. So, I think I think we barely know what's going on. But I do think there's
366:44 like a basic uh will to cooperate.
366:51 There's a basic compassion that underlies are just the human spirit that's there. And maybe that is just me
366:59 being optimistic, but if if that is indeed there, I think we're going to be okay. The capacity is certainly there.
367:05 Whether we choose that capacity or not, who knows and in what situation. I think accepting that we all have the capacity
367:11 for both ways for both incredible generosity and kindness and also
367:17 cruelty. I think uh Young with his whole theory of the shadow was really spot on
367:23 that we all have that capacity in us and accepting that it's our job to attempt
367:30 to cultivate the better parts of our human nature is weighed against our propensity to
367:38 sometime be the worst of ourselves. I'm excited to find out what's going to happen. It's so awesome to be human. I
367:45 don't want to die. I kind of want to be alive for a while to see all the cool shit we do. And uh one of the cool
367:51 things I want to see is all the software you create and all the things you tweet,
367:56 all the trouble you get yourself into on Twitter. Um David, yeah, I'm a huge fan.
368:01 Like I said, thank you for everything you've done for the world, for the millions of developers you've inspired
368:07 and uh one of whom is me. And thank you for this awesome conversation, brother. Thanks so much for having me.
368:14 Thanks for listening to this conversation with DHH. To support this podcast, please check out our sponsors
368:19 in the description and consider subscribing to this channel. And now, let me leave you with some words from
368:25 Rework by DHH and Jason Frerieded. What you do is what matters, not what
368:32 you think or say or plan. Thank you for listening and hope to see
368:38 you next time.